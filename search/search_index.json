{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Imbi Automations CLI","text":"<p>A comprehensive CLI framework for executing automated workflows across software project repositories with AI-powered transformations and deep integration to the Imbi project management system.</p>"},{"location":"#overview","title":"Overview","text":"<p>Imbi Automations enables bulk automation across your software projects with intelligent targeting, conditional execution, and powerful transformation capabilities. Built on a modern async Python architecture, it provides seamless integration with GitHub, GitLab, and the Imbi project management platform.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Multi-Provider Support: Native GitHub and GitLab API integration</li> <li>AI-Powered Transformations: Claude Code SDK for intelligent code changes</li> <li>Advanced Filtering: Target specific project subsets with multiple criteria</li> <li>Conditional Execution: Smart workflow execution based on repository state</li> <li>Batch Processing: Concurrent processing with resumption capabilities</li> <li>Template System: Jinja2-based file generation with full project context</li> </ul>"},{"location":"#action-types","title":"Action Types","text":"<p>The framework supports multiple transformation types:</p> <ul> <li>Callable Actions: Direct API method calls with dynamic parameters</li> <li>Claude Code Integration: Complex multi-file analysis and AI transformations</li> <li>Docker Operations: Container-based file extraction and manipulation</li> <li>Git Operations: Version control operations and branch management</li> <li>File Actions: Copy, move, delete, and regex replacement operations</li> <li>Shell Commands: Execute arbitrary commands with template variables</li> <li>Utility Actions: Helper operations for common workflow patterns</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#from-pypi","title":"From PyPI","text":"<pre><code>pip install imbi-automations\n</code></pre>"},{"location":"#development-installation","title":"Development Installation","text":"<pre><code>git clone &lt;repository-url&gt;\ncd imbi-automations-cli\npip install -e .[dev]\npre-commit install\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#1-configuration","title":"1. Configuration","text":"<p>Create a <code>config.toml</code> file with your API credentials:</p> <pre><code>[github]\napi_key = \"ghp_your_github_token\"\nhostname = \"github.com\"  # Optional, defaults to github.com\n\n[imbi]\napi_key = \"your-imbi-api-key\"\nhostname = \"imbi.example.com\"\n\n[claude_code]\nexecutable = \"claude\"  # Optional, defaults to 'claude'\n</code></pre>"},{"location":"#2-run-a-workflow","title":"2. Run a Workflow","text":"<p>Execute workflows across all your projects:</p> <pre><code># Run a specific workflow\nimbi-automations config.toml workflows/workflow-name --all-projects\n\n# Resume from a specific project (useful for large batches)\nimbi-automations config.toml workflows/workflow-name --all-projects --start-from-project my-project-slug\n</code></pre>"},{"location":"#3-available-workflows","title":"3. Available Workflows","text":"<p>The tool includes 25+ pre-built workflows for common tasks:</p> <ul> <li>Python Version Updates: Upgrade projects to newer Python versions</li> <li>Docker Image Updates: Update base images and dependencies</li> <li>GitHub Actions: Fix and optimize CI/CD pipelines</li> <li>Code Quality: Apply linting, formatting, and pre-commit hooks</li> <li>Infrastructure Updates: Modernize project configurations and tooling</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Architecture Guide: Comprehensive technical documentation</li> <li>Workflow Actions: Complete action types reference</li> <li>Workflow Configuration: See workflows directory in repository</li> <li>Developer Guide: See AGENTS.md in repository</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.12 or higher</li> <li>GitHub API access (for GitHub workflows)</li> <li>GitLab API access (for GitLab workflows)</li> <li>Imbi project management system access</li> </ul>"},{"location":"architecture/","title":"Architecture Guide","text":"<p>This guide provides a comprehensive overview of the Imbi Automations CLI architecture, components, and implementation patterns.</p>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>Imbi Automations is built on a modern async Python architecture designed for scalability, maintainability, and extensibility. The system follows a modular design with clear separation of concerns between different layers.</p>"},{"location":"architecture/#core-architecture-principles","title":"Core Architecture Principles","text":"<ul> <li>Async-First: Full async/await implementation with concurrent processing</li> <li>Modular Design: Clean separation between clients, models, and business logic</li> <li>Type Safety: Comprehensive type hints throughout the codebase</li> <li>Configuration-Driven: TOML-based workflows with Pydantic validation</li> <li>Extensible: Plugin-ready architecture for new action types and providers</li> </ul>"},{"location":"architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"architecture/#primary-components","title":"Primary Components","text":""},{"location":"architecture/#cli-interface-clipy","title":"CLI Interface (<code>cli.py</code>)","text":"<p>The entry point for the application, responsible for: - Command-line argument parsing and validation - Colored logging configuration with different levels - Workflow validation and loading - Error handling and user feedback</p>"},{"location":"architecture/#controller-controllerpy","title":"Controller (<code>controller.py</code>)","text":"<p>Main automation controller implementing the iterator pattern: - Project iteration and filtering - Workflow orchestration across multiple targets - Concurrent processing with proper resource management - Progress tracking and resumption capabilities</p>"},{"location":"architecture/#workflow-engine-enginepy","title":"Workflow Engine (<code>engine.py</code>)","text":"<p>Core execution engine that handles: - Action execution with context management - Temporary directory handling for repository operations - Error recovery and action restart mechanisms - Template variable resolution with Jinja2 - Comprehensive logging and status reporting</p>"},{"location":"architecture/#client-layer","title":"Client Layer","text":"<p>The client layer provides abstraction for external service interactions:</p>"},{"location":"architecture/#http-client-clientshttppy","title":"HTTP Client (<code>clients/http.py</code>)","text":"<p>Base async HTTP client with: - Authentication handling for various providers - Automatic retry logic with exponential backoff - Request/response logging with credential sanitization - Error handling and timeout management</p>"},{"location":"architecture/#imbi-client-clientsimbipy","title":"Imbi Client (<code>clients/imbi.py</code>)","text":"<p>Integration with Imbi project management system: - Project data retrieval and filtering - Environment and metadata synchronization - Fact validation and updates - Pagination handling for large datasets</p>"},{"location":"architecture/#github-client-clientsgithubpy","title":"GitHub Client (<code>clients/github.py</code>)","text":"<p>GitHub API integration featuring: - Repository and organization operations - Pattern-aware workflow file detection - Environment management - Pull request creation and management - Rate limiting and API quota management</p>"},{"location":"architecture/#gitlab-client-clientsgitlabpy","title":"GitLab Client (<code>clients/gitlab.py</code>)","text":"<p>GitLab API integration for: - Project and group operations - Repository cloning and management - Pipeline and CI/CD integration - Merge request handling</p>"},{"location":"architecture/#data-models","title":"Data Models","text":"<p>All models use Pydantic for validation and type safety:</p>"},{"location":"architecture/#configuration-models-modelsconfigurationpy","title":"Configuration Models (<code>models/configuration.py</code>)","text":"<ul> <li>TOML-based configuration with secret handling</li> <li>Provider-specific settings (GitHub, GitLab, Imbi)</li> <li>Claude Code SDK integration settings</li> <li>Validation rules and default values</li> </ul>"},{"location":"architecture/#workflow-models-modelsworkflowpy","title":"Workflow Models (<code>models/workflow.py</code>)","text":"<p>Comprehensive workflow definition including: - Actions: Sequence of operations with type validation - Conditions: Repository state requirements (local and remote) - Filters: Project targeting and selection criteria - Templates: Jinja2 template configurations</p>"},{"location":"architecture/#provider-models","title":"Provider Models","text":"<ul> <li>GitHub Models (<code>models/github.py</code>): Repository, organization, and API response models</li> <li>GitLab Models (<code>models/gitlab.py</code>): Project, group, and API response models</li> <li>Imbi Models (<code>models/imbi.py</code>): Project management system models</li> </ul>"},{"location":"architecture/#supporting-components","title":"Supporting Components","text":""},{"location":"architecture/#git-operations-gitpy","title":"Git Operations (<code>git.py</code>)","text":"<p>Comprehensive Git integration: - Repository cloning with authentication - Branch management and switching - Commit creation and history management - Tag and version handling - Conflict resolution strategies</p>"},{"location":"architecture/#file-actions-file_actionspy","title":"File Actions (<code>file_actions.py</code>)","text":"<p>File manipulation operations: - Copy, move, and delete operations - Regex-based content replacement - Template file processing - Directory structure management - Backup and restore capabilities</p>"},{"location":"architecture/#shell-integration-shellpy","title":"Shell Integration (<code>shell.py</code>)","text":"<p>Command execution with: - Template variable substitution - Environment variable management - Output capture and logging - Error handling and exit code processing - Timeout and resource management</p>"},{"location":"architecture/#condition-checker-condition_checkerpy","title":"Condition Checker (<code>condition_checker.py</code>)","text":"<p>Workflow condition evaluation: - Local file system checks (post-clone) - Remote repository checks via API (pre-clone) - Regex pattern matching - Performance optimization with early filtering</p>"},{"location":"architecture/#docker-integration-dockerpy","title":"Docker Integration (<code>docker.py</code>)","text":"<p>Container operations for: - Image extraction and analysis - File extraction from containers - Dockerfile parsing and manipulation - Registry operations</p>"},{"location":"architecture/#workflow-system","title":"Workflow System","text":""},{"location":"architecture/#workflow-structure","title":"Workflow Structure","text":"<p>Workflows are defined in TOML configuration files with three main sections:</p> <pre><code># Project filtering\n[filter]\nproject_ids = [123, 456]\nproject_types = [\"apis\", \"consumers\"]\nrequires_github_identifier = true\n\n# Execution conditions\n[[conditions]]\nremote_file_exists = \"package.json\"\n\n[[conditions]]\nfile_contains = \"python.*3\\\\.12\"\nfile = \"pyproject.toml\"\n\n# Action sequence\n[[actions]]\nname = \"update-dependencies\"\ntype = \"claude\"\n# ... action configuration\n</code></pre>"},{"location":"architecture/#action-types","title":"Action Types","text":""},{"location":"architecture/#1-callable-actions","title":"1. Callable Actions","text":"<p>Direct method calls on client instances: <pre><code>[[actions]]\ntype = \"callable\"\n[actions.value]\nclient = \"github\"\nmethod = \"create_pull_request\"\n[actions.value.kwargs]\ntitle = \"{{ workflow_name }}\"\nbody = \"Automated update\"\n</code></pre></p>"},{"location":"architecture/#2-claude-code-integration","title":"2. Claude Code Integration","text":"<p>AI-powered transformations: <pre><code>[[actions]]\ntype = \"claude\"\n[actions.value]\nprompt_file = \"prompts/update-readme.md\"\ncontext = \"project_context\"\n</code></pre></p>"},{"location":"architecture/#3-file-operations","title":"3. File Operations","text":"<p>Direct file manipulation: <pre><code>[[actions]]\ntype = \"file\"\n[actions.value]\noperation = \"regex_replace\"\nfile = \"README.md\"\npattern = \"Version: \\\\d+\\\\.\\\\d+\\\\.\\\\d+\"\nreplacement = \"Version: {{ new_version }}\"\n</code></pre></p>"},{"location":"architecture/#4-shell-commands","title":"4. Shell Commands","text":"<p>Arbitrary command execution: <pre><code>[[actions]]\ntype = \"shell\"\n[actions.value]\ncommand = \"python -m pytest tests/\"\nworking_directory = \"{{ repository_path }}\"\n</code></pre></p>"},{"location":"architecture/#condition-system","title":"Condition System","text":""},{"location":"architecture/#remote-conditions-pre-clone","title":"Remote Conditions (Pre-Clone)","text":"<p>Evaluated using provider APIs before repository cloning: - Performance Benefit: Skip cloning for non-matching repositories - Bandwidth Efficient: Reduce network usage for large batch operations - Early Filtering: Fail fast before expensive operations</p> <pre><code>[[conditions]]\nremote_file_exists = \".github/workflows/ci.yml\"\n\n[[conditions]]\nremote_file_contains = \"python.*3\\\\.[0-9]+\"\nremote_file = \"pyproject.toml\"\n</code></pre>"},{"location":"architecture/#local-conditions-post-clone","title":"Local Conditions (Post-Clone)","text":"<p>Evaluated after repository cloning for complex analysis: - Full Access: Complete repository content available - Complex Patterns: Multi-file analysis and cross-references - File Content Analysis: Deep inspection of file contents</p> <pre><code>[[conditions]]\nfile_exists = \"docker-compose.yml\"\n\n[[conditions]]\nfile_contains = \"FROM python:3\\\\.[0-9]+\"\nfile = \"Dockerfile\"\n</code></pre>"},{"location":"architecture/#template-system","title":"Template System","text":"<p>Jinja2-based template engine with full project context:</p>"},{"location":"architecture/#available-variables","title":"Available Variables","text":"<ul> <li><code>{{ imbi_project }}</code>: Complete Imbi project data</li> <li><code>{{ github_repository }}</code>: GitHub repository information</li> <li><code>{{ workflow_name }}</code>: Current workflow identifier</li> <li><code>{{ repository_path }}</code>: Local repository path</li> <li><code>{{ timestamp }}</code>: Execution timestamp</li> </ul>"},{"location":"architecture/#template-files","title":"Template Files","text":"<pre><code># Pull Request Template\n## Summary\nUpdating {{ imbi_project.name }} to use Python {{ target_version }}\n\n## Changes\n- Updated pyproject.toml Python version requirement\n- Modified GitHub Actions workflow\n- Updated Dockerfile base image\n\nGenerated by: {{ workflow_name }}\nDate: {{ timestamp }}\n</code></pre>"},{"location":"architecture/#error-handling-and-recovery","title":"Error Handling and Recovery","text":""},{"location":"architecture/#action-restart-mechanism","title":"Action Restart Mechanism","text":"<p>Actions support automatic restart on failure: <pre><code>[[actions]]\nname = \"fragile-operation\"\non_failure = \"cleanup-action\"  # Restart from this action\nmax_retries = 3\n</code></pre></p>"},{"location":"architecture/#failure-indication","title":"Failure Indication","text":"<ul> <li>Failure Files: Create specific failure files to signal workflow abortion</li> <li>Detailed Logging: Include actionable error information</li> <li>Recovery Strategies: Configurable retry and rollback mechanisms</li> </ul>"},{"location":"architecture/#resource-management","title":"Resource Management","text":"<ul> <li>Temporary Directory Cleanup: Automatic cleanup on success or failure</li> <li>Connection Pooling: Efficient HTTP connection reuse</li> <li>Memory Management: LRU caching for expensive operations</li> </ul>"},{"location":"architecture/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"architecture/#concurrent-processing","title":"Concurrent Processing","text":"<ul> <li>Batch Operations: Process multiple projects concurrently</li> <li>Connection Pooling: Reuse HTTP connections across requests</li> <li>Async Operations: Non-blocking I/O throughout the system</li> </ul>"},{"location":"architecture/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>LRU Caching: Cache expensive API calls and computations</li> <li>Repository State: Cache repository metadata between operations</li> <li>Template Compilation: Pre-compile Jinja2 templates</li> </ul>"},{"location":"architecture/#early-filtering","title":"Early Filtering","text":"<ul> <li>Remote Conditions: Filter projects before cloning</li> <li>Project Filtering: Apply filters before workflow execution</li> <li>Resumption: Skip already processed projects</li> </ul>"},{"location":"architecture/#testing-architecture","title":"Testing Architecture","text":""},{"location":"architecture/#test-infrastructure","title":"Test Infrastructure","text":"<ul> <li>Base Class: <code>AsyncTestCase</code> for async test support</li> <li>HTTP Mocking: <code>httpx.MockTransport</code> with JSON fixtures</li> <li>Test Isolation: Clean state between test runs</li> <li>Coverage Requirements: Comprehensive test coverage with exclusions</li> </ul>"},{"location":"architecture/#mock-data-strategy","title":"Mock Data Strategy","text":"<ul> <li>Path-Based Fixtures: JSON files matching URL patterns</li> <li>Realistic Data: Production-like test data</li> <li>Edge Cases: Comprehensive error condition testing</li> </ul>"},{"location":"architecture/#integration-testing","title":"Integration Testing","text":"<ul> <li>End-to-End Workflows: Complete workflow execution tests</li> <li>Provider Integration: Real API integration tests (optional)</li> <li>Performance Testing: Load and concurrency testing</li> </ul>"},{"location":"architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/#credential-management","title":"Credential Management","text":"<ul> <li>Secret Strings: Automatic credential masking in logs</li> <li>Configuration Validation: Secure handling of API keys</li> <li>Environment Variables: Support for environment-based configuration</li> </ul>"},{"location":"architecture/#api-security","title":"API Security","text":"<ul> <li>Authentication: Proper token and key management</li> <li>Rate Limiting: Respect provider API limits</li> <li>SSL/TLS: Secure communication with all external services</li> </ul>"},{"location":"architecture/#repository-security","title":"Repository Security","text":"<ul> <li>Temporary Directories: Secure cleanup of cloned repositories</li> <li>File Permissions: Proper permission handling</li> <li>Branch Protection: Safe branch and tag operations</li> </ul>"},{"location":"architecture/#extensibility","title":"Extensibility","text":""},{"location":"architecture/#adding-new-action-types","title":"Adding New Action Types","text":"<ol> <li>Create action handler in appropriate module</li> <li>Add action type to workflow model validation</li> <li>Implement action execution logic</li> <li>Add comprehensive tests</li> </ol>"},{"location":"architecture/#adding-new-providers","title":"Adding New Providers","text":"<ol> <li>Implement client interface in <code>clients/</code></li> <li>Create provider-specific models</li> <li>Add configuration support</li> <li>Implement authentication and API integration</li> </ol>"},{"location":"architecture/#custom-workflows","title":"Custom Workflows","text":"<ol> <li>Create workflow directory structure</li> <li>Define <code>config.toml</code> with actions and conditions</li> <li>Add template files if needed</li> <li>Test with target projects</li> </ol> <p>This architecture provides a solid foundation for scalable automation across software projects while maintaining flexibility for future enhancements and integrations.</p>"},{"location":"cli/","title":"Command-Line Interface","text":"<p>Imbi Automations provides a comprehensive CLI for executing workflows across projects with flexible targeting, concurrency control, and debugging capabilities.</p>"},{"location":"cli/#basic-usage","title":"Basic Usage","text":"<pre><code>imbi-automations CONFIG WORKFLOW [OPTIONS]\n</code></pre> <p>Arguments: - <code>CONFIG</code>: Path to configuration TOML file - <code>WORKFLOW</code>: Path to workflow directory containing config.toml</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-python --all-projects\n</code></pre></p>"},{"location":"cli/#complete-syntax","title":"Complete Syntax","text":"<pre><code>imbi-automations [-h] [-V] [--debug] [-v]\n                 [--max-concurrency N]\n                 [--exit-on-error]\n                 [--preserve-on-error]\n                 [--error-dir DIR]\n                 [--start-from-project ID_OR_SLUG]\n                 (--project-id ID |\n                  --project-type SLUG |\n                  --all-projects |\n                  --github-repository URL |\n                  --github-organization ORG |\n                  --all-github-repositories |\n                  --gitlab-repository URL |\n                  --gitlab-group GROUP |\n                  --all-gitlab-repositories)\n                 CONFIG WORKFLOW\n</code></pre>"},{"location":"cli/#positional-arguments","title":"Positional Arguments","text":""},{"location":"cli/#config","title":"CONFIG","text":"<p>Path to configuration file containing API credentials and settings.</p> <p>Type: File path Format: TOML file Required: Yes</p> <p>Example: <pre><code>imbi-automations config.toml workflows/my-workflow --all-projects\nimbi-automations /etc/imbi/prod.toml workflows/deploy --all-projects\n</code></pre></p> <p>See Also: Configuration Documentation</p>"},{"location":"cli/#workflow","title":"WORKFLOW","text":"<p>Path to workflow directory containing <code>config.toml</code>.</p> <p>Type: Directory path Required: Yes Must Contain: <code>config.toml</code> file</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-python --all-projects\nimbi-automations config.toml ./my-workflow --project-id 123\n</code></pre></p> <p>Structure: <pre><code>workflows/my-workflow/\n\u251c\u2500\u2500 config.toml          # Required\n\u251c\u2500\u2500 prompts/             # Optional\n\u2502   \u2514\u2500\u2500 prompt.md\n\u2514\u2500\u2500 templates/           # Optional\n    \u2514\u2500\u2500 template.j2\n</code></pre></p>"},{"location":"cli/#targeting-options","title":"Targeting Options","text":"<p>Exactly one targeting option is required to specify which projects/repositories to process.</p>"},{"location":"cli/#-project-id-id","title":"--project-id ID","text":"<p>Process a single Imbi project by ID.</p> <p>Type: Integer Use Case: Testing workflows on specific project</p> <p>Example: <pre><code>imbi-automations config.toml workflows/fix-config --project-id 123\n</code></pre></p> <p>Output: <pre><code>Processing: my-project (123)\n\u2713 Completed: my-project\n</code></pre></p>"},{"location":"cli/#-project-type-slug","title":"--project-type SLUG","text":"<p>Process all Imbi projects of a specific type.</p> <p>Type: String (project type slug) Use Case: Target specific project categories</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-apis --project-type api\n</code></pre></p> <p>Common Project Types: - <code>api</code> - API services - <code>consumer</code> - Message consumers - <code>scheduled-job</code> - Scheduled tasks - <code>frontend</code> - Frontend applications - <code>library</code> - Shared libraries</p> <p>Output: <pre><code>Found 47 projects of type 'api'\nProcessing: api-service-1 (123)\nProcessing: api-service-2 (124)\n...\nCompleted: 45/47 projects successful\n</code></pre></p>"},{"location":"cli/#-all-projects","title":"--all-projects","text":"<p>Process all projects in Imbi.</p> <p>Type: Flag (boolean) Use Case: Batch updates across entire organization</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-deps --all-projects\n</code></pre></p> <p>Output: <pre><code>Found 664 total projects\nProcessing 664 projects...\n\u2713 Completed: 650/664 successful\n</code></pre></p> <p>Warning: This processes ALL projects. Use with caution and test workflow first with <code>--project-id</code>.</p>"},{"location":"cli/#-github-repository-url","title":"--github-repository URL","text":"<p>Process a single GitHub repository by URL.</p> <p>Type: URL string Format: <code>https://github.com/org/repo</code> or <code>org/repo</code> Use Case: Target specific GitHub repository</p> <p>Example: <pre><code>imbi-automations config.toml workflows/fix-actions \\\n  --github-repository https://github.com/myorg/myrepo\n</code></pre></p> <p>Accepted Formats: <pre><code>--github-repository https://github.com/org/repo\n--github-repository github.com/org/repo\n--github-repository org/repo\n</code></pre></p>"},{"location":"cli/#-github-organization-org","title":"--github-organization ORG","text":"<p>Process all repositories in a GitHub organization.</p> <p>Type: String (organization name) Use Case: Update all repos in an organization</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-workflows \\\n  --github-organization myorg\n</code></pre></p> <p>Output: <pre><code>Found 32 repositories in organization 'myorg'\nProcessing: myorg/repo1\nProcessing: myorg/repo2\n...\nCompleted: 30/32 successful\n</code></pre></p>"},{"location":"cli/#-all-github-repositories","title":"--all-github-repositories","text":"<p>Process all GitHub repositories across all organizations.</p> <p>Type: Flag (boolean) Use Case: Organization-wide GitHub updates</p> <p>Example: <pre><code>imbi-automations config.toml workflows/security-update \\\n  --all-github-repositories\n</code></pre></p> <p>Note: Discovers repositories from all organizations the API key has access to.</p>"},{"location":"cli/#-gitlab-repository-url","title":"--gitlab-repository URL","text":"<p>Process a single GitLab repository by URL.</p> <p>Type: URL string Format: <code>https://gitlab.com/group/project</code> Use Case: Target specific GitLab project</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-ci \\\n  --gitlab-repository https://gitlab.com/mygroup/myproject\n</code></pre></p>"},{"location":"cli/#-gitlab-group-group","title":"--gitlab-group GROUP","text":"<p>Recursively process all repositories in a GitLab group.</p> <p>Type: String (group path) Use Case: Update all projects in a GitLab group</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-deps \\\n  --gitlab-group mygroup/subgroup\n</code></pre></p> <p>Note: Processes group and all subgroups recursively.</p>"},{"location":"cli/#-all-gitlab-repositories","title":"--all-gitlab-repositories","text":"<p>Process all GitLab repositories across all accessible groups.</p> <p>Type: Flag (boolean) Use Case: Organization-wide GitLab updates</p> <p>Example: <pre><code>imbi-automations config.toml workflows/security-scan \\\n  --all-gitlab-repositories\n</code></pre></p>"},{"location":"cli/#execution-control-options","title":"Execution Control Options","text":""},{"location":"cli/#-start-from-project-id_or_slug","title":"--start-from-project ID_OR_SLUG","text":"<p>Resume batch processing from a specific project.</p> <p>Type: Integer (ID) or String (slug) Use Case: Resume interrupted batch runs</p> <p>Example: <pre><code># By project ID\nimbi-automations config.toml workflows/update-all \\\n  --all-projects \\\n  --start-from-project 456\n\n# By project slug\nimbi-automations config.toml workflows/update-all \\\n  --all-projects \\\n  --start-from-project my-project-slug\n</code></pre></p> <p>Behavior: - Skips all projects up to and including the specified project - Starts processing from the next project - Useful for resuming after interruption or failure</p> <p>Example Scenario: <pre><code># Initial run interrupted at project ID 456\nimbi-automations config.toml workflows/big-update --all-projects\n# ... processes projects 1-456, then interrupted\n\n# Resume from where it left off\nimbi-automations config.toml workflows/big-update \\\n  --all-projects \\\n  --start-from-project 456\n# ... starts from project 457\n</code></pre></p>"},{"location":"cli/#-max-concurrency-n","title":"--max-concurrency N","text":"<p>Set maximum number of concurrent workflow executions.</p> <p>Type: Integer Default: <code>1</code> (sequential) Range: 1-100 (practical limit depends on system resources)</p> <p>Example: <pre><code># Process 5 projects simultaneously\nimbi-automations config.toml workflows/update-deps \\\n  --all-projects \\\n  --max-concurrency 5\n</code></pre></p> <p>Performance Considerations:</p> Concurrency Use Case Memory Risk 1 Debugging, testing Low None 2-5 Normal batch processing Medium Low 10+ Large-scale updates High Higher 20+ Maximum throughput Very High Monitor carefully <p>Example Performance: <pre><code># Sequential (slower, safer)\n--max-concurrency 1\n# ~1 project/minute = 664 projects in 11 hours\n\n# Parallel (faster, more resources)\n--max-concurrency 10\n# ~10 projects/minute = 664 projects in 1.1 hours\n</code></pre></p> <p>Warning: Higher concurrency increases: - Memory usage (each workflow uses ~100-500MB) - API rate limit pressure - Disk I/O (simultaneous git clones) - Debugging complexity</p>"},{"location":"cli/#-exit-on-error","title":"--exit-on-error","text":"<p>Stop immediately when any project fails.</p> <p>Type: Flag (boolean) Default: <code>false</code> (continue with other projects)</p> <p>Example: <pre><code>imbi-automations config.toml workflows/critical-update \\\n  --all-projects \\\n  --exit-on-error\n</code></pre></p> <p>Behavior: - Without flag: Logs error, continues to next project - With flag: Exits immediately with error code</p> <p>Use Cases: - CI/CD pipelines requiring atomic success - Testing workflows before batch runs - Critical updates that must succeed for all projects - Debugging specific failure</p> <p>Example Comparison: <pre><code># Default: continues on error\nimbi-automations config.toml workflows/update --all-projects\n# Processes all 664 projects even if some fail\n# Exit code: 0 if any succeeded\n\n# Exits on first error\nimbi-automations config.toml workflows/update --all-projects --exit-on-error\n# Stops at first failure\n# Exit code: 5 on failure\n</code></pre></p>"},{"location":"cli/#debugging-options","title":"Debugging Options","text":""},{"location":"cli/#-preserve-on-error","title":"--preserve-on-error","text":"<p>Save working directory state when workflows fail.</p> <p>Type: Flag (boolean) Default: <code>false</code></p> <p>Example: <pre><code>imbi-automations config.toml workflows/failing-workflow \\\n  --project-id 123 \\\n  --preserve-on-error\n</code></pre></p> <p>What Gets Saved: - Complete Git repository state - Workflow resource files - Docker extracted files - All temporary files - <code>debug.log</code> with complete execution trace</p> <p>Storage Location: <code>./errors/workflow-name/project-slug-timestamp/</code></p> <p>See Also: Debugging Documentation</p>"},{"location":"cli/#-error-dir-dir","title":"--error-dir DIR","text":"<p>Specify directory for saving error states.</p> <p>Type: Directory path Default: <code>./errors</code></p> <p>Example: <pre><code>imbi-automations config.toml workflows/test \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --error-dir /tmp/workflow-errors\n</code></pre></p> <p>Directory Structure: <pre><code>/tmp/workflow-errors/\n\u2514\u2500\u2500 workflow-name/\n    \u2514\u2500\u2500 project-slug-20250103-143052/\n        \u251c\u2500\u2500 repository/\n        \u251c\u2500\u2500 workflow/\n        \u2514\u2500\u2500 debug.log\n</code></pre></p>"},{"location":"cli/#-debug","title":"--debug","text":"<p>Enable DEBUG level logging for all components.</p> <p>Type: Flag (boolean) Default: <code>false</code> (INFO level)</p> <p>Example: <pre><code>imbi-automations config.toml workflows/test \\\n  --project-id 123 \\\n  --debug\n</code></pre></p> <p>Output: <pre><code>2025-01-03 14:30:52 - imbi_automations.workflow_engine - DEBUG - Executing action: copy-files\n2025-01-03 14:30:52 - imbi_automations.actions.filea - DEBUG - Copying workflow:///template to repository:///config\n2025-01-03 14:30:52 - imbi_automations.utils - DEBUG - Resolved path: /tmp/workflow123/workflow/template\n</code></pre></p> <p>Log Categories: - Action execution details - HTTP requests/responses (API calls) - Git operations - File operations - Template rendering - Condition evaluation</p> <p>See Also: Debugging Documentation</p>"},{"location":"cli/#-v-verbose","title":"-v, --verbose","text":"<p>Show action start/end INFO messages.</p> <p>Type: Flag (boolean) Default: <code>false</code></p> <p>Example: <pre><code>imbi-automations config.toml workflows/update \\\n  --project-id 123 \\\n  --verbose\n</code></pre></p> <p>Output: <pre><code>2025-01-03 14:30:50 - INFO - Starting action: backup-files\n2025-01-03 14:30:52 - INFO - Completed action: backup-files\n2025-01-03 14:30:52 - INFO - Starting action: update-configs\n</code></pre></p> <p>Difference from --debug: - <code>--verbose</code>: Action-level progress (cleaner output) - <code>--debug</code>: Everything (very detailed)</p>"},{"location":"cli/#general-options","title":"General Options","text":""},{"location":"cli/#-h-help","title":"-h, --help","text":"<p>Show help message and exit.</p> <p>Example: <pre><code>imbi-automations --help\n</code></pre></p>"},{"location":"cli/#-v-version","title":"-V, --version","text":"<p>Show version number and exit.</p> <p>Example: <pre><code>imbi-automations --version\n</code></pre></p> <p>Output: <pre><code>0.1.0\n</code></pre></p>"},{"location":"cli/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"cli/#test-on-single-project","title":"Test on Single Project","text":"<p>Test workflow before batch execution:</p> <pre><code>imbi-automations config.toml workflows/new-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug\n</code></pre>"},{"location":"cli/#batch-update-with-debugging","title":"Batch Update with Debugging","text":"<p>Process all projects with error preservation:</p> <pre><code>imbi-automations config.toml workflows/update-deps \\\n  --all-projects \\\n  --max-concurrency 5 \\\n  --preserve-on-error \\\n  --error-dir ./errors \\\n  --verbose\n</code></pre>"},{"location":"cli/#resume-interrupted-run","title":"Resume Interrupted Run","text":"<p>Continue from where you left off:</p> <pre><code>imbi-automations config.toml workflows/large-update \\\n  --all-projects \\\n  --start-from-project 456 \\\n  --max-concurrency 5\n</code></pre>"},{"location":"cli/#github-organization-update","title":"GitHub Organization Update","text":"<p>Update all repos in an organization:</p> <pre><code>imbi-automations config.toml workflows/update-actions \\\n  --github-organization myorg \\\n  --max-concurrency 3 \\\n  --verbose\n</code></pre>"},{"location":"cli/#critical-production-update","title":"Critical Production Update","text":"<p>Ensure all or nothing success:</p> <pre><code>imbi-automations config.toml workflows/security-patch \\\n  --all-projects \\\n  --exit-on-error \\\n  --preserve-on-error \\\n  --verbose\n</code></pre>"},{"location":"cli/#debugging-specific-failure","title":"Debugging Specific Failure","text":"<p>Deep dive into a failing project:</p> <pre><code>imbi-automations config.toml workflows/failing \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --error-dir ./debug \\\n  --debug \\\n  --verbose \\\n  --exit-on-error\n</code></pre>"},{"location":"cli/#project-type-targeted-update","title":"Project Type Targeted Update","text":"<p>Update only APIs:</p> <pre><code>imbi-automations config.toml workflows/update-api-configs \\\n  --project-type api \\\n  --max-concurrency 5 \\\n  --verbose\n</code></pre>"},{"location":"cli/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Success - all workflows completed successfully 1 Configuration error (invalid config, missing workflow) 2 Interrupted (Ctrl+C) 3 Runtime error (unexpected exception) 5 Workflow failure (one or more projects failed) <p>Example Usage in Scripts: <pre><code>#!/bin/bash\nimbi-automations config.toml workflows/update --all-projects\n\nif [ $? -eq 0 ]; then\n    echo \"All projects updated successfully\"\nelif [ $? -eq 5 ]; then\n    echo \"Some projects failed - check logs\"\n    exit 1\nelse\n    echo \"Fatal error - check configuration\"\n    exit 1\nfi\n</code></pre></p>"},{"location":"cli/#environment-variables","title":"Environment Variables","text":"<p>While not CLI switches, these environment variables affect behavior:</p> Variable Purpose Example <code>ANTHROPIC_API_KEY</code> Claude API key <code>sk-ant-api03-...</code> <code>GITHUB_TOKEN</code> GitHub API token (if not in config) <code>ghp_...</code> <code>IMBI_API_KEY</code> Imbi API key (if not in config) <code>uuid-here</code> <p>Example: <pre><code>export ANTHROPIC_API_KEY=\"sk-ant-api03-...\"\nexport GITHUB_TOKEN=\"ghp_...\"\n\nimbi-automations config.toml workflows/ai-workflow --all-projects\n</code></pre></p>"},{"location":"cli/#performance-tips","title":"Performance Tips","text":""},{"location":"cli/#optimize-concurrency","title":"Optimize Concurrency","text":"<p>Start conservative, increase gradually:</p> <pre><code># Test with 1\n--max-concurrency 1\n\n# Increase to 5\n--max-concurrency 5\n\n# Monitor system resources, adjust\n--max-concurrency 10\n</code></pre>"},{"location":"cli/#use-filtering","title":"Use Filtering","text":"<p>Reduce scope with workflow filters in <code>config.toml</code>:</p> <pre><code>[filter]\nproject_types = [\"api\", \"consumer\"]\nrequires_github_identifier = true\n</code></pre>"},{"location":"cli/#batch-smartly","title":"Batch Smartly","text":"<p>Split large runs into chunks:</p> <pre><code># Process 100 at a time\n--all-projects --max-concurrency 5 --start-from-project 0\n# ... after completion\n--all-projects --max-concurrency 5 --start-from-project 100\n</code></pre>"},{"location":"cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/#no-module-named-imbi_automations","title":"\"No module named imbi_automations\"","text":"<p>Problem: CLI not installed or not in PATH</p> <p>Solution: <pre><code>pip install -e .\n# or\npip install imbi-automations\n</code></pre></p>"},{"location":"cli/#workflow-path-is-not-a-directory","title":"\"Workflow path is not a directory\"","text":"<p>Problem: Incorrect workflow path</p> <p>Solution: <pre><code># Correct - path to directory\nimbi-automations config.toml workflows/my-workflow --all-projects\n\n# Incorrect - don't include config.toml\nimbi-automations config.toml workflows/my-workflow/config.toml --all-projects\n</code></pre></p>"},{"location":"cli/#exactly-one-targeting-option-required","title":"\"Exactly one targeting option required\"","text":"<p>Problem: No targeting flag specified</p> <p>Solution: <pre><code># Must include one of:\n--project-id 123\n--project-type api\n--all-projects\n--github-repository org/repo\n# etc.\n</code></pre></p>"},{"location":"cli/#configuration-validation-failed","title":"\"Configuration validation failed\"","text":"<p>Problem: Invalid or missing config values</p> <p>Solution: <pre><code># Validate config separately\npython -c \"from imbi_automations.cli import load_configuration; load_configuration(open('config.toml'))\"\n</code></pre></p>"},{"location":"cli/#advanced-examples","title":"Advanced Examples","text":""},{"location":"cli/#parallel-processing-with-error-handling","title":"Parallel Processing with Error Handling","text":"<pre><code>imbi-automations config.toml workflows/complex-update \\\n  --all-projects \\\n  --max-concurrency 10 \\\n  --preserve-on-error \\\n  --error-dir /var/log/imbi-errors \\\n  --verbose \\\n  2&gt;&amp;1 | tee workflow.log\n</code></pre>"},{"location":"cli/#conditional-batch-processing","title":"Conditional Batch Processing","text":"<pre><code>#!/bin/bash\n# Process projects by type with different concurrency\nfor type in api consumer scheduled-job; do\n    echo \"Processing $type projects...\"\n    imbi-automations config.toml workflows/update \\\n        --project-type $type \\\n        --max-concurrency 5 \\\n        --verbose\ndone\n</code></pre>"},{"location":"cli/#error-analysis-pipeline","title":"Error Analysis Pipeline","text":"<pre><code>#!/bin/bash\n# Run workflow with error preservation\nimbi-automations config.toml workflows/update \\\n    --all-projects \\\n    --preserve-on-error \\\n    --error-dir ./errors\n\n# Analyze errors\necho \"Failed projects:\"\nfind ./errors -name \"debug.log\" -exec grep -l \"ERROR\" {} \\; | \\\n    sed 's|.*/\\(.*\\)-[0-9]*-[0-9]*/debug.log|\\1|'\n\n# Count by error type\necho \"\\nError types:\"\nfind ./errors -name \"debug.log\" -exec grep \"ERROR\" {} \\; | \\\n    cut -d: -f4 | sort | uniq -c\n</code></pre>"},{"location":"cli/#see-also","title":"See Also","text":"<ul> <li>Configuration - Configure API keys and settings</li> <li>Debugging - Detailed debugging guide</li> <li>Actions - Workflow action reference</li> <li>Architecture - System design and components</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>Imbi Automations uses TOML-based configuration files with Pydantic validation for all settings. This document describes all available configuration options.</p>"},{"location":"configuration/#configuration-file-location","title":"Configuration File Location","text":"<p>By default, the CLI expects a <code>config.toml</code> file as the first argument:</p> <pre><code>imbi-automations config.toml workflows/workflow-name --all-projects\n</code></pre>"},{"location":"configuration/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code># Global Settings\nai_commits = false\ncommit_author = \"Imbi Automations &lt;noreply@example.com&gt;\"\nerror_dir = \"./errors\"\npreserve_on_error = false\n\n# Anthropic API Configuration\n[anthropic]\napi_key = \"${ANTHROPIC_API_KEY}\"  # Or set directly\nbedrock = false\nmodel = \"claude-3-5-sonnet-latest\"\n\n# Claude Code SDK Configuration\n[claude_code]\nexecutable = \"claude\"\nenabled = true\n\n# GitHub API Configuration\n[github]\napi_key = \"ghp_your_github_token\"\nhostname = \"github.com\"\n\n# GitLab API Configuration (optional)\n[gitlab]\napi_key = \"glpat_your_gitlab_token\"\nhostname = \"gitlab.com\"\n\n# Imbi Project Management Configuration\n[imbi]\napi_key = \"your-imbi-api-key\"\nhostname = \"imbi.example.com\"\ngithub_identifier = \"github\"\ngitlab_identifier = \"gitlab\"\ngithub_link = \"GitHub Repository\"\ngitlab_link = \"GitLab Project\"\n</code></pre>"},{"location":"configuration/#global-settings","title":"Global Settings","text":""},{"location":"configuration/#ai_commits","title":"ai_commits","text":"<p>Enable AI-powered commit message generation.</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <p>When enabled, uses Anthropic API to generate commit messages based on changes.</p> <pre><code>ai_commits = true\n</code></pre>"},{"location":"configuration/#commit_author","title":"commit_author","text":"<p>Git commit author information for automated commits.</p> <p>Type: <code>string</code> Default: <code>\"Imbi Automations &lt;noreply@aweber.com&gt;\"</code> Format: <code>\"Name &lt;email&gt;\"</code></p> <pre><code>commit_author = \"Bot User &lt;bot@example.com&gt;\"\n</code></pre>"},{"location":"configuration/#error_dir","title":"error_dir","text":"<p>Directory to store error logs and debugging information when workflows fail.</p> <p>Type: <code>path</code> Default: <code>\"./errors\"</code></p> <pre><code>error_dir = \"/var/log/imbi-automations/errors\"\n</code></pre>"},{"location":"configuration/#preserve_on_error","title":"preserve_on_error","text":"<p>Preserve working directories when errors occur for debugging.</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <p>When <code>true</code>, temporary directories are not cleaned up after failures, allowing manual inspection.</p> <pre><code>preserve_on_error = true\n</code></pre>"},{"location":"configuration/#anthropic-configuration","title":"Anthropic Configuration","text":"<p>Configuration for Anthropic Claude API used in Claude actions and AI commit generation.</p>"},{"location":"configuration/#anthropicapi_key","title":"[anthropic].api_key","text":"<p>Anthropic API key for Claude models.</p> <p>Type: <code>string</code> (secret) Default: <code>$ANTHROPIC_API_KEY</code> environment variable Required: For Claude actions or <code>ai_commits = true</code></p> <pre><code>[anthropic]\napi_key = \"sk-ant-api03-...\"\n</code></pre> <p>Or use environment variable: <pre><code>export ANTHROPIC_API_KEY=\"sk-ant-api03-...\"\n</code></pre></p>"},{"location":"configuration/#anthropicbedrock","title":"[anthropic].bedrock","text":"<p>Use AWS Bedrock instead of direct Anthropic API.</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <pre><code>[anthropic]\nbedrock = true\n</code></pre> <p>Note: Requires AWS credentials configured separately.</p>"},{"location":"configuration/#anthropicmodel","title":"[anthropic].model","text":"<p>Claude model to use for API requests.</p> <p>Type: <code>string</code> Default: <code>\"claude-3-5-haiku-latest\"</code></p> <p>Available Models: - <code>claude-3-5-sonnet-latest</code> - Most capable, higher cost - <code>claude-3-5-haiku-latest</code> - Fast and efficient (default) - <code>claude-3-opus-latest</code> - Highest capability, highest cost</p> <pre><code>[anthropic]\nmodel = \"claude-3-5-sonnet-latest\"\n</code></pre>"},{"location":"configuration/#claude-code-configuration","title":"Claude Code Configuration","text":"<p>Configuration for Claude Code SDK integration.</p>"},{"location":"configuration/#claude_codeexecutable","title":"[claude_code].executable","text":"<p>Path or command name for Claude Code executable.</p> <p>Type: <code>string</code> Default: <code>\"claude\"</code></p> <pre><code>[claude_code]\nexecutable = \"/usr/local/bin/claude\"\n</code></pre>"},{"location":"configuration/#claude_codeenabled","title":"[claude_code].enabled","text":"<p>Enable Claude Code actions in workflows.</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <p>Set to <code>false</code> to disable all Claude actions:</p> <pre><code>[claude_code]\nenabled = false\n</code></pre>"},{"location":"configuration/#claude_codebase_prompt","title":"[claude_code].base_prompt","text":"<p>Custom base prompt file for Claude Code sessions.</p> <p>Type: <code>path</code> Default: <code>src/imbi_automations/prompts/claude.md</code></p> <pre><code>[claude_code]\nbase_prompt = \"/path/to/custom-prompt.md\"\n</code></pre>"},{"location":"configuration/#github-configuration","title":"GitHub Configuration","text":"<p>Configuration for GitHub API integration.</p>"},{"location":"configuration/#githubapi_key","title":"[github].api_key","text":"<p>GitHub personal access token or fine-grained token.</p> <p>Type: <code>string</code> (secret) Required: For GitHub workflows</p> <p>Token Permissions Required: - <code>repo</code> - Full repository access - <code>workflow</code> - Update GitHub Actions workflows - <code>admin:org</code> - Manage organization (for environment sync)</p> <pre><code>[github]\napi_key = \"ghp_your_github_personal_access_token\"\n</code></pre>"},{"location":"configuration/#githubhostname","title":"[github].hostname","text":"<p>GitHub hostname for Enterprise installations.</p> <p>Type: <code>string</code> Default: <code>\"github.com\"</code></p> <p>For GitHub Enterprise: <pre><code>[github]\nhostname = \"github.enterprise.com\"\n</code></pre></p>"},{"location":"configuration/#gitlab-configuration","title":"GitLab Configuration","text":"<p>Configuration for GitLab API integration (optional).</p>"},{"location":"configuration/#gitlabapi_key","title":"[gitlab].api_key","text":"<p>GitLab personal access token.</p> <p>Type: <code>string</code> (secret) Required: For GitLab workflows</p> <p>Token Scopes Required: - <code>api</code> - Full API access - <code>read_repository</code> - Read repository files - <code>write_repository</code> - Create/update files</p> <pre><code>[gitlab]\napi_key = \"glpat_your_gitlab_token\"\n</code></pre>"},{"location":"configuration/#gitlabhostname","title":"[gitlab].hostname","text":"<p>GitLab hostname for self-hosted installations.</p> <p>Type: <code>string</code> Default: <code>\"gitlab.com\"</code></p> <p>For self-hosted: <pre><code>[gitlab]\nhostname = \"gitlab.example.com\"\n</code></pre></p>"},{"location":"configuration/#imbi-configuration","title":"Imbi Configuration","text":"<p>Configuration for Imbi project management system integration.</p>"},{"location":"configuration/#imbiapi_key","title":"[imbi].api_key","text":"<p>Imbi API authentication key.</p> <p>Type: <code>string</code> (secret) Required: Always (core functionality)</p> <pre><code>[imbi]\napi_key = \"your-imbi-api-key-uuid\"\n</code></pre>"},{"location":"configuration/#imbihostname","title":"[imbi].hostname","text":"<p>Imbi instance hostname.</p> <p>Type: <code>string</code> Required: Always</p> <pre><code>[imbi]\nhostname = \"imbi.example.com\"\n</code></pre>"},{"location":"configuration/#imbi_identifier","title":"[imbi].*_identifier","text":"<p>Project identifier field names in Imbi for external systems.</p> <p>Type: <code>string</code> Defaults: - <code>github_identifier = \"github\"</code> - <code>gitlab_identifier = \"gitlab\"</code> - <code>pagerduty_identifier = \"pagerduty\"</code> - <code>sonarqube_identifier = \"sonarqube\"</code> - <code>sentry_identifier = \"sentry\"</code></p> <p>These specify which Imbi project identifier fields contain external system references:</p> <pre><code>[imbi]\ngithub_identifier = \"github-id\"\ngitlab_identifier = \"gitlab-id\"\n</code></pre>"},{"location":"configuration/#imbi_link","title":"[imbi].*_link","text":"<p>Link type names in Imbi for external system URLs.</p> <p>Type: <code>string</code> Defaults: - <code>github_link = \"GitHub Repository\"</code> - <code>gitlab_link = \"GitLab Project\"</code> - <code>grafana_link = \"Grafana Dashboard\"</code> - <code>pagerduty_link = \"PagerDuty\"</code> - <code>sentry_link = \"Sentry\"</code> - <code>sonarqube_link = \"SonarQube\"</code></p> <p>These specify the link type names used in Imbi to store external URLs:</p> <pre><code>[imbi]\ngithub_link = \"GitHub Repo\"\ngitlab_link = \"GitLab\"\n</code></pre>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>Several configuration values support environment variable substitution:</p>"},{"location":"configuration/#supported-in-configuration-file","title":"Supported in Configuration File","text":"<pre><code>[github]\napi_key = \"${GITHUB_TOKEN}\"\n\n[anthropic]\napi_key = \"${ANTHROPIC_API_KEY}\"\n\n[imbi]\napi_key = \"${IMBI_API_KEY}\"\n</code></pre>"},{"location":"configuration/#environment-variable-defaults","title":"Environment Variable Defaults","text":"<p>Some fields use environment variables as defaults if not specified:</p> Configuration Field Environment Variable <code>anthropic.api_key</code> <code>ANTHROPIC_API_KEY</code>"},{"location":"configuration/#minimal-configuration","title":"Minimal Configuration","text":"<p>The absolute minimum configuration for basic GitHub workflows:</p> <pre><code>[github]\napi_key = \"ghp_your_token\"\n\n[imbi]\napi_key = \"your-imbi-key\"\nhostname = \"imbi.example.com\"\n</code></pre>"},{"location":"configuration/#configuration-validation","title":"Configuration Validation","text":"<p>Configuration is validated at startup using Pydantic. Common errors:</p>"},{"location":"configuration/#missing-required-fields","title":"Missing Required Fields","text":"<pre><code>ValidationError: 1 validation error for Configuration\ngithub.api_key\n  field required (type=value_error.missing)\n</code></pre> <p>Solution: Add the required field to your config.toml</p>"},{"location":"configuration/#invalid-api-key-format","title":"Invalid API Key Format","text":"<pre><code>ValidationError: 1 validation error for Configuration\ngithub.api_key\n  string does not match regex (type=value_error.str.regex)\n</code></pre> <p>Solution: Check API key format and validity</p>"},{"location":"configuration/#invalid-hostname","title":"Invalid Hostname","text":"<pre><code>ValidationError: 1 validation error for Configuration\nimbi.hostname\n  invalid hostname (type=value_error.url.host)\n</code></pre> <p>Solution: Use valid hostname without protocol (no <code>https://</code>)</p>"},{"location":"configuration/#security-best-practices","title":"Security Best Practices","text":""},{"location":"configuration/#api-key-storage","title":"API Key Storage","text":"<p>DO NOT commit API keys to version control:</p> <pre><code># \u274c BAD - Keys in config file\n[github]\napi_key = \"ghp_actual_key_here\"\n\n# \u2705 GOOD - Environment variables\n[github]\napi_key = \"${GITHUB_TOKEN}\"\n</code></pre>"},{"location":"configuration/#file-permissions","title":"File Permissions","text":"<p>Restrict config file permissions:</p> <pre><code>chmod 600 config.toml\n</code></pre>"},{"location":"configuration/#environment-variables_1","title":"Environment Variables","text":"<p>Set sensitive values via environment:</p> <pre><code>export GITHUB_TOKEN=\"ghp_...\"\nexport ANTHROPIC_API_KEY=\"sk-ant-...\"\nexport IMBI_API_KEY=\"uuid-here\"\n\nimbi-automations config.toml workflows/workflow-name --all-projects\n</code></pre>"},{"location":"configuration/#separate-configurations","title":"Separate Configurations","text":"<p>Use different config files for different environments:</p> <pre><code># Development\nimbi-automations config.dev.toml workflows/test\n\n# Production\nimbi-automations config.prod.toml workflows/deploy\n</code></pre>"},{"location":"configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"configuration/#github-only-workflows","title":"GitHub Only Workflows","text":"<pre><code>commit_author = \"GitHub Bot &lt;bot@example.com&gt;\"\n\n[github]\napi_key = \"${GITHUB_TOKEN}\"\n\n[imbi]\napi_key = \"${IMBI_API_KEY}\"\nhostname = \"imbi.example.com\"\n</code></pre>"},{"location":"configuration/#github-enterprise","title":"GitHub Enterprise","text":"<pre><code>[github]\napi_key = \"${GITHUB_ENTERPRISE_TOKEN}\"\nhostname = \"github.enterprise.com\"\n\n[imbi]\napi_key = \"${IMBI_API_KEY}\"\nhostname = \"imbi.example.com\"\n</code></pre>"},{"location":"configuration/#with-ai-features","title":"With AI Features","text":"<pre><code>ai_commits = true\n\n[anthropic]\napi_key = \"${ANTHROPIC_API_KEY}\"\nmodel = \"claude-3-5-sonnet-latest\"\n\n[claude_code]\nenabled = true\nexecutable = \"claude\"\n\n[github]\napi_key = \"${GITHUB_TOKEN}\"\n\n[imbi]\napi_key = \"${IMBI_API_KEY}\"\nhostname = \"imbi.example.com\"\n</code></pre>"},{"location":"configuration/#multi-platform","title":"Multi-Platform","text":"<pre><code>[github]\napi_key = \"${GITHUB_TOKEN}\"\n\n[gitlab]\napi_key = \"${GITLAB_TOKEN}\"\n\n[imbi]\napi_key = \"${IMBI_API_KEY}\"\nhostname = \"imbi.example.com\"\ngithub_identifier = \"github\"\ngitlab_identifier = \"gitlab\"\n</code></pre>"},{"location":"configuration/#with-debugging","title":"With Debugging","text":"<pre><code>preserve_on_error = true\nerror_dir = \"/tmp/imbi-errors\"\n\n[github]\napi_key = \"${GITHUB_TOKEN}\"\n\n[imbi]\napi_key = \"${IMBI_API_KEY}\"\nhostname = \"imbi.example.com\"\n</code></pre>"},{"location":"configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"configuration/#configuration-not-loading","title":"Configuration Not Loading","text":"<p>Problem: <code>FileNotFoundError: config.toml not found</code></p> <p>Solution: Provide full path to config file: <pre><code>imbi-automations /path/to/config.toml workflows/name --all-projects\n</code></pre></p>"},{"location":"configuration/#authentication-failures","title":"Authentication Failures","text":"<p>Problem: <code>401 Unauthorized</code> errors</p> <p>Solutions: 1. Verify API key is valid and not expired 2. Check API key has required permissions 3. Ensure environment variables are exported 4. Test API access manually with curl</p>"},{"location":"configuration/#invalid-toml-syntax","title":"Invalid TOML Syntax","text":"<p>Problem: <code>toml.decoder.TomlDecodeError</code></p> <p>Solutions: 1. Validate TOML syntax with online validator 2. Check for missing quotes around strings 3. Verify section headers use <code>[section]</code> format 4. Ensure key-value pairs use <code>key = \"value\"</code> format</p>"},{"location":"configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"configuration/#custom-error-directory-structure","title":"Custom Error Directory Structure","text":"<pre><code>error_dir = \"/var/log/imbi-automations/errors\"\n</code></pre> <p>Creates: <pre><code>/var/log/imbi-automations/errors/\n\u2514\u2500\u2500 workflow-name/\n    \u2514\u2500\u2500 project-slug-timestamp/\n        \u251c\u2500\u2500 repository/\n        \u251c\u2500\u2500 workflow/\n        \u2514\u2500\u2500 error.log\n</code></pre></p>"},{"location":"configuration/#custom-commit-author-per-workflow","title":"Custom Commit Author Per Workflow","text":"<p>Set in workflow config.toml instead:</p> <pre><code># workflows/my-workflow/config.toml\ncommit_author = \"Workflow Bot &lt;workflow@example.com&gt;\"\n</code></pre> <p>Overrides global <code>commit_author</code> for that workflow only.</p>"},{"location":"configuration/#see-also","title":"See Also","text":"<ul> <li>Workflow Actions - Complete action configuration reference</li> <li>Architecture - System design and components</li> <li>GitHub Actions - GitHub-specific configuration</li> <li>Claude Actions - AI transformation configuration</li> </ul>"},{"location":"debugging/","title":"Debugging Workflows","text":"<p>Imbi Automations provides comprehensive debugging capabilities to troubleshoot workflow failures, including error preservation, detailed logging, and diagnostic tools.</p>"},{"location":"debugging/#quick-start","title":"Quick Start","text":"<p>To debug a failing workflow, use these flags together:</p> <pre><code>imbi-automations config.toml workflows/failing-workflow \\\n  --all-projects \\\n  --preserve-on-error \\\n  --error-dir ./debug \\\n  --debug \\\n  --verbose\n</code></pre> <p>This will: - <code>--preserve-on-error</code>: Save working directory state on failures - <code>--error-dir ./debug</code>: Store error states in <code>./debug/</code> - <code>--debug</code>: Enable DEBUG level logging (all log messages) - <code>--verbose</code>: Show action start/end messages</p>"},{"location":"debugging/#debugging-flags","title":"Debugging Flags","text":""},{"location":"debugging/#-preserve-on-error","title":"--preserve-on-error","text":"<p>Preserves the complete working directory when a workflow fails, including: - Cloned repository state - Workflow resource files - Extracted Docker files - All intermediate files</p> <p>Usage: <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --all-projects \\\n  --preserve-on-error\n</code></pre></p> <p>Default: <code>false</code> (working directories are cleaned up)</p> <p>When to Use: - Investigating why a workflow failed - Examining repository state at time of failure - Debugging file operations - Analyzing Claude action failures</p>"},{"location":"debugging/#-error-dir","title":"--error-dir","text":"<p>Specifies where to save preserved error states.</p> <p>Usage: <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --all-projects \\\n  --preserve-on-error \\\n  --error-dir /tmp/imbi-errors\n</code></pre></p> <p>Default: <code>./errors</code></p> <p>Directory Structure: <pre><code>errors/\n\u2514\u2500\u2500 workflow-name/\n    \u2514\u2500\u2500 project-slug-timestamp/\n        \u251c\u2500\u2500 repository/          # Cloned Git repository\n        \u251c\u2500\u2500 workflow/            # Workflow resources\n        \u251c\u2500\u2500 extracted/           # Docker extracted files (if any)\n        \u251c\u2500\u2500 debug.log            # Complete DEBUG level logs\n        \u2514\u2500\u2500 other temporary files\n</code></pre></p> <p>Example Paths: <pre><code>errors/\n\u2514\u2500\u2500 python39-project-fix/\n    \u251c\u2500\u2500 api-service-20250103-143052/\n    \u2502   \u251c\u2500\u2500 repository/\n    \u2502   \u251c\u2500\u2500 workflow/\n    \u2502   \u2514\u2500\u2500 debug.log\n    \u2514\u2500\u2500 consumer-app-20250103-143105/\n        \u251c\u2500\u2500 repository/\n        \u251c\u2500\u2500 workflow/\n        \u2514\u2500\u2500 debug.log\n</code></pre></p>"},{"location":"debugging/#-debug","title":"--debug","text":"<p>Enables DEBUG level logging for all components, showing detailed operation traces.</p> <p>Usage: <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --all-projects \\\n  --debug\n</code></pre></p> <p>Default: <code>false</code> (INFO level)</p> <p>What Gets Logged: - All action executions with parameters - HTTP requests/responses - Git operations - File operations - Template rendering - Claude API interactions - Condition evaluations - All internal state changes</p> <p>Example Output: <pre><code>2025-01-03 14:30:52 - imbi_automations.workflow_engine - DEBUG - Executing action: copy-gitignore\n2025-01-03 14:30:52 - imbi_automations.actions.filea - DEBUG - Copying workflow:///.gitignore to repository:///.gitignore\n2025-01-03 14:30:52 - imbi_automations.utils - DEBUG - Resolved path: /tmp/workflow123/workflow/.gitignore\n2025-01-03 14:30:52 - imbi_automations.utils - DEBUG - Resolved path: /tmp/workflow123/repository/.gitignore\n</code></pre></p>"},{"location":"debugging/#-verbose","title":"--verbose","text":"<p>Shows action start/end messages at INFO level without full DEBUG output.</p> <p>Usage: <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --all-projects \\\n  --verbose\n</code></pre></p> <p>Default: <code>false</code></p> <p>What Gets Logged: - Action start messages - Action completion messages - Major workflow milestones - Success/failure summaries</p> <p>Example Output: <pre><code>2025-01-03 14:30:50 - imbi_automations.workflow_engine - INFO - Starting action: backup-files\n2025-01-03 14:30:52 - imbi_automations.workflow_engine - INFO - Completed action: backup-files\n2025-01-03 14:30:52 - imbi_automations.workflow_engine - INFO - Starting action: ai-refactor\n</code></pre></p>"},{"location":"debugging/#-exit-on-error","title":"--exit-on-error","text":"<p>Stop processing immediately when any project fails instead of continuing with remaining projects.</p> <p>Usage: <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --all-projects \\\n  --exit-on-error\n</code></pre></p> <p>Default: <code>false</code> (continue with other projects)</p> <p>When to Use: - Testing workflows on small batches - CI/CD environments - When failures are critical - Debugging specific project issues</p>"},{"location":"debugging/#debuglog-file","title":"debug.log File","text":"<p>When <code>--preserve-on-error</code> is enabled, a <code>debug.log</code> file is automatically created in each error directory containing ALL DEBUG level logs for that specific project execution.</p>"},{"location":"debugging/#contents","title":"Contents","text":"<p>The <code>debug.log</code> file includes: - Complete action execution trace - All HTTP API requests and responses - File operations with full paths - Git commands and output - Template rendering details - Claude/Anthropic API interactions - Error messages and stack traces - Timing information</p>"},{"location":"debugging/#format","title":"Format","text":"<pre><code>2025-01-03 14:30:50,123 - imbi_automations.controller - INFO - Processing my-project (123)\n2025-01-03 14:30:50,456 - imbi_automations.git - DEBUG - Cloning repository: https://github.com/org/repo.git\n2025-01-03 14:30:52,789 - imbi_automations.workflow_engine - DEBUG - Executing action: copy-files\n2025-01-03 14:30:52,890 - imbi_automations.actions.filea - DEBUG - Copying workflow:///templates/ to repository:///config/\n2025-01-03 14:30:53,123 - imbi_automations.actions.filea - ERROR - Failed to copy: Source directory not found\n</code></pre>"},{"location":"debugging/#location","title":"Location","text":"<pre><code># Default location\n./errors/workflow-name/project-slug-timestamp/debug.log\n\n# Custom error-dir\n/tmp/debug/workflow-name/project-slug-timestamp/debug.log\n</code></pre>"},{"location":"debugging/#per-project-isolation","title":"Per-Project Isolation","text":"<p>Each project execution gets its own <code>debug.log</code> file, even when running workflows concurrently with <code>--max-concurrency &gt; 1</code>. This is achieved using Python's <code>contextvars</code> to isolate log captures per async task.</p>"},{"location":"debugging/#error-directory-contents","title":"Error Directory Contents","text":"<p>When a workflow fails and <code>--preserve-on-error</code> is enabled, the error directory contains:</p>"},{"location":"debugging/#repository","title":"repository/","text":"<p>Complete clone of the Git repository at the point of failure: - All files in their current state - <code>.git/</code> directory with full history - Working tree changes (staged and unstaged) - Any files created by workflow actions</p> <p>Use Cases: - Examine file modifications made by actions - Check what Claude Code changed - Review git history and commits - Test fixes locally</p> <pre><code>cd errors/workflow-name/project-slug-timestamp/repository/\ngit log\ngit diff HEAD\ngit status\n</code></pre>"},{"location":"debugging/#workflow","title":"workflow/","text":"<p>Copy of workflow resources: - Template files - Prompt files - Static resources - Any files copied from workflow directory</p> <p>Use Cases: - Verify template content - Check prompt files - Review workflow resources</p>"},{"location":"debugging/#extracted-if-present","title":"extracted/ (if present)","text":"<p>Files extracted from Docker containers by docker actions: - Configuration files - Binary artifacts - Library files</p> <p>Use Cases: - Verify Docker extraction worked - Check extracted file contents - Debug docker action issues</p>"},{"location":"debugging/#debuglog","title":"debug.log","text":"<p>Complete DEBUG level logs (see above section).</p>"},{"location":"debugging/#other-files","title":"Other Files","text":"<p>Any temporary files created during workflow execution: - Action-specific output files - Intermediate processing files - Failure indicator files (e.g., <code>ACTION_FAILED</code>)</p>"},{"location":"debugging/#common-debugging-scenarios","title":"Common Debugging Scenarios","text":""},{"location":"debugging/#debugging-failed-actions","title":"Debugging Failed Actions","text":"<p>Scenario: An action fails and you need to understand why.</p> <p>Steps: 1. Run with error preservation:    <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug\n</code></pre></p> <ol> <li> <p>Check console output for immediate errors</p> </li> <li> <p>Examine the error directory:    <pre><code>cd errors/my-workflow/project-name-*\ncat debug.log | grep ERROR\n</code></pre></p> </li> <li> <p>Review repository state:    <pre><code>cd repository/\ngit status\ngit log -1\n</code></pre></p> </li> <li> <p>Check for failure files:    <pre><code>find . -name \"*FAILED\"\ncat ACTION_FAILED  # If exists\n</code></pre></p> </li> </ol>"},{"location":"debugging/#debugging-claude-actions","title":"Debugging Claude Actions","text":"<p>Scenario: Claude Code action fails or produces unexpected results.</p> <p>Steps: 1. Enable full debugging:    <pre><code>imbi-automations config.toml workflows/claude-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug \\\n  --verbose\n</code></pre></p> <ol> <li> <p>Check <code>debug.log</code> for Claude interactions:    <pre><code>cd errors/claude-workflow/project-*\ngrep -A 10 \"Claude\" debug.log\ngrep -A 5 \"Anthropic\" debug.log\n</code></pre></p> </li> <li> <p>Review the prompt sent to Claude:    <pre><code>grep -B 5 -A 20 \"Execute agent prompt\" debug.log\n</code></pre></p> </li> <li> <p>Check for failure files:    <pre><code>ls repository/*FAILED\ncat repository/ACTION_FAILED\n</code></pre></p> </li> <li> <p>Examine repository changes:    <pre><code>cd repository/\ngit diff\n</code></pre></p> </li> </ol>"},{"location":"debugging/#debugging-file-actions","title":"Debugging File Actions","text":"<p>Scenario: File copy/move operations aren't working as expected.</p> <p>Steps: 1. Run with verbose debugging:    <pre><code>imbi-automations config.toml workflows/file-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug\n</code></pre></p> <ol> <li> <p>Check resolved paths in <code>debug.log</code>:    <pre><code>grep \"Resolved path\" debug.log\ngrep \"Copying\\|Moving\\|Writing\" debug.log\n</code></pre></p> </li> <li> <p>Verify file existence:    <pre><code>cd errors/file-workflow/project-*/\nls -laR repository/\nls -laR workflow/\n</code></pre></p> </li> <li> <p>Check for permission or path errors:    <pre><code>grep \"Permission denied\\|No such file\" debug.log\n</code></pre></p> </li> </ol>"},{"location":"debugging/#debugging-template-actions","title":"Debugging Template Actions","text":"<p>Scenario: Templates aren't rendering correctly or variables are undefined.</p> <p>Steps: 1. Enable debugging:    <pre><code>imbi-automations config.toml workflows/template-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug\n</code></pre></p> <ol> <li> <p>Check template rendering in logs:    <pre><code>grep \"Template\\|Jinja2\" debug.log\n</code></pre></p> </li> <li> <p>Examine rendered output:    <pre><code>cd errors/template-workflow/project-*/repository/\ncat rendered-file.yaml\n</code></pre></p> </li> <li> <p>Review workflow template files:    <pre><code>cd ../workflow/\ncat template-file.j2\n</code></pre></p> </li> <li> <p>Check for undefined variable errors:    <pre><code>grep \"undefined\\|UndefinedError\" debug.log\n</code></pre></p> </li> </ol>"},{"location":"debugging/#debugging-shell-actions","title":"Debugging Shell Actions","text":"<p>Scenario: Shell commands fail or produce unexpected output.</p> <p>Steps: 1. Enable debugging:    <pre><code>imbi-automations config.toml workflows/shell-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug\n</code></pre></p> <ol> <li> <p>Check command execution in logs:    <pre><code>grep \"Executing shell command\\|Command stdout\\|Command stderr\" debug.log\n</code></pre></p> </li> <li> <p>Re-run command manually:    <pre><code>cd errors/shell-workflow/project-*/repository/\n# Copy command from debug.log and run it\npytest tests/ -v\n</code></pre></p> </li> <li> <p>Check exit codes:    <pre><code>grep \"exit code\" debug.log\n</code></pre></p> </li> </ol>"},{"location":"debugging/#debugging-concurrent-execution","title":"Debugging Concurrent Execution","text":"<p>Scenario: Running with <code>--max-concurrency &gt; 1</code> and need to debug specific project.</p> <p>Steps: 1. First, identify the failing project in normal execution 2. Re-run with just that project:    <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug \\\n  --exit-on-error\n</code></pre></p> <ol> <li>Each project gets isolated <code>debug.log</code> even in concurrent mode</li> <li>Check error directory for all failed projects:    <pre><code>ls -ltr errors/my-workflow/\n</code></pre></li> </ol>"},{"location":"debugging/#configuration-file-debugging","title":"Configuration File Debugging","text":"<p>You can also set error preservation in <code>config.toml</code>:</p> <pre><code>preserve_on_error = true\nerror_dir = \"/var/log/imbi-errors\"\n</code></pre> <p>Note: CLI flags override config file settings.</p>"},{"location":"debugging/#log-levels","title":"Log Levels","text":"<p>Imbi Automations uses Python's standard logging levels:</p> Level Description When to Use DEBUG All operations and internal state Debugging failures INFO Major milestones and progress Normal operation WARNING Recoverable issues Monitoring ERROR Action failures Alert on issues CRITICAL Fatal errors System failures <p>Set via CLI: <pre><code># DEBUG level\n--debug\n\n# INFO level (default)\n# No flag needed\n\n# INFO level with action details\n--verbose\n</code></pre></p>"},{"location":"debugging/#performance-impact","title":"Performance Impact","text":""},{"location":"debugging/#-preserve-on-error_1","title":"--preserve-on-error","text":"<p>Impact: Minimal during execution, significant on failure - No overhead during successful workflows - On failure: Copies entire working directory (can be large) - Storage: Requires disk space for preserved directories</p> <p>Recommendation: Enable for debugging, disable for production batch processing</p>"},{"location":"debugging/#-debug_1","title":"--debug","text":"<p>Impact: Moderate logging overhead - Increases log volume significantly - Slightly slower due to additional logging calls - Memory impact from buffering logs</p> <p>Recommendation: Use for troubleshooting specific issues, not for large batch runs</p>"},{"location":"debugging/#-verbose_1","title":"--verbose","text":"<p>Impact: Minimal - Only logs action start/end messages - Negligible performance impact</p> <p>Recommendation: Safe to use in production</p>"},{"location":"debugging/#cleaning-up-error-directories","title":"Cleaning Up Error Directories","text":"<p>Error directories accumulate over time. Clean them periodically:</p> <pre><code># Remove all error directories\nrm -rf errors/\n\n# Remove errors older than 7 days\nfind errors/ -type d -mtime +7 -exec rm -rf {} +\n\n# Remove errors for specific workflow\nrm -rf errors/workflow-name/\n\n# Keep only latest N errors per workflow\ncd errors/workflow-name/\nls -t | tail -n +6 | xargs rm -rf\n</code></pre>"},{"location":"debugging/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Start Small: Debug single projects before batch runs    <pre><code>--project-id 123 --preserve-on-error --debug\n</code></pre></p> </li> <li> <p>Isolate Issues: Use <code>--exit-on-error</code> when debugging    <pre><code>--all-projects --exit-on-error --preserve-on-error\n</code></pre></p> </li> <li> <p>Review Logs First: Check <code>debug.log</code> before examining files    <pre><code>grep ERROR errors/workflow/project/debug.log\n</code></pre></p> </li> <li> <p>Clean Up Regularly: Remove old error directories    <pre><code>find errors/ -mtime +7 -delete\n</code></pre></p> </li> <li> <p>Use Specific Targeting: Debug exact failing project    <pre><code>--project-id 123  # Instead of --all-projects\n</code></pre></p> </li> <li> <p>Disable in Production: Don't preserve errors for large batch runs    <pre><code># Production: no preserve-on-error\nimbi-automations config.toml workflows/prod --all-projects\n</code></pre></p> </li> <li> <p>Combine Flags Effectively:    <pre><code># Maximum debugging\n--preserve-on-error --debug --verbose --exit-on-error\n\n# Light debugging\n--verbose\n\n# Specific issue\n--project-id 123 --preserve-on-error --debug\n</code></pre></p> </li> </ol>"},{"location":"debugging/#troubleshooting-the-debugger","title":"Troubleshooting the Debugger","text":""},{"location":"debugging/#error-directories-not-created","title":"Error Directories Not Created","text":"<p>Problem: <code>--preserve-on-error</code> set but no directories in <code>errors/</code></p> <p>Causes: - Workflow succeeded (no errors to preserve) - Insufficient permissions to create directories - Disk space full</p> <p>Solution: <pre><code># Check permissions\nls -ld errors/\nmkdir -p errors/test\n\n# Check disk space\ndf -h .\n\n# Try explicit error-dir\n--error-dir /tmp/imbi-errors\n</code></pre></p>"},{"location":"debugging/#debuglog-missing-or-empty","title":"debug.log Missing or Empty","text":"<p>Problem: Error directory created but <code>debug.log</code> missing</p> <p>Causes: - Failure occurred before logging started - Logging not properly initialized - Concurrent execution issue</p> <p>Solution: <pre><code># Run single-threaded\n--max-concurrency 1\n\n# Ensure debug logging\n--debug --preserve-on-error\n</code></pre></p>"},{"location":"debugging/#too-much-log-output","title":"Too Much Log Output","text":"<p>Problem: <code>--debug</code> generates too much output</p> <p>Solution: <pre><code># Use --verbose instead for less output\n--verbose\n\n# Or filter debug output\n--debug 2&gt;&amp;1 | grep -v \"anthropic\\|httpx\\|httpcore\"\n</code></pre></p>"},{"location":"debugging/#see-also","title":"See Also","text":"<ul> <li>Configuration - Configure error directories in config.toml</li> <li>Architecture - Understanding workflow execution</li> <li>Actions - Action-specific debugging tips</li> </ul>"},{"location":"workflows/","title":"Workflow Configuration","text":"<p>Workflows define automated processes to execute across projects. Each workflow is a directory containing a <code>config.toml</code> file that specifies actions, conditions, filters, and behavior.</p>"},{"location":"workflows/#workflow-structure","title":"Workflow Structure","text":"<pre><code>workflows/workflow-name/\n\u251c\u2500\u2500 config.toml          # Required - workflow configuration\n\u251c\u2500\u2500 prompts/             # Optional - Claude prompt templates\n\u2502   \u251c\u2500\u2500 task.md.j2\n\u2502   \u2514\u2500\u2500 validator.md.j2\n\u251c\u2500\u2500 templates/           # Optional - Jinja2 templates\n\u2502   \u251c\u2500\u2500 config.yaml.j2\n\u2502   \u2514\u2500\u2500 README.md.j2\n\u2514\u2500\u2500 files/               # Optional - static resources\n    \u251c\u2500\u2500 .gitignore\n    \u2514\u2500\u2500 .pre-commit-config.yaml\n</code></pre>"},{"location":"workflows/#minimal-configuration","title":"Minimal Configuration","text":"<p>The simplest workflow requires only a name and actions:</p> <pre><code>name = \"update-gitignore\"\n\n[[actions]]\nname = \"copy-gitignore\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///.gitignore\"\ndestination = \"repository:///.gitignore\"\n</code></pre>"},{"location":"workflows/#complete-configuration","title":"Complete Configuration","text":"<pre><code># Workflow Metadata\nname = \"update-python-version\"\ndescription = \"Update Python version to 3.12 across all projects\"\nprompt = \"workflow:///prompts/base-prompt.md\"\n\n# Project Filtering\n[filter]\nproject_ids = [123, 456]\nproject_types = [\"api\", \"consumer\"]\nproject_facts = {\"Programming Language\" = \"Python 3.11\"}\ngithub_identifier_required = true\ngithub_workflow_status_exclude = [\"success\"]\n\n# Git Configuration\n[git]\nclone = true\ncommit = true\ncommit_message = \"Update Python to 3.12\"\n\n# GitHub Configuration\n[github]\ncreate_pull_request = true\nreplace_branch = true\n\n# GitLab Configuration\n[gitlab]\ncreate_merge_request = true\nreplace_branch = false\n\n# Workflow-Level Conditions\ncondition_type = \"all\"  # or \"any\"\n\n[[conditions]]\nremote_file_exists = \"pyproject.toml\"\n\n[[conditions]]\nremote_file_contains = \"python.*3\\\\.11\"\nremote_file = \"pyproject.toml\"\n\n# Actions\n[[actions]]\nname = \"update-configs\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/update.md\"\n</code></pre>"},{"location":"workflows/#workflow-metadata","title":"Workflow Metadata","text":""},{"location":"workflows/#name-required","title":"name (required)","text":"<p>Workflow display name shown in logs and reports.</p> <p>Type: <code>string</code></p> <pre><code>name = \"Update Python Dependencies\"\n</code></pre>"},{"location":"workflows/#description-optional","title":"description (optional)","text":"<p>Human-readable description of workflow purpose.</p> <p>Type: <code>string</code></p> <pre><code>description = \"Updates Python dependencies to latest compatible versions\"\n</code></pre>"},{"location":"workflows/#prompt-optional","title":"prompt (optional)","text":"<p>Custom prompt file for Claude Code actions.</p> <p>Type: <code>ResourceUrl</code> (path to prompt file)</p> <pre><code>prompt = \"workflow:///prompts/base-prompt.md\"\n</code></pre>"},{"location":"workflows/#project-filtering","title":"Project Filtering","text":"<p>The <code>[filter]</code> section pre-filters projects before workflow execution.</p>"},{"location":"workflows/#project_ids","title":"project_ids","text":"<p>Target specific projects by Imbi project ID.</p> <p>Type: <code>list[int]</code></p> <pre><code>[filter]\nproject_ids = [123, 456, 789]\n</code></pre>"},{"location":"workflows/#project_types","title":"project_types","text":"<p>Filter by project type slugs.</p> <p>Type: <code>list[string]</code></p> <pre><code>[filter]\nproject_types = [\"api\", \"consumer\", \"scheduled-job\"]\n</code></pre>"},{"location":"workflows/#project_facts","title":"project_facts","text":"<p>Filter by exact fact value matches.</p> <p>Type: <code>dict[string, string]</code></p> <pre><code>[filter]\nproject_facts = {\n    \"Programming Language\" = \"Python 3.12\",\n    \"Framework\" = \"FastAPI\"\n}\n</code></pre> <p>Note: All fact filters must match (AND logic).</p>"},{"location":"workflows/#github_identifier_required","title":"github_identifier_required","text":"<p>Require projects to have GitHub identifier.</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <pre><code>[filter]\ngithub_identifier_required = true\n</code></pre>"},{"location":"workflows/#github_workflow_status_exclude","title":"github_workflow_status_exclude","text":"<p>Exclude projects with specific GitHub Actions workflow statuses.</p> <p>Type: <code>list[string]</code> Values: <code>\"success\"</code>, <code>\"failure\"</code>, <code>\"pending\"</code>, <code>\"skipped\"</code></p> <pre><code>[filter]\ngithub_workflow_status_exclude = [\"success\"]  # Only process failing/missing workflows\n</code></pre> <p>Use Case: Target only projects with failing builds.</p>"},{"location":"workflows/#git-configuration","title":"Git Configuration","text":"<p>The <code>[git]</code> section controls repository cloning and committing behavior.</p>"},{"location":"workflows/#clone","title":"clone","text":"<p>Whether to clone the repository.</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <pre><code>[git]\nclone = true\n</code></pre> <p>Note: Most workflows require cloning. Set to <code>false</code> only for API-only workflows.</p>"},{"location":"workflows/#commit","title":"commit","text":"<p>Whether to create Git commits after actions.</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <pre><code>[git]\ncommit = true\n</code></pre>"},{"location":"workflows/#commit_message","title":"commit_message","text":"<p>Default commit message for workflow changes.</p> <p>Type: <code>string</code> Default: Workflow name</p> <pre><code>[git]\ncommit_message = \"Update Python version to 3.12\"\n</code></pre> <p>Note: Individual actions can override with <code>ai_commit = true</code> for AI-generated messages.</p>"},{"location":"workflows/#github-configuration","title":"GitHub Configuration","text":"<p>The <code>[github]</code> section controls GitHub integration.</p>"},{"location":"workflows/#create_pull_request","title":"create_pull_request","text":"<p>Create GitHub pull request after committing changes.</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <pre><code>[github]\ncreate_pull_request = true\n</code></pre>"},{"location":"workflows/#replace_branch","title":"replace_branch","text":"<p>Delete remote branch if it exists before creating new one.</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <pre><code>[github]\ncreate_pull_request = true\nreplace_branch = true  # Force-replace existing PR branch\n</code></pre> <p>Note: <code>replace_branch</code> requires <code>create_pull_request = true</code>.</p>"},{"location":"workflows/#gitlab-configuration","title":"GitLab Configuration","text":"<p>The <code>[gitlab]</code> section controls GitLab integration.</p>"},{"location":"workflows/#create_merge_request","title":"create_merge_request","text":"<p>Create GitLab merge request after committing changes.</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <pre><code>[gitlab]\ncreate_merge_request = true\n</code></pre>"},{"location":"workflows/#replace_branch_1","title":"replace_branch","text":"<p>Delete remote branch if it exists before creating new one.</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <pre><code>[gitlab]\ncreate_merge_request = true\nreplace_branch = false\n</code></pre>"},{"location":"workflows/#workflow-conditions","title":"Workflow Conditions","text":"<p>Workflow-level conditions determine if the entire workflow should execute.</p>"},{"location":"workflows/#condition_type","title":"condition_type","text":"<p>How to evaluate multiple conditions.</p> <p>Type: <code>string</code> Values: <code>\"all\"</code> (AND), <code>\"any\"</code> (OR) Default: <code>\"all\"</code></p> <pre><code>condition_type = \"all\"  # All conditions must pass\n\n[[conditions]]\nremote_file_exists = \"package.json\"\n\n[[conditions]]\nremote_file_contains = \"node.*18\"\nremote_file = \".nvmrc\"\n</code></pre> <p>With <code>condition_type = \"all\"</code>, workflow executes only if BOTH conditions pass.</p> <pre><code>condition_type = \"any\"  # Any condition passing is sufficient\n\n[[conditions]]\nremote_file_exists = \"requirements.txt\"\n\n[[conditions]]\nremote_file_exists = \"pyproject.toml\"\n</code></pre> <p>With <code>condition_type = \"any\"</code>, workflow executes if EITHER file exists.</p>"},{"location":"workflows/#local-conditions","title":"Local Conditions","text":"<p>Evaluated after cloning repository (have full filesystem access).</p>"},{"location":"workflows/#file_exists","title":"file_exists","text":"<p>Check if file or directory exists.</p> <p>Type: <code>ResourceUrl</code> (path) Supports: Glob patterns (<code>*.py</code>, <code>**/*.yaml</code>)</p> <pre><code>[[conditions]]\nfile_exists = \"Dockerfile\"\n\n[[conditions]]\nfile_exists = \"**/*.tf\"  # Any Terraform file recursively\n</code></pre>"},{"location":"workflows/#file_not_exists","title":"file_not_exists","text":"<p>Check if file or directory does NOT exist.</p> <p>Type: <code>ResourceUrl</code> (path) Supports: Glob patterns</p> <pre><code>[[conditions]]\nfile_not_exists = \".travis.yml\"  # No legacy CI\n\n[[conditions]]\nfile_not_exists = \"*.pyc\"  # No compiled Python\n</code></pre>"},{"location":"workflows/#file_contains-file","title":"file_contains / file","text":"<p>Check if file contains specific text or regex pattern.</p> <p>Type: <code>string</code> (pattern) Requires: <code>file</code> field with target file path</p> <pre><code>[[conditions]]\nfile_contains = \"python.*3\\\\.12\"\nfile = \"pyproject.toml\"\n\n[[conditions]]\nfile_contains = \"FROM python:3\"\nfile = \"Dockerfile\"\n</code></pre> <p>Pattern Matching: - String search first (fast) - Falls back to regex if string not found - Use regex escaping: <code>\\\\.</code> for literal <code>.</code>, <code>\\\\d</code> for digits</p>"},{"location":"workflows/#file_doesnt_contain-file","title":"file_doesnt_contain / file","text":"<p>Check if file does NOT contain pattern.</p> <pre><code>[[conditions]]\nfile_doesnt_contain = \"python.*3\\\\.9\"\nfile = \"pyproject.toml\"\n</code></pre>"},{"location":"workflows/#remote-conditions","title":"Remote Conditions","text":"<p>Evaluated via API before cloning (faster, more efficient).</p>"},{"location":"workflows/#remote_file_exists","title":"remote_file_exists","text":"<p>Check if file exists via API.</p> <p>Type: <code>string</code> (path) Supports: Glob patterns via Git Trees API</p> <pre><code>[[conditions]]\nremote_file_exists = \"package.json\"\n\n[[conditions]]\nremote_file_exists = \"**/*.tf\"  # Any Terraform file\n</code></pre> <p>Performance: Much faster than cloning for simple checks.</p>"},{"location":"workflows/#remote_file_not_exists","title":"remote_file_not_exists","text":"<p>Check if file does NOT exist via API.</p> <pre><code>[[conditions]]\nremote_file_not_exists = \".travis.yml\"\n</code></pre>"},{"location":"workflows/#remote_file_contains-remote_file","title":"remote_file_contains / remote_file","text":"<p>Check if remote file contains pattern.</p> <p>Type: <code>string</code> (pattern) Requires: <code>remote_file</code> field</p> <pre><code>[[conditions]]\nremote_file_contains = \"\\\"node\\\":.*\\\"18\"\nremote_file = \"package.json\"\n\n[[conditions]]\nremote_file_contains = \"FROM python:[3-4]\"\nremote_file = \"Dockerfile\"\n</code></pre>"},{"location":"workflows/#remote_file_doesnt_contain-remote_file","title":"remote_file_doesnt_contain / remote_file","text":"<p>Check if remote file does NOT contain pattern.</p> <pre><code>[[conditions]]\nremote_file_doesnt_contain = \"python.*2\\\\.\"\nremote_file = \"setup.py\"\n</code></pre>"},{"location":"workflows/#remote_client","title":"remote_client","text":"<p>Which API client to use for remote checks.</p> <p>Type: <code>string</code> Values: <code>\"github\"</code> (default), <code>\"gitlab\"</code></p> <pre><code>[[conditions]]\nremote_client = \"gitlab\"\nremote_file_exists = \".gitlab-ci.yml\"\n</code></pre>"},{"location":"workflows/#condition-examples","title":"Condition Examples","text":"<p>Check for Python project: <pre><code>condition_type = \"any\"\n\n[[conditions]]\nremote_file_exists = \"pyproject.toml\"\n\n[[conditions]]\nremote_file_exists = \"requirements.txt\"\n\n[[conditions]]\nremote_file_exists = \"setup.py\"\n</code></pre></p> <p>Require Docker with Python 3.12: <pre><code>condition_type = \"all\"\n\n[[conditions]]\nremote_file_exists = \"Dockerfile\"\n\n[[conditions]]\nremote_file_contains = \"FROM python:3\\\\.12\"\nremote_file = \"Dockerfile\"\n</code></pre></p> <p>Exclude legacy projects: <pre><code>[[conditions]]\nremote_file_not_exists = \".travis.yml\"\n\n[[conditions]]\nremote_file_not_exists = \"circle.yml\"\n</code></pre></p>"},{"location":"workflows/#actions","title":"Actions","text":"<p>Actions define the operations to perform. Each action has: - Common fields (all action types) - Type-specific fields (documented in Actions)</p>"},{"location":"workflows/#common-action-fields","title":"Common Action Fields","text":""},{"location":"workflows/#name-required_1","title":"name (required)","text":"<p>Action identifier for logging and error messages.</p> <p>Type: <code>string</code></p> <pre><code>[[actions]]\nname = \"copy-gitignore\"\n</code></pre>"},{"location":"workflows/#type-required","title":"type (required)","text":"<p>Action type determines which fields are available.</p> <p>Type: <code>string</code> Values: <code>callable</code>, <code>claude</code>, <code>docker</code>, <code>file</code>, <code>git</code>, <code>github</code>, <code>shell</code>, <code>template</code>, <code>utility</code></p> <pre><code>[[actions]]\ntype = \"file\"\n</code></pre>"},{"location":"workflows/#ai_commit-optional","title":"ai_commit (optional)","text":"<p>Use AI to generate commit message for this action's changes.</p> <p>Type: <code>boolean</code> Default: <code>false</code> Requires: Anthropic API key configured</p> <pre><code>[[actions]]\nname = \"complex-refactor\"\ntype = \"claude\"\nai_commit = true  # AI-generated commit message\n</code></pre>"},{"location":"workflows/#committable-optional","title":"committable (optional)","text":"<p>Whether this action's changes should be committed.</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <pre><code>[[actions]]\nname = \"temporary-file\"\ntype = \"file\"\ncommittable = false  # Don't include in git commit\n</code></pre> <p>Use Cases: - Temporary files for other actions - Diagnostic output - Intermediate processing</p>"},{"location":"workflows/#on_failure-optional","title":"on_failure (optional)","text":"<p>Action name to restart from if this action fails.</p> <p>Type: <code>string</code> (action name) Max Retries: 3 per action</p> <pre><code>[[actions]]\nname = \"backup-files\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///src/\"\ndestination = \"repository:///src.backup/\"\n\n[[actions]]\nname = \"risky-operation\"\ntype = \"claude\"\non_failure = \"restore-backup\"\n\n[[actions]]\nname = \"restore-backup\"\ntype = \"file\"\ncommand = \"move\"\nsource = \"repository:///src.backup/\"\ndestination = \"repository:///src/\"\n</code></pre>"},{"location":"workflows/#action-level-conditions","title":"Action-Level Conditions","text":"<p>Actions can have their own conditions, evaluated before execution.</p> <pre><code>[[actions]]\nname = \"update-dockerfile\"\ntype = \"file\"\ncondition_type = \"all\"\ncommittable = true\n\n# Action-level conditions\n[[actions.conditions]]\nfile_exists = \"Dockerfile\"\n\n[[actions.conditions]]\nfile_contains = \"FROM python:3\\\\.11\"\nfile = \"Dockerfile\"\n\n# Action-specific fields\ncommand = \"write\"\npath = \"repository:///Dockerfile\"\ncontent = \"FROM python:3.12\"\n</code></pre> <p>Behavior: - Workflow conditions evaluated once (before clone) - Action conditions evaluated before each action - If action conditions fail, action is skipped (not a failure)</p>"},{"location":"workflows/#action-condition-type","title":"Action Condition Type","text":"<p>Each action can specify how to evaluate its conditions.</p> <pre><code>[[actions]]\nname = \"update-python-files\"\ntype = \"template\"\ncondition_type = \"any\"  # Any ONE condition passing is sufficient\n\n[[actions.conditions]]\nfile_exists = \"setup.py\"\n\n[[actions.conditions]]\nfile_exists = \"pyproject.toml\"\n\n[[actions.conditions]]\nfile_exists = \"requirements.txt\"\n\n# Execute template action if ANY Python config file exists\nsource_path = \"workflow:///python-config.j2\"\ndestination_path = \"repository:///config.yaml\"\n</code></pre>"},{"location":"workflows/#complete-examples","title":"Complete Examples","text":""},{"location":"workflows/#simple-file-copy-workflow","title":"Simple File Copy Workflow","text":"<pre><code>name = \"Update .gitignore\"\ndescription = \"Deploy standard .gitignore to all projects\"\n\n[git]\ncommit_message = \"Update .gitignore from template\"\n\n[github]\ncreate_pull_request = true\n\n[[conditions]]\nremote_file_exists = \".git\"  # Must be git repo\n\n[[actions]]\nname = \"copy-gitignore\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///.gitignore\"\ndestination = \"repository:///.gitignore\"\n</code></pre>"},{"location":"workflows/#ai-powered-migration-workflow","title":"AI-Powered Migration Workflow","text":"<pre><code>name = \"Migrate to Pydantic V2\"\ndescription = \"AI-powered migration from Pydantic v1 to v2\"\n\n[filter]\nproject_types = [\"api\", \"consumer\"]\nproject_facts = {\"Programming Language\" = \"Python 3.12\"}\n\n[git]\ncommit_message = \"Migrate to Pydantic v2\"\n\n[github]\ncreate_pull_request = true\nreplace_branch = true\n\ncondition_type = \"all\"\n\n[[conditions]]\nremote_file_exists = \"pyproject.toml\"\n\n[[conditions]]\nremote_file_contains = \"pydantic\"\nremote_file = \"pyproject.toml\"\n\n[[actions]]\nname = \"backup-code\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///src/\"\ndestination = \"repository:///src.backup/\"\ncommittable = false  # Don't commit backup\n\n[[actions]]\nname = \"migrate-pydantic\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/pydantic-v2.md\"\nmax_cycles = 5\non_failure = \"restore-backup\"\nai_commit = true  # AI-generated commit message\n\n[[actions]]\nname = \"run-tests\"\ntype = \"shell\"\ncommand = \"pytest tests/ -v\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"restore-backup\"\ntype = \"file\"\ncommand = \"move\"\nsource = \"repository:///src.backup/\"\ndestination = \"repository:///src/\"\n</code></pre>"},{"location":"workflows/#multi-stage-template-workflow","title":"Multi-Stage Template Workflow","text":"<pre><code>name = \"Generate Project Configs\"\ndescription = \"Generate configuration files from templates\"\n\n[filter]\nproject_types = [\"api\"]\ngithub_identifier_required = true\n\ncondition_type = \"any\"\n\n[[conditions]]\nremote_file_not_exists = \"config/app.yaml\"\n\n[[conditions]]\nremote_file_not_exists = \"config/database.yaml\"\n\n[[actions]]\nname = \"render-configs\"\ntype = \"template\"\nsource_path = \"workflow:///templates/\"\ndestination_path = \"repository:///config/\"\n\n[[actions]]\nname = \"validate-configs\"\ntype = \"shell\"\ncommand = \"yamllint config/\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"update-readme\"\ntype = \"template\"\nsource_path = \"workflow:///README.md.j2\"\ndestination_path = \"repository:///README.md\"\n\n# Only update README if it exists\n[[actions.conditions]]\nfile_exists = \"repository:///README.md\"\n</code></pre>"},{"location":"workflows/#conditional-docker-update","title":"Conditional Docker Update","text":"<pre><code>name = \"Update Docker Base Image\"\n\n[git]\ncommit_message = \"Update Python Docker base image to 3.12\"\n\n[github]\ncreate_pull_request = true\n\n[[conditions]]\nremote_file_exists = \"Dockerfile\"\n\n[[conditions]]\nremote_file_contains = \"FROM python:[23]\\\\.\"\nremote_file = \"Dockerfile\"\n\n[[actions]]\nname = \"update-dockerfile\"\ntype = \"file\"\ncommand = \"write\"\npath = \"repository:///Dockerfile\"\n\n# Only execute if current image is old\n[[actions.conditions]]\nfile_contains = \"FROM python:(2\\\\.|3\\\\.[0-9]|3\\\\.1[01])\"\nfile = \"Dockerfile\"\n\ncontent = \"\"\"\nFROM python:3.12-slim\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\nCOPY . .\nCMD [\"python\", \"app.py\"]\n\"\"\"\n\n[[actions]]\nname = \"update-compose\"\ntype = \"file\"\ncommand = \"write\"\npath = \"repository:///docker-compose.yml\"\n\n# Only if docker-compose exists\n[[actions.conditions]]\nfile_exists = \"docker-compose.yml\"\n\ncontent = \"\"\"\nversion: '3.8'\nservices:\n  app:\n    build: .\n    image: myapp:latest\n\"\"\"\n</code></pre>"},{"location":"workflows/#best-practices","title":"Best Practices","text":""},{"location":"workflows/#use-remote-conditions","title":"Use Remote Conditions","text":"<p>Remote conditions are faster and avoid unnecessary cloning:</p> <pre><code># \u2705 Good - check remotely first\n[[conditions]]\nremote_file_exists = \"package.json\"\n\n[[conditions]]\nremote_file_contains = \"node.*18\"\nremote_file = \"package.json\"\n\n# \u274c Slower - clones every repo\n[[conditions]]\nfile_exists = \"package.json\"\n</code></pre>"},{"location":"workflows/#filter-early","title":"Filter Early","text":"<p>Use workflow filters to reduce processing scope:</p> <pre><code># \u2705 Good - filter at workflow level\n[filter]\nproject_types = [\"api\"]\nproject_facts = {\"Programming Language\" = \"Python 3.12\"}\n\n# \u274c Less efficient - processes all, filters per-action\n[[actions.conditions]]\n# checking project type in every action\n</code></pre>"},{"location":"workflows/#action-level-conditions-for-variation","title":"Action-Level Conditions for Variation","text":"<p>Use action conditions when behavior varies per project:</p> <pre><code>[[actions]]\nname = \"update-setup-py\"\n# Only runs if setup.py exists\n[[actions.conditions]]\nfile_exists = \"setup.py\"\n\n[[actions]]\nname = \"update-pyproject\"\n# Only runs if pyproject.toml exists\n[[actions.conditions]]\nfile_exists = \"pyproject.toml\"\n</code></pre>"},{"location":"workflows/#idempotent-workflows","title":"Idempotent Workflows","text":"<p>Design workflows to be safely re-runnable:</p> <pre><code># Check current state before modifying\n[[actions.conditions]]\nfile_not_exists = \"config/app.yaml\"  # Only create if missing\n</code></pre>"},{"location":"workflows/#see-also","title":"See Also","text":"<ul> <li>Actions Reference - Detailed action type documentation</li> <li>CLI Reference - Command-line options</li> <li>Configuration - Global configuration options</li> <li>Debugging - Troubleshooting workflows</li> </ul>"},{"location":"actions/","title":"Workflow Actions","text":"<p>Workflow actions are the core building blocks of automation in Imbi Automations. Each action type provides specific capabilities for interacting with repositories, external services, and project files.</p>"},{"location":"actions/#action-types-overview","title":"Action Types Overview","text":"Action Type Purpose Use Cases Callable Direct API method calls GitHub/GitLab operations, Imbi updates Claude AI-powered transformations Complex code changes, intelligent analysis Docker Container operations Extract files from images, build images File File manipulation Copy, move, delete, append, write files Git Version control operations Extract commits, branch management GitHub GitHub-specific operations Environment sync, workflow management Shell Command execution Run tests, build processes, scripts Template Jinja2 file generation Generate configs, documentation Utility Helper operations Logging, state management"},{"location":"actions/#resourceurl-path-system","title":"ResourceUrl Path System","text":"<p>All file and resource paths in actions use the <code>ResourceUrl</code> type, which supports multiple schemes for flexible file addressing:</p>"},{"location":"actions/#path-schemes","title":"Path Schemes","text":""},{"location":"actions/#file-relative-to-working-directory","title":"<code>file:///</code> - Relative to Working Directory","text":"<p>Default scheme for simple paths. Resolves relative to the workflow's working directory:</p> <pre><code>[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"file:///config.yaml\"      # Or just \"config.yaml\"\ndestination = \"file:///backup/config.yaml\"\n</code></pre> <p>Equivalent simplified syntax: <pre><code>source = \"config.yaml\"\ndestination = \"backup/config.yaml\"\n</code></pre></p>"},{"location":"actions/#repository-repository-files","title":"<code>repository:///</code> - Repository Files","text":"<p>Paths within the cloned Git repository:</p> <pre><code>[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///.github/workflows/ci.yml\"\ndestination = \"repository:///.github/workflows/ci-backup.yml\"\n</code></pre> <p>The <code>repository:///</code> prefix maps to <code>{working_directory}/repository/</code> where the actual repository is cloned.</p>"},{"location":"actions/#workflow-workflow-resources","title":"<code>workflow:///</code> - Workflow Resources","text":"<p>Paths to files bundled with the workflow itself:</p> <pre><code>[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///.gitignore\"           # From workflow directory\ndestination = \"repository:///.gitignore\"     # To repository\n</code></pre> <p>The <code>workflow:///</code> prefix maps to <code>{working_directory}/workflow/</code> where workflow resources are staged.</p>"},{"location":"actions/#extracted-docker-extracted-files","title":"<code>extracted:///</code> - Docker Extracted Files","text":"<p>Files extracted from Docker containers via docker actions:</p> <pre><code>[[actions]]\nname = \"extract-from-image\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"myapp:latest\"\nsource = \"/app/config/\"\ndestination = \"extracted:///configs/\"\n\n[[actions]]\nname = \"copy-extracted\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"extracted:///configs/app.yaml\"\ndestination = \"repository:///config/app.yaml\"\n</code></pre> <p>The <code>extracted:///</code> prefix maps to <code>{working_directory}/extracted/</code> where Docker-extracted files are stored.</p>"},{"location":"actions/#path-resolution-examples","title":"Path Resolution Examples","text":"<pre><code># Example 1: Copy workflow template to repository\n[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///templates/README.md\"\ndestination = \"repository:///README.md\"\n\n# Example 2: Extract Docker config and use it\n[[actions]]\nname = \"extract-config\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"python:3.12\"\nsource = \"/usr/local/lib/python3.12/\"\ndestination = \"extracted:///python-libs/\"\n\n[[actions]]\nname = \"analyze-libs\"\ntype = \"shell\"\ncommand = \"ls -lah {{ working_directory }}/extracted/python-libs\"\n\n# Example 3: Multiple file operations\n[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///old-config.yaml\"\ndestination = \"repository:///backup/config.yaml\"\n\n[[actions]]\ntype = \"file\"\ncommand = \"write\"\npath = \"repository:///config.yaml\"\ncontent = \"new_config: true\"\n</code></pre>"},{"location":"actions/#working-directory-structure","title":"Working Directory Structure","text":"<p>During workflow execution, the working directory contains:</p> <pre><code>{working_directory}/\n\u251c\u2500\u2500 repository/          # Cloned Git repository\n\u2502   \u251c\u2500\u2500 .git/\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 workflow/            # Workflow resources (templates, files)\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 .gitignore\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 extracted/           # Files extracted from Docker\n\u2502   \u2514\u2500\u2500 configs/\n\u2514\u2500\u2500 other files...       # Working files (logs, temp files)\n</code></pre>"},{"location":"actions/#case-sensitivity","title":"Case Sensitivity","text":"<p>Important: File paths preserve case sensitivity. The three-slash format (<code>file:///</code>) ensures paths are treated correctly on both case-sensitive (Linux) and case-insensitive (macOS/Windows) filesystems.</p> <pre><code># Correct - case is preserved\nsource = \"README.md\"              # Becomes file:///README.md\nsource = \"repository:///LICENSE\"  # Exact case maintained\n\n# Incorrect legacy format (deprecated)\nsource = \"file://readme.md\"       # Would lowercase on some systems\n</code></pre>"},{"location":"actions/#common-action-patterns","title":"Common Action Patterns","text":""},{"location":"actions/#sequential-file-operations","title":"Sequential File Operations","text":"<pre><code>[[actions]]\nname = \"backup-config\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///config.yaml\"\ndestination = \"repository:///config.yaml.bak\"\n\n[[actions]]\nname = \"update-config\"\ntype = \"file\"\ncommand = \"write\"\npath = \"repository:///config.yaml\"\ncontent = \"\"\"\nversion: 2\nupdated: true\n\"\"\"\n</code></pre>"},{"location":"actions/#template-generation-pipeline","title":"Template Generation Pipeline","text":"<pre><code>[[actions]]\nname = \"render-templates\"\ntype = \"template\"\nsource_path = \"workflow:///templates/\"\ndestination_path = \"repository:///config/\"\n\n[[actions]]\nname = \"validate-configs\"\ntype = \"shell\"\ncommand = \"python -m yamllint {{ working_directory }}/repository/config/\"\n</code></pre>"},{"location":"actions/#docker-extract-and-transform","title":"Docker Extract and Transform","text":"<pre><code>[[actions]]\nname = \"extract-from-base\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"base:latest\"\nsource = \"/app/\"\ndestination = \"extracted:///base-app/\"\n\n[[actions]]\nname = \"merge-with-repo\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"extracted:///base-app/config.json\"\ndestination = \"repository:///config/base.json\"\n</code></pre>"},{"location":"actions/#action-execution-context","title":"Action Execution Context","text":"<p>All actions execute with access to these context variables (via Jinja2 templating where supported):</p> <ul> <li><code>workflow</code>: Current workflow configuration</li> <li><code>imbi_project</code>: Imbi project data (ID, name, type, facts, etc.)</li> <li><code>github_repository</code>: GitHub repository data (if applicable)</li> <li><code>gitlab_project</code>: GitLab project data (if applicable)</li> <li><code>working_directory</code>: Temporary execution directory path</li> <li><code>starting_commit</code>: Initial Git commit SHA (for tracking changes)</li> </ul> <p>See individual action type documentation for specific configuration options and examples.</p>"},{"location":"actions/callable/","title":"Callable Actions","text":"<p>Callable actions invoke methods directly on client instances (GitHub, GitLab, Imbi), enabling dynamic API operations with template variable support.</p>"},{"location":"actions/callable/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"callable\"\n\n[actions.value]\nclient = \"github|gitlab|imbi\"\nmethod = \"method_name\"\n\n[actions.value.kwargs]\nparam1 = \"value1\"\nparam2 = \"{{ template_var }}\"\n</code></pre>"},{"location":"actions/callable/#fields","title":"Fields","text":""},{"location":"actions/callable/#client-required","title":"client (required)","text":"<p>The client instance to call the method on.</p> <p>Options: <code>github</code>, <code>gitlab</code>, <code>imbi</code></p>"},{"location":"actions/callable/#method-required","title":"method (required)","text":"<p>The method name to invoke on the client.</p> <p>Type: <code>string</code> (method name)</p>"},{"location":"actions/callable/#kwargs-optional","title":"kwargs (optional)","text":"<p>Dictionary of keyword arguments to pass to the method. Values support Jinja2 templates.</p> <p>Type: <code>dict[str, any]</code></p>"},{"location":"actions/callable/#examples","title":"Examples","text":""},{"location":"actions/callable/#github-operations","title":"GitHub Operations","text":"<pre><code>[[actions]]\nname = \"create-pr\"\ntype = \"callable\"\n\n[actions.value]\nclient = \"github\"\nmethod = \"create_pull_request\"\n\n[actions.value.kwargs]\ntitle = \"Automated update for {{ imbi_project.name }}\"\nbody = \"This PR updates configurations\"\nhead_branch = \"automation/{{ workflow.slug }}\"\nbase_branch = \"main\"\n</code></pre>"},{"location":"actions/callable/#imbi-updates","title":"Imbi Updates","text":"<pre><code>[[actions]]\nname = \"update-project-fact\"\ntype = \"callable\"\n\n[actions.value]\nclient = \"imbi\"\nmethod = \"update_project_fact\"\n\n[actions.value.kwargs]\nproject_id = \"{{ imbi_project.id }}\"\nfact_name = \"Last Updated\"\nfact_value = \"{{ now() }}\"\n</code></pre>"},{"location":"actions/callable/#gitlab-operations","title":"GitLab Operations","text":"<pre><code>[[actions]]\nname = \"create-merge-request\"\ntype = \"callable\"\n\n[actions.value]\nclient = \"gitlab\"\nmethod = \"create_merge_request\"\n\n[actions.value.kwargs]\nproject_id = \"{{ gitlab_project.id }}\"\nsource_branch = \"feature/update\"\ntarget_branch = \"main\"\ntitle = \"Update {{ imbi_project.name }}\"\n</code></pre>"},{"location":"actions/callable/#available-clients","title":"Available Clients","text":""},{"location":"actions/callable/#github-client","title":"GitHub Client","text":"<p>Common methods: - <code>create_pull_request()</code> - <code>update_repository_settings()</code> - <code>sync_environments()</code> - <code>get_workflow_status()</code></p>"},{"location":"actions/callable/#gitlab-client","title":"GitLab Client","text":"<p>Common methods: - <code>create_merge_request()</code> - <code>update_project_settings()</code> - <code>get_pipeline_status()</code></p>"},{"location":"actions/callable/#imbi-client","title":"Imbi Client","text":"<p>Common methods: - <code>update_project_fact()</code> - <code>add_project_link()</code> - <code>update_project_metadata()</code></p>"},{"location":"actions/callable/#common-patterns","title":"Common Patterns","text":""},{"location":"actions/callable/#update-after-transformation","title":"Update After Transformation","text":"<pre><code>[[actions]]\nname = \"update-code\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/update.md\"\n\n[[actions]]\nname = \"mark-updated\"\ntype = \"callable\"\n\n[actions.value]\nclient = \"imbi\"\nmethod = \"update_project_fact\"\n\n[actions.value.kwargs]\nproject_id = \"{{ imbi_project.id }}\"\nfact_name = \"Automation Status\"\nfact_value = \"Updated\"\n</code></pre>"},{"location":"actions/callable/#conditional-api-call","title":"Conditional API Call","text":"<pre><code>{% if github_repository %}\n[[actions]]\nname = \"update-github\"\ntype = \"callable\"\n\n[actions.value]\nclient = \"github\"\nmethod = \"update_repository_settings\"\n\n[actions.value.kwargs]\nrepository = \"{{ github_repository.full_name }}\"\nallow_squash_merge = true\n{% endif %}\n</code></pre>"},{"location":"actions/callable/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Methods called asynchronously</li> <li>Kwargs support full Jinja2 template syntax</li> <li>Client instances authenticated from config</li> <li>Method return values logged at DEBUG level</li> <li>Errors raised if method doesn't exist or call fails</li> </ul>"},{"location":"actions/claude/","title":"Claude Actions","text":"<p>Claude actions leverage the Claude Code SDK for AI-powered code transformations, enabling complex multi-file analysis and intelligent code modifications that would be difficult or error-prone with traditional approaches.</p>"},{"location":"actions/claude/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"claude\"\nprompt = \"prompt-file-or-url\"          # Required\nagent = \"task\"                         # Optional, default: \"task\"\nvalidator_prompt = \"validator-prompt\"  # Optional\nmax_cycles = 3                         # Optional, default: 3\non_failure = \"cleanup-action\"          # Optional\n</code></pre>"},{"location":"actions/claude/#fields","title":"Fields","text":""},{"location":"actions/claude/#prompt-required","title":"prompt (required)","text":"<p>Path to Jinja2 template file containing the prompt for Claude.</p> <p>Type: <code>ResourceUrl</code> (string path) Format: Jinja2 template with full workflow context Location: Usually in <code>workflow:///prompts/</code> directory</p>"},{"location":"actions/claude/#agent-optional","title":"agent (optional)","text":"<p>Agent type to use for the transformation.</p> <p>Type: <code>string</code> Options: - <code>task</code> (default): General-purpose transformation agent - <code>validator</code>: Validation-focused agent</p>"},{"location":"actions/claude/#validator_prompt-optional","title":"validator_prompt (optional)","text":"<p>Path to validation prompt template. Used to verify transformation success.</p> <p>Type: <code>ResourceUrl</code> (string path)</p>"},{"location":"actions/claude/#max_cycles-optional","title":"max_cycles (optional)","text":"<p>Maximum number of retry cycles if transformation fails.</p> <p>Type: <code>integer</code> Default: <code>3</code> Range: 1-10</p>"},{"location":"actions/claude/#on_failure-optional","title":"on_failure (optional)","text":"<p>Action name to restart from if this action fails after all retry cycles.</p> <p>Type: <code>string</code> (action name)</p>"},{"location":"actions/claude/#prompt-context","title":"Prompt Context","text":"<p>Prompts have access to all workflow context variables:</p> Variable Description <code>workflow</code> Workflow configuration <code>imbi_project</code> Imbi project data <code>github_repository</code> GitHub repository (if applicable) <code>gitlab_project</code> GitLab project (if applicable) <code>working_directory</code> Execution directory path <code>starting_commit</code> Initial commit SHA <code>commit_author</code> Git commit author (from config) <code>commit_author_name</code> Author name only <code>commit_author_address</code> Author email only <code>workflow_name</code> Current workflow name"},{"location":"actions/claude/#examples","title":"Examples","text":""},{"location":"actions/claude/#basic-code-transformation","title":"Basic Code Transformation","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"update-python-version\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/update-python.md\"\n</code></pre></p> <p>Prompt (<code>prompts/update-python.md</code>): <pre><code># Update Python Version to 3.12\n\nUpdate all Python version references in this repository to Python 3.12.\n\n## Files to Update\n\n1. `pyproject.toml` - Update `requires-python` field\n2. `.github/workflows/*.yml` - Update GitHub Actions Python version\n3. `Dockerfile` - Update base image to python:3.12\n4. `README.md` - Update installation instructions if they mention Python version\n\n## Requirements\n\n- Maintain backwards compatibility where possible\n- Update all version strings consistently\n- Preserve existing configuration structure\n- Do not modify other unrelated settings\n\n## Project Context\n\n- **Project**: {{ imbi_project.name }}\n- **Type**: {{ imbi_project.project_type }}\n- **Current Python**: {{ imbi_project.facts.get('Programming Language', 'unknown') }}\n\n## Success Criteria\n\nCreate a commit with all Python version references updated to 3.12.\n\n## Failure Indication\n\nIf you cannot complete this task, create a file named `ACTION_FAILED` with details about what prevented completion.\n</code></pre></p>"},{"location":"actions/claude/#multi-cycle-transformation-with-retry","title":"Multi-Cycle Transformation with Retry","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"refactor-codebase\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/refactor.md\"\nmax_cycles = 5\non_failure = \"create-issue\"  # Create GitHub issue if fails\n</code></pre></p>"},{"location":"actions/claude/#with-validator","title":"With Validator","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"update-dependencies\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/update-deps.md\"\nvalidator_prompt = \"workflow:///prompts/validate-deps.md\"\nagent = \"task\"\n</code></pre></p> <p>Validator prompt: <pre><code># Validate Dependency Updates\n\nVerify that the dependency updates were successful:\n\n1. Check that `requirements.txt` or `pyproject.toml` has been updated\n2. Verify no breaking changes were introduced\n3. Confirm all imports still resolve correctly\n4. Check that version constraints are reasonable\n\nReturn success if validation passes, failure otherwise with specific errors.\n</code></pre></p>"},{"location":"actions/claude/#complex-transformation","title":"Complex Transformation","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"migrate-to-pydantic-v2\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/pydantic-migration.md\"\nmax_cycles = 10\n</code></pre></p> <p>Prompt: <pre><code># Migrate to Pydantic V2\n\nMigrate this codebase from Pydantic v1 to Pydantic v2.\n\n## Migration Steps\n\n1. **Update imports**: Change `pydantic` imports to v2 syntax\n2. **Config classes**: Convert `Config` class to `model_config` dict\n3. **Validators**: Update `@validator` to `@field_validator`\n4. **Field definitions**: Update `Field(...)` syntax changes\n5. **JSON methods**: Replace `.dict()` with `.model_dump()`, `.json()` with `.model_dump_json()`\n\n## Files to Process\n\nScan the repository for Python files containing:\n- `from pydantic import`\n- `class.*\\\\(.*BaseModel\\\\)`\n- `@validator`\n- `.dict()` or `.json()` calls on Pydantic models\n\n## Testing\n\nAfter making changes:\n1. Run tests if they exist: `pytest tests/`\n2. Check for import errors\n3. Verify all models still validate correctly\n\n## Commit Message\n</code></pre> Migrate from Pydantic v1 to v2</p> <ul> <li>Update imports to v2 syntax</li> <li>Convert Config classes to model_config</li> <li>Update validators to field_validator</li> <li>Replace .dict()/.json() with .model_dump()/.model_dump_json()</li> </ul> <p>Project: {{ imbi_project.name }} <pre><code>## Failure Conditions\n\nCreate `PYDANTIC_MIGRATION_FAILED` file if:\n- Unable to identify Pydantic usage patterns\n- Migration would break existing functionality\n- Tests fail after migration\n- Manual intervention required\n\nInclude specific error details and affected files.\n</code></pre></p>"},{"location":"actions/claude/#prompt-best-practices","title":"Prompt Best Practices","text":""},{"location":"actions/claude/#clear-objectives","title":"Clear Objectives","text":"<pre><code># Update Docker Base Image\n\n**Goal**: Update the Dockerfile to use python:3.12-slim as the base image.\n\n**Files**: `Dockerfile`, `docker-compose.yml`\n\n**Requirements**:\n- Change base image in all Dockerfiles\n- Maintain multi-stage build structure if present\n- Update docker-compose.yml references\n- Keep existing COPY, RUN, CMD instructions\n</code></pre>"},{"location":"actions/claude/#specific-instructions","title":"Specific Instructions","text":"<pre><code>## Step-by-Step Process\n\n1. Locate all Dockerfile* files in the repository\n2. For each Dockerfile:\n   a. Find the `FROM` instruction\n   b. Replace with `FROM python:3.12-slim`\n   c. Keep any `AS builder` or stage names\n3. Update docker-compose.yml if it hardcodes Python version\n4. Commit changes with message: \"Update Python base image to 3.12\"\n</code></pre>"},{"location":"actions/claude/#successfailure-criteria","title":"Success/Failure Criteria","text":"<pre><code>## Success Criteria\n\nYou must:\n- \u2713 Update all Dockerfiles\n- \u2713 Maintain working configuration\n- \u2713 Create a git commit\n- \u2713 Include descriptive commit message\n\n## Failure Indication\n\nCreate `DOCKER_UPDATE_FAILED` file if:\n- No Dockerfile found in repository\n- Unable to parse existing Dockerfile syntax\n- Changes would break the build process\n- Multiple conflicting Dockerfile versions exist\n\nInclude the specific error and list of files examined.\n</code></pre>"},{"location":"actions/claude/#project-context-usage","title":"Project Context Usage","text":"<pre><code>## Project-Specific Considerations\n\n- **Project**: {{ imbi_project.name }}\n- **Type**: {{ imbi_project.project_type }}\n- **Namespace**: {{ imbi_project.namespace }}\n\n{% if imbi_project.project_type == 'api' %}\nThis is an API project - ensure uvicorn/fastapi configurations are preserved.\n{% elif imbi_project.project_type == 'consumer' %}\nThis is a consumer - ensure message handling configurations are intact.\n{% endif %}\n\n{% if imbi_project.facts %}\n## Known Facts\n{% for key, value in imbi_project.facts.items() %}\n- **{{ key }}**: {{ value }}\n{% endfor %}\n{% endif %}\n</code></pre>"},{"location":"actions/claude/#failure-handling","title":"Failure Handling","text":""},{"location":"actions/claude/#failure-files","title":"Failure Files","text":"<p>Claude actions detect failure through specific files created in the working directory:</p> File Name Meaning <code>ACTION_FAILED</code> Generic action failure <code>{ACTION_NAME}_FAILED</code> Specific action failure Custom names Custom failure indicators <p>Prompt instructions for failure: <pre><code>## Failure Indication\n\nIf you cannot complete this task, create a file named `UPDATE_DEPENDENCIES_FAILED` containing:\n\n1. **Reason**: Why the task failed\n2. **Files Examined**: List of files you checked\n3. **Errors Encountered**: Specific error messages\n4. **Manual Steps**: What a human would need to do\n5. **Context**: Any relevant information for debugging\n\nExample:\n</code></pre> REASON: Unable to parse pyproject.toml due to syntax error FILES: pyproject.toml, requirements.txt ERROR: toml.decoder.TomlDecodeError at line 15 MANUAL: Fix toml syntax error in pyproject.toml line 15 <pre><code>\n</code></pre></p>"},{"location":"actions/claude/#retry-mechanism","title":"Retry Mechanism","text":"<pre><code>[[actions]]\nname = \"fragile-transformation\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/transform.md\"\nmax_cycles = 5        # Try up to 5 times\non_failure = \"cleanup\" # Run cleanup action if all cycles fail\n</code></pre> <p>Cycle behavior: 1. Execute transformation 2. Check for failure files 3. If failure detected and cycles remaining, retry 4. If all cycles exhausted, trigger <code>on_failure</code> action 5. Pass error context to retry attempts</p>"},{"location":"actions/claude/#error-context-in-retries","title":"Error Context in Retries","text":"<p>On retry, the prompt receives additional context:</p> <pre><code># Appended to prompt automatically:\n\"\"\"\n---\nYou need to fix problems identified from a previous run.\nThe errors for context are:\n\n{\n  \"result\": \"failure\",\n  \"message\": \"Unable to update dependencies\",\n  \"errors\": [\"Package X not found\", \"Version conflict with Y\"]\n}\n\"\"\"\n</code></pre>"},{"location":"actions/claude/#advanced-usage","title":"Advanced Usage","text":""},{"location":"actions/claude/#conditional-prompts","title":"Conditional Prompts","text":"<p>Workflow: <pre><code>[[actions]]\nname = \"language-specific-update\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/{{ imbi_project.facts.get('Programming Language', 'unknown') | lower }}-update.md\"\n</code></pre></p>"},{"location":"actions/claude/#multi-stage-transformations","title":"Multi-Stage Transformations","text":"<pre><code>[[actions]]\nname = \"stage1-refactor\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/stage1.md\"\n\n[[actions]]\nname = \"stage2-optimize\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/stage2.md\"\n\n[[actions]]\nname = \"stage3-document\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/stage3.md\"\n</code></pre>"},{"location":"actions/claude/#with-prepost-actions","title":"With Pre/Post Actions","text":"<pre><code>[[actions]]\nname = \"backup-files\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///src/\"\ndestination = \"repository:///src.backup/\"\n\n[[actions]]\nname = \"ai-refactor\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/refactor.md\"\non_failure = \"restore-backup\"\n\n[[actions]]\nname = \"run-tests\"\ntype = \"shell\"\ncommand = \"pytest tests/\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"restore-backup\"\ntype = \"file\"\ncommand = \"move\"\nsource = \"repository:///src.backup/\"\ndestination = \"repository:///src/\"\n</code></pre>"},{"location":"actions/claude/#integration-with-other-actions","title":"Integration with Other Actions","text":""},{"location":"actions/claude/#claude-shell-test-verification","title":"Claude + Shell (Test Verification)","text":"<pre><code>[[actions]]\nname = \"ai-code-update\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/update.md\"\n\n[[actions]]\nname = \"verify-tests\"\ntype = \"shell\"\ncommand = \"pytest tests/ -v\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/claude/#claude-file-template-application","title":"Claude + File (Template Application)","text":"<pre><code>[[actions]]\nname = \"generate-base-config\"\ntype = \"template\"\nsource_path = \"workflow:///config.yaml.j2\"\ndestination_path = \"repository:///config.yaml\"\n\n[[actions]]\nname = \"customize-config\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/customize-config.md\"\n</code></pre>"},{"location":"actions/claude/#claude-git-commit-verification","title":"Claude + Git (Commit Verification)","text":"<pre><code>[[actions]]\nname = \"ai-transformation\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/transform.md\"\n\n[[actions]]\nname = \"verify-commit\"\ntype = \"shell\"\ncommand = \"git log -1 --pretty=%B\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/claude/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>API Costs: Each cycle makes Claude API calls</li> <li>Execution Time: Complex transformations can take several minutes</li> <li>Context Size: Large repositories may hit context limits</li> <li>Rate Limiting: Respect Anthropic API rate limits</li> </ul>"},{"location":"actions/claude/#security-considerations","title":"Security Considerations","text":"<ul> <li>Code Execution: Claude can execute arbitrary code in the repository context</li> <li>Sensitive Data: Prompts and code are sent to Anthropic API</li> <li>API Keys: Ensure API keys are properly secured</li> <li>Verification: Always verify AI-generated changes before merging</li> </ul>"},{"location":"actions/claude/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Uses Claude Code SDK with MCP tool support</li> <li>Supports both agent-based and direct API queries</li> <li>Custom agents defined in <code>claude-code/agents/</code> directory</li> <li>Working directory isolated per execution</li> <li>Automatic cleanup on success or failure</li> <li>Full logging of Claude interactions at DEBUG level</li> </ul>"},{"location":"actions/docker/","title":"Docker Actions","text":"<p>Docker actions provide container operations for extracting files from Docker images and building images.</p>"},{"location":"actions/docker/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"docker\"\ncommand = \"extract|build|pull\"\nimage = \"image:tag\"       # Required\n# Command-specific fields below\n</code></pre>"},{"location":"actions/docker/#commands","title":"Commands","text":""},{"location":"actions/docker/#extract","title":"extract","text":"<p>Extract files from a Docker container image.</p> <p>Required Fields: - <code>image</code>: Docker image name with optional tag - <code>source</code>: Path inside container to extract - <code>destination</code>: Local path to extract to (ResourceUrl)</p> <p>Optional Fields: - <code>tag</code>: Image tag (default: <code>latest</code>)</p> <p>Example: <pre><code>[[actions]]\nname = \"extract-python-libs\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"python\"\ntag = \"3.12-slim\"\nsource = \"/usr/local/lib/python3.12/\"\ndestination = \"extracted:///python-libs/\"\n</code></pre></p> <p>Behavior: 1. Creates temporary container from image 2. Copies files from container to local filesystem 3. Stores in <code>extracted:///</code> directory 4. Automatically cleans up container</p>"},{"location":"actions/docker/#build","title":"build","text":"<p>Build a Docker image from a Dockerfile.</p> <p>Required Fields: - <code>image</code>: Image name to create - <code>path</code>: Path to Dockerfile directory (ResourceUrl)</p> <p>Optional Fields: - <code>tag</code>: Image tag (default: <code>latest</code>) - <code>build_args</code>: Build arguments dictionary</p> <p>Example: <pre><code>[[actions]]\nname = \"build-app-image\"\ntype = \"docker\"\ncommand = \"build\"\nimage = \"myapp\"\ntag = \"1.0.0\"\npath = \"repository:///\"\n\n[actions.build_args]\nPYTHON_VERSION = \"3.12\"\nAPP_ENV = \"production\"\n</code></pre></p>"},{"location":"actions/docker/#pull","title":"pull","text":"<p>Pull a Docker image from registry.</p> <p>Required Fields: - <code>image</code>: Image name to pull</p> <p>Optional Fields: - <code>tag</code>: Image tag (default: <code>latest</code>)</p> <p>Example: <pre><code>[[actions]]\nname = \"pull-base-image\"\ntype = \"docker\"\ncommand = \"pull\"\nimage = \"python\"\ntag = \"3.12-slim\"\n</code></pre></p>"},{"location":"actions/docker/#common-use-cases","title":"Common Use Cases","text":""},{"location":"actions/docker/#extract-configuration-files","title":"Extract Configuration Files","text":"<pre><code>[[actions]]\nname = \"extract-nginx-config\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"nginx\"\ntag = \"latest\"\nsource = \"/etc/nginx/\"\ndestination = \"extracted:///nginx-config/\"\n\n[[actions]]\nname = \"copy-to-repo\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"extracted:///nginx-config/nginx.conf\"\ndestination = \"repository:///config/nginx.conf\"\n</code></pre>"},{"location":"actions/docker/#extract-python-packages","title":"Extract Python Packages","text":"<pre><code>[[actions]]\nname = \"extract-site-packages\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"myapp\"\ntag = \"latest\"\nsource = \"/usr/local/lib/python3.12/site-packages/\"\ndestination = \"extracted:///packages/\"\n</code></pre>"},{"location":"actions/docker/#build-custom-image","title":"Build Custom Image","text":"<pre><code>[[actions]]\nname = \"create-dockerfile\"\ntype = \"template\"\nsource_path = \"workflow:///Dockerfile.j2\"\ndestination_path = \"repository:///Dockerfile\"\n\n[[actions]]\nname = \"build-image\"\ntype = \"docker\"\ncommand = \"build\"\nimage = \"{{ imbi_project.slug }}\"\ntag = \"{{ version }}\"\npath = \"repository:///\"\n</code></pre>"},{"location":"actions/docker/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Requires Docker daemon running</li> <li>Uses <code>docker</code> CLI commands</li> <li>Temporary containers automatically cleaned up</li> <li>Extracted files preserve permissions</li> <li>Build context is the specified path directory</li> </ul>"},{"location":"actions/file/","title":"File Actions","text":"<p>File actions provide comprehensive file manipulation capabilities including copying, moving, deleting, appending, and writing files with support for glob patterns and multiple encoding options.</p>"},{"location":"actions/file/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"file\"\ncommand = \"copy|move|rename|delete|append|write\"\n# Command-specific fields documented below\n</code></pre>"},{"location":"actions/file/#commands","title":"Commands","text":""},{"location":"actions/file/#copy","title":"copy","text":"<p>Copy files or directories with glob pattern support.</p> <p>Required Fields: - <code>source</code>: Source file/directory path or glob pattern - <code>destination</code>: Destination path</p> <p>Examples:</p> <pre><code># Copy single file\n[[actions]]\nname = \"copy-readme\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///README.md\"\ndestination = \"repository:///README.md\"\n\n# Copy with glob pattern\n[[actions]]\nname = \"copy-yaml-files\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///configs/*.yaml\"\ndestination = \"repository:///config/\"\n\n# Copy directory\n[[actions]]\nname = \"copy-templates\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///templates/\"\ndestination = \"repository:///.github/templates/\"\n\n# Recursive glob pattern\n[[actions]]\nname = \"copy-all-python\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///**/*.py\"\ndestination = \"repository:///scripts/\"\n</code></pre> <p>Glob Pattern Support: - <code>*</code> - Matches any characters within a filename - <code>?</code> - Matches single character - <code>[...]</code> - Matches character ranges - <code>**/</code> - Recursive directory matching</p> <p>Behavior: - Creates destination parent directories automatically - For glob patterns, destination must be a directory - Preserves file metadata (timestamps, permissions) - For directories, uses recursive copy</p>"},{"location":"actions/file/#move","title":"move","text":"<p>Move (rename across directories) files or directories.</p> <p>Required Fields: - <code>source</code>: Source file/directory path - <code>destination</code>: Destination path</p> <p>Examples:</p> <pre><code># Move file to different directory\n[[actions]]\nname = \"relocate-config\"\ntype = \"file\"\ncommand = \"move\"\nsource = \"repository:///old-location/config.yaml\"\ndestination = \"repository:///config/app.yaml\"\n\n# Reorganize directory structure\n[[actions]]\nname = \"move-tests\"\ntype = \"file\"\ncommand = \"move\"\nsource = \"repository:///old_tests/\"\ndestination = \"repository:///tests/\"\n</code></pre> <p>Behavior: - Source file/directory is removed after move - Creates destination parent directories automatically - Fails if source doesn't exist</p>"},{"location":"actions/file/#rename","title":"rename","text":"<p>Rename files within the same directory or move to different location.</p> <p>Required Fields: - <code>source</code>: Source file path - <code>destination</code>: Destination file path</p> <p>Examples:</p> <pre><code># Simple rename\n[[actions]]\nname = \"rename-config\"\ntype = \"file\"\ncommand = \"rename\"\nsource = \"repository:///config.yml\"\ndestination = \"repository:///config.yaml\"\n\n# Rename with path change\n[[actions]]\nname = \"rename-and-move\"\ntype = \"file\"\ncommand = \"rename\"\nsource = \"repository:///src/old_module.py\"\ndestination = \"repository:///src/new_module.py\"\n</code></pre> <p>Behavior: - Similar to <code>move</code> but semantically for file renaming - Creates destination parent directories automatically</p>"},{"location":"actions/file/#delete","title":"delete","text":"<p>Delete files or directories, with regex pattern matching support.</p> <p>Required Fields: One of: - <code>path</code>: Specific file/directory path - <code>pattern</code>: Regex pattern for matching files</p> <p>Examples:</p> <pre><code># Delete specific file\n[[actions]]\nname = \"remove-old-config\"\ntype = \"file\"\ncommand = \"delete\"\npath = \"repository:///old-config.yaml\"\n\n# Delete directory\n[[actions]]\nname = \"remove-cache\"\ntype = \"file\"\ncommand = \"delete\"\npath = \"repository:///__pycache__/\"\n\n# Delete with regex pattern\n[[actions]]\nname = \"remove-pyc-files\"\ntype = \"file\"\ncommand = \"delete\"\npattern = \".*\\\\.pyc$\"\n\n# Delete temporary files\n[[actions]]\nname = \"cleanup-temps\"\ntype = \"file\"\ncommand = \"delete\"\npattern = \".*\\\\.(tmp|bak|swp)$\"\n</code></pre> <p>Behavior: - For <code>path</code>: Deletes specific file or directory (recursive) - For <code>pattern</code>: Searches recursively and deletes all matching files - Does not error if path doesn't exist - Pattern matching uses Python regex syntax</p>"},{"location":"actions/file/#append","title":"append","text":"<p>Append content to existing files or create new files.</p> <p>Required Fields: - <code>path</code>: Target file path - <code>content</code>: Content to append (string or bytes)</p> <p>Optional Fields: - <code>encoding</code>: Character encoding (default: <code>utf-8</code>)</p> <p>Examples:</p> <pre><code># Append text to existing file\n[[actions]]\nname = \"add-to-gitignore\"\ntype = \"file\"\ncommand = \"append\"\npath = \"repository:///.gitignore\"\ncontent = \"\"\"\n\n# Added by automation\n*.log\n__pycache__/\n.env\n\"\"\"\n\n# Create or append to file\n[[actions]]\nname = \"add-config-section\"\ntype = \"file\"\ncommand = \"append\"\npath = \"repository:///config.ini\"\ncontent = \"\"\"\n[new_section]\noption = value\n\"\"\"\n\n# Append with custom encoding\n[[actions]]\nname = \"append-unicode\"\ntype = \"file\"\ncommand = \"append\"\npath = \"repository:///unicode.txt\"\ncontent = \"Hello \u4e16\u754c\\n\"\nencoding = \"utf-16\"\n</code></pre> <p>Behavior: - Creates file if it doesn't exist - Creates parent directories automatically - Appends to end of existing files - Supports both text and binary content</p>"},{"location":"actions/file/#write","title":"write","text":"<p>Write content to files, overwriting if they exist.</p> <p>Required Fields: - <code>path</code>: Target file path - <code>content</code>: Content to write (string or bytes)</p> <p>Optional Fields: - <code>encoding</code>: Character encoding (default: <code>utf-8</code>)</p> <p>Examples:</p> <p><pre><code># Write text file\n[[actions]]\nname = \"create-readme\"\ntype = \"file\"\ncommand = \"write\"\npath = \"repository:///README.md\"\ncontent = \"\"\"\n# {{ imbi_project.name }}\n\n{{ imbi_project.description }}\n\n## Installation\n\n```bash\npip install {{ imbi_project.name }}\n</code></pre> \"\"\"</p>"},{"location":"actions/file/#write-json-configuration","title":"Write JSON configuration","text":"<p>[[actions]] name = \"write-config\" type = \"file\" command = \"write\" path = \"repository:///config.json\" content = \"\"\" {   \"name\": \"{{ imbi_project.name }}\",   \"version\": \"1.0.0\",   \"type\": \"{{ imbi_project.project_type }}\" } \"\"\"</p>"},{"location":"actions/file/#write-with-custom-encoding","title":"Write with custom encoding","text":"<p>[[actions]] name = \"write-utf16\" type = \"file\" command = \"write\" path = \"repository:///data.txt\" content = \"Unicode content: \u4f60\u597d\" encoding = \"utf-16\"</p>"},{"location":"actions/file/#write-binary-content","title":"Write binary content","text":"<p>[[actions]] name = \"write-binary\" type = \"file\" command = \"write\" path = \"repository:///image.dat\" content = \"{{ binary_data }}\"  # Must be bytes <pre><code>**Behavior:**\n- Overwrites existing files\n- Creates file if it doesn't exist\n- Creates parent directories automatically\n- Supports both text and binary content\n- Content supports Jinja2 template variables\n\n---\n\n## Path Resolution\n\nFile actions support all ResourceUrl schemes:\n\n| Scheme | Base Directory | Use Case |\n|--------|---------------|----------|\n| `file:///` or no scheme | Working directory | Temporary files |\n| `repository:///` | Cloned repository | Repository files |\n| `workflow:///` | Workflow resources | Template files |\n| `extracted:///` | Docker extracts | Extracted files |\n\n**Examples:**\n\n```toml\n# Repository to repository\n[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///README.md\"\ndestination = \"repository:///docs/README.md\"\n\n# Workflow to repository\n[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///templates/.gitignore\"\ndestination = \"repository:///.gitignore\"\n\n# Extracted to repository\n[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"extracted:///configs/app.yaml\"\ndestination = \"repository:///config/app.yaml\"\n\n# Simple paths (relative to working directory)\n[[actions]]\ntype = \"file\"\ncommand = \"write\"\npath = \"temp-file.txt\"  # Same as file:///temp-file.txt\ncontent = \"temporary data\"\n</code></pre></p>"},{"location":"actions/file/#common-patterns","title":"Common Patterns","text":""},{"location":"actions/file/#backup-and-replace-pattern","title":"Backup and Replace Pattern","text":"<pre><code>[[actions]]\nname = \"backup-original\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///config.yaml\"\ndestination = \"repository:///config.yaml.bak\"\n\n[[actions]]\nname = \"write-new-config\"\ntype = \"file\"\ncommand = \"write\"\npath = \"repository:///config.yaml\"\ncontent = \"{{ new_config }}\"\n</code></pre>"},{"location":"actions/file/#template-deployment-pattern","title":"Template Deployment Pattern","text":"<pre><code>[[actions]]\nname = \"copy-gitignore\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///.gitignore\"\ndestination = \"repository:///.gitignore\"\n\n[[actions]]\nname = \"copy-pre-commit\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///.pre-commit-config.yaml\"\ndestination = \"repository:///.pre-commit-config.yaml\"\n</code></pre>"},{"location":"actions/file/#cleanup-pattern","title":"Cleanup Pattern","text":"<pre><code>[[actions]]\nname = \"remove-legacy-configs\"\ntype = \"file\"\ncommand = \"delete\"\npattern = \".*\\\\.legacy\\\\.yaml$\"\n\n[[actions]]\nname = \"remove-cache-dirs\"\ntype = \"file\"\ncommand = \"delete\"\npath = \"repository:///__pycache__/\"\n</code></pre>"},{"location":"actions/file/#glob-copy-pattern","title":"Glob Copy Pattern","text":"<pre><code>[[actions]]\nname = \"copy-all-workflows\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///.github/workflows/*.yml\"\ndestination = \"repository:///.github/workflows/\"\n\n[[actions]]\nname = \"copy-python-modules\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///src/**/*.py\"\ndestination = \"repository:///src/\"\n</code></pre>"},{"location":"actions/file/#error-handling","title":"Error Handling","text":"<p>File actions raise <code>RuntimeError</code> in these situations: - <code>copy</code>/<code>move</code>/<code>rename</code>: Source file doesn't exist - <code>delete</code>: No errors (gracefully handles missing files) - <code>append</code>/<code>write</code>: I/O errors, permission denied</p>"},{"location":"actions/file/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>All operations create parent directories automatically</li> <li>File metadata (permissions, timestamps) preserved in copy operations</li> <li>Glob patterns resolved relative to source base directory</li> <li>Empty glob results raise <code>RuntimeError</code></li> <li>Binary content detected automatically (bytes vs string)</li> <li>Encoding applies only to text operations</li> </ul>"},{"location":"actions/git/","title":"Git Actions","text":"<p>Git actions provide version control operations for extracting Git history and managing branches.</p>"},{"location":"actions/git/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"git\"\ncommand = \"extract\"\n# Command-specific fields below\n</code></pre>"},{"location":"actions/git/#commands","title":"Commands","text":""},{"location":"actions/git/#extract","title":"extract","text":"<p>Extract Git commit history from a specific commit range.</p> <p>Required Fields: - <code>starting_commit</code>: Starting commit SHA or ref - <code>match_strategy</code>: How to find commits (<code>first_parent</code>, <code>all</code>)</p> <p>Optional Fields: - <code>destination</code>: Where to store commit data (ResourceUrl)</p> <p>Example: <pre><code>[[actions]]\nname = \"extract-recent-commits\"\ntype = \"git\"\ncommand = \"extract\"\nstarting_commit = \"{{ starting_commit }}\"\nmatch_strategy = \"first_parent\"\ndestination = \"extracted:///commits/\"\n</code></pre></p> <p>Match Strategies: - <code>first_parent</code>: Follow only first parent commits (linear history) - <code>all</code>: Include all commits in the range (including merges)</p>"},{"location":"actions/git/#common-use-cases","title":"Common Use Cases","text":""},{"location":"actions/git/#extract-commit-range","title":"Extract Commit Range","text":"<pre><code>[[actions]]\nname = \"get-changes\"\ntype = \"git\"\ncommand = \"extract\"\nstarting_commit = \"{{ starting_commit }}\"\nmatch_strategy = \"first_parent\"\ndestination = \"commits.json\"\n</code></pre>"},{"location":"actions/git/#analyze-commit-history","title":"Analyze Commit History","text":"<pre><code>[[actions]]\nname = \"extract-commits\"\ntype = \"git\"\ncommand = \"extract\"\nstarting_commit = \"HEAD~10\"\nmatch_strategy = \"all\"\n\n[[actions]]\nname = \"analyze-commits\"\ntype = \"shell\"\ncommand = \"python scripts/analyze-commits.py\"\nworking_directory = \"{{ working_directory }}\"\n</code></pre>"},{"location":"actions/git/#commit-data-structure","title":"Commit Data Structure","text":"<p>Extracted commit data includes: - Commit SHA - Author name and email - Commit message - Timestamp - Changed files list - Parent commits</p>"},{"location":"actions/git/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Uses <code>git log</code> for commit extraction</li> <li>Commit data stored as JSON</li> <li>Respects <code>.gitignore</code> for file operations</li> <li>Works with current repository state</li> <li>Starting commit must exist in history</li> </ul>"},{"location":"actions/github/","title":"GitHub Actions","text":"<p>GitHub actions provide GitHub-specific operations like environment synchronization and workflow management.</p>"},{"location":"actions/github/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"github\"\noperation = \"sync_environments\"\n# Operation-specific fields\n</code></pre>"},{"location":"actions/github/#operations","title":"Operations","text":""},{"location":"actions/github/#sync_environments","title":"sync_environments","text":"<p>Synchronize GitHub repository environments with Imbi project environments.</p> <p>Example: <pre><code>[[actions]]\nname = \"sync-github-envs\"\ntype = \"github\"\noperation = \"sync_environments\"\n</code></pre></p> <p>Behavior: - Reads environments from Imbi project - Creates/updates GitHub repository environments - Synchronizes environment variables and secrets - Maintains environment protection rules</p>"},{"location":"actions/github/#common-use-cases","title":"Common Use Cases","text":""},{"location":"actions/github/#environment-synchronization","title":"Environment Synchronization","text":"<pre><code>[[conditions]]\nremote_file_exists = \".github/workflows/deploy.yml\"\n\n[[actions]]\nname = \"ensure-environments\"\ntype = \"github\"\noperation = \"sync_environments\"\n</code></pre>"},{"location":"actions/github/#post-deployment-updates","title":"Post-Deployment Updates","text":"<pre><code>[[actions]]\nname = \"deploy-code\"\ntype = \"shell\"\ncommand = \"deploy.sh\"\n\n[[actions]]\nname = \"update-environments\"\ntype = \"github\"\noperation = \"sync_environments\"\n</code></pre>"},{"location":"actions/github/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Requires GitHub API access</li> <li>Uses authenticated GitHub client</li> <li>Respects GitHub API rate limits</li> <li>Idempotent operations (safe to re-run)</li> </ul>"},{"location":"actions/shell/","title":"Shell Actions","text":"<p>Shell actions execute arbitrary commands with full Jinja2 template support for dynamic command construction and access to workflow context variables.</p>"},{"location":"actions/shell/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"shell\"\ncommand = \"command to execute\"\nworking_directory = \"path\"  # Optional\nignore_failure = false      # Optional, default: false\n</code></pre>"},{"location":"actions/shell/#fields","title":"Fields","text":""},{"location":"actions/shell/#command-required","title":"command (required)","text":"<p>The shell command to execute. Supports full Jinja2 template syntax for variable substitution.</p> <p>Type: <code>string</code></p> <p>Template Variables Available: - <code>workflow</code>: Workflow configuration object - <code>imbi_project</code>: Complete Imbi project data - <code>github_repository</code>: GitHub repository object (if applicable) - <code>gitlab_project</code>: GitLab project object (if applicable) - <code>working_directory</code>: Path to workflow working directory - <code>starting_commit</code>: Initial Git commit SHA</p>"},{"location":"actions/shell/#working_directory-optional","title":"working_directory (optional)","text":"<p>Directory to execute the command in. Defaults to the workflow's working directory.</p> <p>Type: <code>ResourceUrl</code> (string path) Default: <code>{working_directory}</code></p>"},{"location":"actions/shell/#ignore_failure-optional","title":"ignore_failure (optional)","text":"<p>Whether to continue workflow execution if the command fails (non-zero exit code).</p> <p>Type: <code>boolean</code> Default: <code>false</code></p>"},{"location":"actions/shell/#examples","title":"Examples","text":""},{"location":"actions/shell/#basic-command-execution","title":"Basic Command Execution","text":"<pre><code>[[actions]]\nname = \"run-tests\"\ntype = \"shell\"\ncommand = \"pytest tests/ -v\"\n</code></pre>"},{"location":"actions/shell/#command-with-working-directory","title":"Command with Working Directory","text":"<pre><code>[[actions]]\nname = \"build-project\"\ntype = \"shell\"\ncommand = \"python setup.py build\"\nworking_directory = \"{{ working_directory }}/repository\"\n</code></pre>"},{"location":"actions/shell/#template-variable-usage","title":"Template Variable Usage","text":"<pre><code>[[actions]]\nname = \"create-tag\"\ntype = \"shell\"\ncommand = \"git tag -a v{{ version }} -m 'Release {{ version }} for {{ imbi_project.name }}'\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#complex-multi-line-commands","title":"Complex Multi-line Commands","text":"<pre><code>[[actions]]\nname = \"setup-and-test\"\ntype = \"shell\"\ncommand = \"\"\"\npython -m venv .venv &amp;&amp; \\\nsource .venv/bin/activate &amp;&amp; \\\npip install -e .[dev] &amp;&amp; \\\npytest tests/ --cov={{ imbi_project.slug }}\n\"\"\"\nworking_directory = \"{{ working_directory }}/repository\"\n</code></pre>"},{"location":"actions/shell/#conditional-execution","title":"Conditional Execution","text":"<pre><code>[[actions]]\nname = \"npm-install-if-needed\"\ntype = \"shell\"\ncommand = \"if [ -f package.json ]; then npm install; fi\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#ignore-failures","title":"Ignore Failures","text":"<pre><code>[[actions]]\nname = \"optional-linting\"\ntype = \"shell\"\ncommand = \"ruff check src/\"\nworking_directory = \"repository:///\"\nignore_failure = true  # Don't fail workflow if linting fails\n</code></pre>"},{"location":"actions/shell/#common-use-cases","title":"Common Use Cases","text":""},{"location":"actions/shell/#running-tests","title":"Running Tests","text":"<pre><code>[[actions]]\nname = \"run-python-tests\"\ntype = \"shell\"\ncommand = \"pytest tests/ -v --tb=short\"\nworking_directory = \"{{ working_directory }}/repository\"\n\n[[actions]]\nname = \"run-javascript-tests\"\ntype = \"shell\"\ncommand = \"npm test\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#building-artifacts","title":"Building Artifacts","text":"<pre><code>[[actions]]\nname = \"build-python-package\"\ntype = \"shell\"\ncommand = \"python -m build\"\nworking_directory = \"{{ working_directory }}/repository\"\n\n[[actions]]\nname = \"build-docker-image\"\ntype = \"shell\"\ncommand = \"docker build -t {{ imbi_project.slug }}:latest .\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#code-quality-tools","title":"Code Quality Tools","text":"<pre><code>[[actions]]\nname = \"run-linter\"\ntype = \"shell\"\ncommand = \"ruff check --fix src/\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"format-code\"\ntype = \"shell\"\ncommand = \"ruff format src/ tests/\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"type-check\"\ntype = \"shell\"\ncommand = \"mypy src/\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#git-operations","title":"Git Operations","text":"<pre><code>[[actions]]\nname = \"get-current-version\"\ntype = \"shell\"\ncommand = \"git describe --tags --abbrev=0\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"list-changed-files\"\ntype = \"shell\"\ncommand = \"git diff --name-only {{ starting_commit }} HEAD\"\nworking_directory = \"{{ working_directory }}/repository\"\n</code></pre>"},{"location":"actions/shell/#environment-setup","title":"Environment Setup","text":"<pre><code>[[actions]]\nname = \"setup-python-env\"\ntype = \"shell\"\ncommand = \"\"\"\npython -m venv .venv &amp;&amp; \\\n.venv/bin/pip install --upgrade pip setuptools wheel\n\"\"\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"setup-node-env\"\ntype = \"shell\"\ncommand = \"npm ci\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#advanced-template-examples","title":"Advanced Template Examples","text":""},{"location":"actions/shell/#using-imbi-project-data","title":"Using Imbi Project Data","text":"<pre><code>[[actions]]\nname = \"project-specific-command\"\ntype = \"shell\"\ncommand = \"\"\"\necho \"Processing {{ imbi_project.name }}\"\necho \"Type: {{ imbi_project.project_type }}\"\necho \"Namespace: {{ imbi_project.namespace }}\"\n\"\"\"\n</code></pre>"},{"location":"actions/shell/#conditional-logic-with-jinja2","title":"Conditional Logic with Jinja2","text":"<pre><code>[[actions]]\nname = \"environment-specific-deploy\"\ntype = \"shell\"\ncommand = \"\"\"\n{% if imbi_project.project_type == 'api' %}\n  python deploy_api.py\n{% elif imbi_project.project_type == 'consumer' %}\n  python deploy_consumer.py\n{% else %}\n  echo \"Unknown project type\"\n{% endif %}\n\"\"\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#using-project-facts","title":"Using Project Facts","text":"<pre><code>[[actions]]\nname = \"language-specific-test\"\ntype = \"shell\"\ncommand = \"\"\"\n{% if imbi_project.facts.get('Programming Language') == 'Python 3.12' %}\n  pytest tests/ --python=3.12\n{% elif imbi_project.facts.get('Programming Language') == 'Python 3.11' %}\n  pytest tests/ --python=3.11\n{% endif %}\n\"\"\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#iterating-over-lists","title":"Iterating Over Lists","text":"<pre><code>[[actions]]\nname = \"install-dependencies\"\ntype = \"shell\"\ncommand = \"\"\"\n{% for dep in dependencies %}\npip install {{ dep }}\n{% endfor %}\n\"\"\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#path-resolution","title":"Path Resolution","text":"<p>Working directory supports all ResourceUrl schemes:</p> <pre><code># Repository directory\n[[actions]]\ntype = \"shell\"\ncommand = \"ls -la\"\nworking_directory = \"repository:///\"\n\n# Workflow directory\n[[actions]]\ntype = \"shell\"\ncommand = \"cat templates/README.md\"\nworking_directory = \"workflow:///\"\n\n# Extracted files directory\n[[actions]]\ntype = \"shell\"\ncommand = \"find . -name '*.conf'\"\nworking_directory = \"extracted:///\"\n\n# Explicit working directory path\n[[actions]]\ntype = \"shell\"\ncommand = \"pwd\"\nworking_directory = \"{{ working_directory }}/repository\"\n</code></pre>"},{"location":"actions/shell/#command-output","title":"Command Output","text":""},{"location":"actions/shell/#captured-output","title":"Captured Output","text":"<ul> <li>stdout: Logged at DEBUG level</li> <li>stderr: Logged at DEBUG level</li> <li>Exit Code: Non-zero exit codes cause workflow failure (unless <code>ignore_failure = true</code>)</li> </ul>"},{"location":"actions/shell/#output-in-logs","title":"Output in Logs","text":"<pre><code># Logger output example:\nDEBUG: Executing shell command: pytest tests/ -v\nDEBUG: Command stdout: ===== test session starts =====\nDEBUG: Command stderr:\nDEBUG: Command exit code: 0\n</code></pre>"},{"location":"actions/shell/#error-handling","title":"Error Handling","text":""},{"location":"actions/shell/#exit-code-handling","title":"Exit Code Handling","text":"<pre><code># Fail workflow on error (default)\n[[actions]]\nname = \"critical-command\"\ntype = \"shell\"\ncommand = \"important-operation\"\n# Fails workflow if exit code != 0\n\n# Continue on error\n[[actions]]\nname = \"optional-command\"\ntype = \"shell\"\ncommand = \"optional-operation\"\nignore_failure = true  # Continues even if exit code != 0\n</code></pre>"},{"location":"actions/shell/#command-not-found","title":"Command Not Found","text":"<pre><code>[[actions]]\nname = \"missing-command\"\ntype = \"shell\"\ncommand = \"nonexistent-command\"\n# Raises RuntimeError: Command 'nonexistent-command' not found\n</code></pre>"},{"location":"actions/shell/#security-considerations","title":"Security Considerations","text":""},{"location":"actions/shell/#command-injection-prevention","title":"Command Injection Prevention","text":"<p>Template variables are NOT shell-escaped automatically. Be cautious with user-provided data:</p> <pre><code># UNSAFE - if imbi_project.name contains shell metacharacters\n[[actions]]\ntype = \"shell\"\ncommand = \"echo {{ imbi_project.name }}\"\n\n# SAFER - use quotes\n[[actions]]\ntype = \"shell\"\ncommand = \"echo '{{ imbi_project.name }}'\"\n\n# SAFEST - avoid untrusted input in shell commands\n</code></pre>"},{"location":"actions/shell/#environment-variables","title":"Environment Variables","text":"<p>Commands execute with the same environment as the workflow process:</p> <pre><code>[[actions]]\nname = \"use-env-var\"\ntype = \"shell\"\ncommand = \"echo $HOME &amp;&amp; echo $USER\"\n</code></pre>"},{"location":"actions/shell/#performance-tips","title":"Performance Tips","text":""},{"location":"actions/shell/#chaining-commands","title":"Chaining Commands","text":"<p>Use <code>&amp;&amp;</code> for dependent commands (fail fast): <pre><code>[[actions]]\ntype = \"shell\"\ncommand = \"cd repository &amp;&amp; make build &amp;&amp; make test\"\n</code></pre></p> <p>Use <code>;</code> for independent commands (always run all): <pre><code>[[actions]]\ntype = \"shell\"\ncommand = \"make clean; make build; make test\"\n</code></pre></p>"},{"location":"actions/shell/#background-processes","title":"Background Processes","text":"<p>Not recommended - commands block until completion. For long-running operations, consider using Docker actions instead.</p>"},{"location":"actions/shell/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Commands execute in a subprocess using asyncio</li> <li>Full shell features available (pipes, redirects, environment variables)</li> <li>Working directory resolved before command execution</li> <li>Template rendering occurs before command execution</li> <li>Timeout: Configurable (default varies by implementation)</li> <li>Shell: Uses system default shell (<code>/bin/sh</code> on Unix, <code>cmd.exe</code> on Windows)</li> </ul>"},{"location":"actions/template/","title":"Template Actions","text":"<p>Template actions render Jinja2 templates with full workflow context, enabling dynamic file generation for configurations, documentation, and code files.</p>"},{"location":"actions/template/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"template\"\nsource_path = \"template-file-or-directory\"\ndestination_path = \"output-location\"\n</code></pre>"},{"location":"actions/template/#fields","title":"Fields","text":""},{"location":"actions/template/#source_path-required","title":"source_path (required)","text":"<p>Path to template file or directory. Can be: - Single <code>.j2</code> template file - Directory containing <code>.j2</code> files (recursively rendered)</p> <p>Type: <code>ResourceUrl</code> (string path) Conventions: - Template files should use <code>.j2</code> extension - Directory paths should NOT include wildcards - Relative to working directory by default - Usually prefixed with <code>workflow:///</code> for workflow resources</p>"},{"location":"actions/template/#destination_path-required","title":"destination_path (required)","text":"<p>Output location for rendered templates.</p> <p>Type: <code>ResourceUrl</code> (string path) Behavior: - For single file: Output file path - For directory: Output directory (structure mirrored) - Parent directories created automatically - Existing files overwritten</p>"},{"location":"actions/template/#template-context","title":"Template Context","text":"<p>All templates have access to these variables:</p> Variable Type Description <code>workflow</code> <code>Workflow</code> Current workflow configuration <code>imbi_project</code> <code>ImbiProject</code> Complete Imbi project data <code>github_repository</code> <code>GitHubRepository</code> GitHub repo data (if applicable) <code>gitlab_project</code> <code>GitLabProject</code> GitLab project data (if applicable) <code>working_directory</code> <code>Path</code> Workflow execution directory <code>starting_commit</code> <code>str</code> Initial Git commit SHA"},{"location":"actions/template/#examples","title":"Examples","text":""},{"location":"actions/template/#single-file-template","title":"Single File Template","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"generate-readme\"\ntype = \"template\"\nsource_path = \"workflow:///templates/README.md.j2\"\ndestination_path = \"repository:///README.md\"\n</code></pre></p> <p>Template (<code>templates/README.md.j2</code>): <pre><code># {{ imbi_project.name }}\n\n{{ imbi_project.description }}\n\n## Project Information\n\n- **Type**: {{ imbi_project.project_type }}\n- **Namespace**: {{ imbi_project.namespace }}\n- **Imbi URL**: {{ imbi_project.imbi_url }}\n\n{% if github_repository %}\n## Repository\n\n- **GitHub**: {{ github_repository.html_url }}\n- **Default Branch**: {{ github_repository.default_branch }}\n{% endif %}\n\n## Installation\n\n```bash\npip install {{ imbi_project.slug }}\n</code></pre></p> <p>Generated by {{ workflow.configuration.name }} on {{ now() }} <pre><code>### Directory Template\n\n**Workflow config:**\n```toml\n[[actions]]\nname = \"render-configs\"\ntype = \"template\"\nsource_path = \"workflow:///templates/configs\"\ndestination_path = \"repository:///config/\"\n</code></pre></p> <p>Directory structure: <pre><code>workflow/templates/configs/\n\u251c\u2500\u2500 app.yaml.j2\n\u251c\u2500\u2500 database.yaml.j2\n\u2514\u2500\u2500 logging.yaml.j2\n</code></pre></p> <p>Result: <pre><code>repository/config/\n\u251c\u2500\u2500 app.yaml\n\u251c\u2500\u2500 database.yaml\n\u2514\u2500\u2500 logging.yaml\n</code></pre></p>"},{"location":"actions/template/#github-actions-workflow-template","title":"GitHub Actions Workflow Template","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"generate-ci-workflow\"\ntype = \"template\"\nsource_path = \"workflow:///ci-template.yml.j2\"\ndestination_path = \"repository:///.github/workflows/ci.yml\"\n</code></pre></p> <p>Template: <pre><code>name: CI\n\non:\n  push:\n    branches: [ {{ github_repository.default_branch }} ]\n  pull_request:\n    branches: [ {{ github_repository.default_branch }} ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      {% if imbi_project.facts.get('Programming Language', '').startswith('Python') %}\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: '{{ imbi_project.facts['Programming Language'].split()[-1] }}'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -e .[dev]\n\n      - name: Run tests\n        run: pytest tests/ -v\n      {% elif imbi_project.facts.get('Programming Language') == 'JavaScript' %}\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm test\n      {% endif %}\n</code></pre></p>"},{"location":"actions/template/#dockerfile-template","title":"Dockerfile Template","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"generate-dockerfile\"\ntype = \"template\"\nsource_path = \"workflow:///Dockerfile.j2\"\ndestination_path = \"repository:///Dockerfile\"\n</code></pre></p> <p>Template: <pre><code>{% set python_version = imbi_project.facts.get('Programming Language', 'Python 3.12').split()[-1] %}\nFROM python:{{ python_version }}-slim\n\nLABEL maintainer=\"{{ imbi_project.namespace }}\"\nLABEL project=\"{{ imbi_project.slug }}\"\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\n{% if imbi_project.project_type == 'api' %}\nCMD [\"uvicorn\", \"{{ imbi_project.slug }}.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n{% elif imbi_project.project_type == 'consumer' %}\nCMD [\"python\", \"-m\", \"{{ imbi_project.slug }}.consumer\"]\n{% else %}\nCMD [\"python\", \"-m\", \"{{ imbi_project.slug }}\"]\n{% endif %}\n</code></pre></p>"},{"location":"actions/template/#jinja2-template-features","title":"Jinja2 Template Features","text":""},{"location":"actions/template/#variables","title":"Variables","text":"<pre><code>{{ imbi_project.name }}\n{{ imbi_project.slug }}\n{{ workflow.configuration.name }}\n</code></pre>"},{"location":"actions/template/#conditionals","title":"Conditionals","text":"<pre><code>{% if imbi_project.project_type == 'api' %}\n  API-specific content\n{% elif imbi_project.project_type == 'consumer' %}\n  Consumer-specific content\n{% else %}\n  Default content\n{% endif %}\n</code></pre>"},{"location":"actions/template/#loops","title":"Loops","text":"<pre><code>{% for env in imbi_project.environments %}\n- {{ env.name }}: {{ env.url }}\n{% endfor %}\n</code></pre>"},{"location":"actions/template/#filters","title":"Filters","text":"<pre><code>{{ imbi_project.name | upper }}\n{{ imbi_project.slug | replace('-', '_') }}\n{{ imbi_project.description | truncate(100) }}\n</code></pre>"},{"location":"actions/template/#tests","title":"Tests","text":"<pre><code>{% if github_repository is defined %}\n  Has GitHub repository\n{% endif %}\n\n{% if imbi_project.facts %}\n  Has facts defined\n{% endif %}\n</code></pre>"},{"location":"actions/template/#comments","title":"Comments","text":"<pre><code>{# This is a comment - won't appear in output #}\n{{ imbi_project.name }}  {# inline comment #}\n</code></pre>"},{"location":"actions/template/#common-patterns","title":"Common Patterns","text":""},{"location":"actions/template/#configuration-file-generation","title":"Configuration File Generation","text":"<pre><code>[[actions]]\nname = \"generate-app-config\"\ntype = \"template\"\nsource_path = \"workflow:///app.yaml.j2\"\ndestination_path = \"repository:///config/app.yaml\"\n</code></pre> <p>Template: <pre><code>application:\n  name: {{ imbi_project.slug }}\n  type: {{ imbi_project.project_type }}\n\n{% if imbi_project.environments %}\nenvironments:\n{% for env in imbi_project.environments %}\n  {{ env.name }}:\n    url: {{ env.url }}\n    enabled: true\n{% endfor %}\n{% endif %}\n\ndatabase:\n  host: ${DB_HOST}\n  port: ${DB_PORT}\n  name: {{ imbi_project.slug | replace('-', '_') }}\n</code></pre></p>"},{"location":"actions/template/#multi-file-template-directory","title":"Multi-File Template Directory","text":"<pre><code>[[actions]]\nname = \"generate-all-configs\"\ntype = \"template\"\nsource_path = \"workflow:///templates\"\ndestination_path = \"repository:///config/\"\n</code></pre> <p>Template directory: <pre><code>workflow/templates/\n\u251c\u2500\u2500 app.yaml.j2\n\u251c\u2500\u2500 database.yaml.j2\n\u251c\u2500\u2500 logging.yaml.j2\n\u2514\u2500\u2500 monitoring.yaml.j2\n</code></pre></p>"},{"location":"actions/template/#documentation-generation","title":"Documentation Generation","text":"<pre><code>[[actions]]\nname = \"generate-docs\"\ntype = \"template\"\nsource_path = \"workflow:///docs\"\ndestination_path = \"repository:///docs/\"\n</code></pre> <p>Template: <pre><code># {{ imbi_project.name }} Documentation\n\n## Overview\n{{ imbi_project.description }}\n\n## Quick Start\n\n### Installation\n```bash\npip install {{ imbi_project.slug }}\n</code></pre></p>"},{"location":"actions/template/#usage","title":"Usage","text":"<pre><code>from {{ imbi_project.slug | replace('-', '_') }} import main\n\nmain()\n</code></pre>"},{"location":"actions/template/#api-reference","title":"API Reference","text":"<p>{% if imbi_project.project_type == 'api' %} The API is available at: <code>https://{{ imbi_project.slug }}.example.com/api</code> {% endif %}</p>"},{"location":"actions/template/#contributing","title":"Contributing","text":"<p>Contributions welcome! See CONTRIBUTING.md in the repository for details.</p> <p>Generated from template by {{ workflow.configuration.name }} <pre><code>## Advanced Templates\n\n### Accessing Nested Data\n\n```jinja2\n{# Access project facts #}\n{% if 'Programming Language' in imbi_project.facts %}\nLanguage: {{ imbi_project.facts['Programming Language'] }}\n{% endif %}\n\n{# Access GitHub repository details #}\n{% if github_repository %}\nStars: {{ github_repository.stargazers_count }}\nForks: {{ github_repository.forks_count }}\n{% endif %}\n</code></pre></p>"},{"location":"actions/template/#template-inheritance","title":"Template Inheritance","text":"<p>Base template (<code>base.j2</code>): <pre><code># {{ imbi_project.name }}\n\n{% block content %}\nDefault content\n{% endblock %}\n\n---\nGenerated by {{ workflow.configuration.name }}\n</code></pre></p> <p>Child template (<code>readme.j2</code>): <pre><code>{% extends \"base.j2\" %}\n\n{% block content %}\n## Description\n{{ imbi_project.description }}\n\n## Installation\npip install {{ imbi_project.slug }}\n{% endblock %}\n</code></pre></p>"},{"location":"actions/template/#macros","title":"Macros","text":"<pre><code>{% macro render_environment(env) %}\n## {{ env.name | title }}\n- URL: {{ env.url }}\n- Active: {{ env.active | default(true) }}\n{% endmacro %}\n\n# Environments\n\n{% for env in imbi_project.environments %}\n{{ render_environment(env) }}\n{% endfor %}\n</code></pre>"},{"location":"actions/template/#custom-filters","title":"Custom Filters","text":"<pre><code>{# Convert kebab-case to snake_case #}\n{{ imbi_project.slug | replace('-', '_') }}\n\n{# Convert to SCREAMING_SNAKE_CASE #}\n{{ imbi_project.slug | replace('-', '_') | upper }}\n\n{# Truncate long descriptions #}\n{{ imbi_project.description | truncate(100, True, '...') }}\n</code></pre>"},{"location":"actions/template/#path-resolution","title":"Path Resolution","text":"<p>Both source and destination support ResourceUrl schemes:</p> <pre><code># Workflow templates to repository\n[[actions]]\ntype = \"template\"\nsource_path = \"workflow:///templates/\"\ndestination_path = \"repository:///config/\"\n\n# Specific file paths\n[[actions]]\ntype = \"template\"\nsource_path = \"workflow:///README.md.j2\"\ndestination_path = \"repository:///README.md\"\n\n# Extracted data with templates\n[[actions]]\ntype = \"template\"\nsource_path = \"workflow:///process-extracted.j2\"\ndestination_path = \"extracted:///processed/output.txt\"\n</code></pre>"},{"location":"actions/template/#error-handling","title":"Error Handling","text":"<p>Template actions raise errors for: - Missing source: Source file/directory doesn't exist - Template syntax errors: Invalid Jinja2 syntax - Undefined variables: Referenced variables not in context - I/O errors: Permission denied, disk full, etc.</p>"},{"location":"actions/template/#handling-undefined-variables","title":"Handling Undefined Variables","text":"<p>Strict mode (default - raises error): <pre><code>{{ undefined_variable }}  {# Raises error #}\n</code></pre></p> <p>Graceful fallback: <pre><code>{{ undefined_variable | default('fallback value') }}\n{{ undefined_variable | default('') }}\n</code></pre></p> <p>Check before use: <pre><code>{% if undefined_variable is defined %}\n  {{ undefined_variable }}\n{% endif %}\n</code></pre></p>"},{"location":"actions/template/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Templates rendered using Jinja2 with StrictUndefined by default</li> <li><code>.j2</code> extension automatically removed from output filenames</li> <li>Directory rendering is recursive</li> <li>Existing files overwritten without warning</li> <li>Parent directories created automatically</li> <li>File permissions preserved from template files</li> <li>Template context is immutable during rendering</li> <li>All Jinja2 built-in filters and tests available</li> </ul>"},{"location":"actions/template/#best-practices","title":"Best Practices","text":"<ol> <li>Use <code>.j2</code> extension: Makes templates easily identifiable</li> <li>Provide defaults: Use <code>| default()</code> for optional values</li> <li>Check existence: Test <code>is defined</code> before accessing optional data</li> <li>Document templates: Add comments explaining template logic</li> <li>Test templates: Verify output with sample data before production</li> <li>Version control: Keep templates in workflow resources</li> <li>Validate output: Use shell actions to validate generated configs</li> </ol>"},{"location":"actions/utility/","title":"Utility Actions","text":"<p>Utility actions provide helper operations for common workflow patterns like logging, state management, and flow control.</p>"},{"location":"actions/utility/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"utility\"\noperation = \"log|wait|skip\"\n# Operation-specific fields\n</code></pre>"},{"location":"actions/utility/#operations","title":"Operations","text":""},{"location":"actions/utility/#log","title":"log","text":"<p>Log messages during workflow execution.</p> <p>Fields: - <code>message</code>: Message to log (supports templates) - <code>level</code>: Log level (<code>debug</code>, <code>info</code>, <code>warning</code>, <code>error</code>)</p> <p>Example: <pre><code>[[actions]]\nname = \"log-progress\"\ntype = \"utility\"\noperation = \"log\"\nmessage = \"Processing {{ imbi_project.name }}\"\nlevel = \"info\"\n</code></pre></p>"},{"location":"actions/utility/#wait","title":"wait","text":"<p>Pause workflow execution for a specified duration.</p> <p>Fields: - <code>seconds</code>: Duration to wait</p> <p>Example: <pre><code>[[actions]]\nname = \"rate-limit-pause\"\ntype = \"utility\"\noperation = \"wait\"\nseconds = 5\n</code></pre></p>"},{"location":"actions/utility/#skip","title":"skip","text":"<p>Conditionally skip subsequent actions.</p> <p>Fields: - <code>condition</code>: Jinja2 expression evaluating to boolean</p> <p>Example: <pre><code>[[actions]]\nname = \"skip-if-api\"\ntype = \"utility\"\noperation = \"skip\"\ncondition = \"{{ imbi_project.project_type == 'api' }}\"\n</code></pre></p>"},{"location":"actions/utility/#common-use-cases","title":"Common Use Cases","text":""},{"location":"actions/utility/#progress-logging","title":"Progress Logging","text":"<pre><code>[[actions]]\nname = \"log-start\"\ntype = \"utility\"\noperation = \"log\"\nmessage = \"Starting transformation for {{ imbi_project.slug }}\"\nlevel = \"info\"\n\n[[actions]]\nname = \"transform\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/transform.md\"\n\n[[actions]]\nname = \"log-complete\"\ntype = \"utility\"\noperation = \"log\"\nmessage = \"Completed transformation\"\nlevel = \"info\"\n</code></pre>"},{"location":"actions/utility/#rate-limiting","title":"Rate Limiting","text":"<pre><code>[[actions]]\nname = \"api-call\"\ntype = \"callable\"\nclient = \"github\"\nmethod = \"create_pull_request\"\nkwargs = {}\n\n[[actions]]\nname = \"rate-limit-wait\"\ntype = \"utility\"\noperation = \"wait\"\nseconds = 2\n</code></pre>"},{"location":"actions/utility/#conditional-workflow","title":"Conditional Workflow","text":"<pre><code>[[actions]]\nname = \"check-type\"\ntype = \"utility\"\noperation = \"skip\"\ncondition = \"{{ imbi_project.project_type not in ['api', 'consumer'] }}\"\n\n[[actions]]\nname = \"api-specific-action\"\ntype = \"shell\"\ncommand = \"deploy-api.sh\"\n</code></pre>"},{"location":"actions/utility/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Utility actions don't modify files or repositories</li> <li>Log messages output to workflow logger</li> <li>Wait operations are non-blocking for other workflows</li> <li>Skip conditions evaluated at runtime</li> </ul>"}]}