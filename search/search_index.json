{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Imbi Automations CLI","text":"<p>A comprehensive CLI framework for executing automated workflows across software project repositories with AI-powered transformations and deep integration to the Imbi project management system.</p>"},{"location":"#overview","title":"Overview","text":"<p>Imbi Automations enables bulk automation across your software projects with intelligent targeting, conditional execution, and powerful transformation capabilities. Built on a modern async Python architecture, it provides seamless integration with GitHub, GitLab, and the Imbi project management platform.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Multi-Provider Support: Native GitHub and GitLab API integration</li> <li>AI-Powered Transformations: Claude Code SDK for intelligent code changes</li> <li>Advanced Filtering: Target specific project subsets with multiple criteria</li> <li>Conditional Execution: Smart workflow execution based on repository state</li> <li>Batch Processing: Concurrent processing with resumption capabilities</li> <li>Template System: Jinja2-based file generation with full project context</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":"<p>Across all of your software projects and repositories, Imbi Automations can automate the following tasks:</p> <ul> <li>Project Updates: Upgrade projects to the latest syntax, update dependencies, and fix CI/CD pipelines</li> <li>Project Migrations: Convert all projects from a language like JavaScript to TypeScript</li> <li>Standards Compliance: Identify and report on places where project standards are not being followed</li> <li>Project Analysis: Update Imbi Project Facts based on project analysis results</li> <li>Code Quality Improvements: Apply linting, formatting, and pre-commit hooks</li> <li>Infrastructure Updates: Modernize project configurations and tooling</li> <li>Project Reviews: Automated code reviews and code quality analysis</li> <li>Security Updates: Update dependencies with security patches</li> <li>Software Upgrades: Upgrade projects to newer software versions</li> </ul>"},{"location":"#action-types","title":"Action Types","text":"<p>The framework supports multiple transformation types:</p> <ul> <li>Callable Actions: Direct API method calls with dynamic parameters</li> <li>Claude Code Integration: Complex multi-file analysis and AI transformations</li> <li>Docker Operations: Container-based file extraction and manipulation</li> <li>File Actions: Copy, move, delete, and regex replacement operations</li> <li>Git Operations: Extract files from previous commits, clone repositories, etc.</li> <li>Imbi Actions: Update project facts</li> <li>Shell Commands: Execute arbitrary commands with template variables</li> <li>Utility Actions: Helper operations for common workflow patterns</li> </ul>"},{"location":"#installation","title":"Installation","text":""},{"location":"#from-pypi","title":"From PyPI","text":"<pre><code>pip install imbi-automations\n</code></pre>"},{"location":"#development-installation","title":"Development Installation","text":"<pre><code>git clone &lt;repository-url&gt;\ncd imbi-automations-cli\npip install -e .[dev]\npre-commit install\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#1-configuration","title":"1. Configuration","text":"<p>Create a <code>config.toml</code> file with your API credentials:</p> <pre><code>[github]\napi_key = \"ghp_your_github_token\"\nhostname = \"github.com\"  # Optional, defaults to github.com\n\n[imbi]\napi_key = \"your-imbi-api-key\"\nhostname = \"imbi.example.com\"\n\n[claude_code]\nexecutable = \"claude\"  # Optional, defaults to 'claude'\n</code></pre>"},{"location":"#2-run-a-workflow","title":"2. Run a Workflow","text":"<p>Execute workflows across all your projects:</p> <pre><code># Run a specific workflow\nimbi-automations config.toml workflows/workflow-name --all-projects\n\n# Resume from a specific project (useful for large batches)\nimbi-automations config.toml workflows/workflow-name --all-projects --start-from-project my-project-slug\n</code></pre>"},{"location":"#3-available-workflows","title":"3. Available Workflows","text":"<p>The tool includes 25+ pre-built workflows for common tasks:</p> <ul> <li>Python Version Updates: Upgrade projects to newer Python versions</li> <li>Docker Image Updates: Update base images and dependencies</li> <li>GitHub Actions: Fix and optimize CI/CD pipelines</li> <li>Code Quality: Apply linting, formatting, and pre-commit hooks</li> <li>Infrastructure Updates: Modernize project configurations and tooling</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Architecture Guide: Comprehensive technical documentation</li> <li>Workflow Configuration: Creating and running workflows</li> <li>Workflow Actions: Complete action types reference</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.12 or higher</li> <li>Imbi project management system access</li> <li>GitHub API access (for GitHub workflows)</li> <li>GitLab API access (for GitLab workflows)</li> </ul>"},{"location":"architecture/","title":"Architecture Guide","text":"<p>This guide provides a comprehensive overview of the Imbi Automations CLI architecture, components, and implementation patterns.</p>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>Imbi Automations is built on a modern async Python architecture designed for scalability, maintainability, and extensibility. The system follows a modular design with clear separation of concerns between different layers.</p>"},{"location":"architecture/#core-architecture-principles","title":"Core Architecture Principles","text":"<ul> <li>Async-First: Full async/await implementation with concurrent processing</li> <li>Modular Design: Clean separation between clients, models, and business logic</li> <li>Type Safety: Comprehensive type hints throughout the codebase</li> <li>Configuration-Driven: TOML-based workflows with Pydantic validation</li> <li>Extensible: Plugin-ready architecture for new action types and providers</li> </ul>"},{"location":"architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"architecture/#primary-components","title":"Primary Components","text":""},{"location":"architecture/#cli-interface-clipy","title":"CLI Interface (<code>cli.py</code>)","text":"<p>The entry point for the application, responsible for: - Command-line argument parsing and validation - Colored logging configuration with different levels - Workflow validation and loading - Error handling and user feedback</p>"},{"location":"architecture/#controller-controllerpy","title":"Controller (<code>controller.py</code>)","text":"<p>Main automation controller implementing the iterator pattern: - Project iteration and filtering - Workflow orchestration across multiple targets - Concurrent processing with proper resource management - Progress tracking and resumption capabilities</p>"},{"location":"architecture/#workflow-engine-enginepy","title":"Workflow Engine (<code>engine.py</code>)","text":"<p>Core execution engine that handles: - Action execution with context management - Temporary directory handling for repository operations - Error recovery and action restart mechanisms - Template variable resolution with Jinja2 - Comprehensive logging and status reporting</p>"},{"location":"architecture/#client-layer","title":"Client Layer","text":"<p>The client layer provides abstraction for external service interactions:</p>"},{"location":"architecture/#http-client-clientshttppy","title":"HTTP Client (<code>clients/http.py</code>)","text":"<p>Base async HTTP client with: - Authentication handling for various providers - Automatic retry logic with exponential backoff - Request/response logging with credential sanitization - Error handling and timeout management</p>"},{"location":"architecture/#imbi-client-clientsimbipy","title":"Imbi Client (<code>clients/imbi.py</code>)","text":"<p>Integration with Imbi project management system: - Project data retrieval and filtering - Environment and metadata synchronization - Fact validation and updates - Pagination handling for large datasets</p>"},{"location":"architecture/#github-client-clientsgithubpy","title":"GitHub Client (<code>clients/github.py</code>)","text":"<p>GitHub API integration featuring: - Repository and organization operations - Pattern-aware workflow file detection - Environment management - Pull request creation and management - Rate limiting and API quota management</p>"},{"location":"architecture/#gitlab-client-clientsgitlabpy","title":"GitLab Client (<code>clients/gitlab.py</code>)","text":"<p>GitLab API integration for: - Project and group operations - Repository cloning and management - Pipeline and CI/CD integration - Merge request handling</p>"},{"location":"architecture/#data-models","title":"Data Models","text":"<p>All models use Pydantic for validation and type safety:</p>"},{"location":"architecture/#configuration-models-modelsconfigurationpy","title":"Configuration Models (<code>models/configuration.py</code>)","text":"<ul> <li>TOML-based configuration with secret handling</li> <li>Provider-specific settings (GitHub, GitLab, Imbi)</li> <li>Claude Code SDK integration settings</li> <li>Validation rules and default values</li> </ul>"},{"location":"architecture/#workflow-models-modelsworkflowpy","title":"Workflow Models (<code>models/workflow.py</code>)","text":"<p>Comprehensive workflow definition including:</p> <ul> <li>Actions: Sequence of operations with type validation</li> <li>Conditions: Repository state requirements (local and remote)</li> <li>Filters: Project targeting and selection criteria</li> <li>Templates: Jinja2 template configurations</li> </ul>"},{"location":"architecture/#provider-models","title":"Provider Models","text":"<ul> <li>GitHub Models (<code>models/github.py</code>): Repository, organization, and API response models</li> <li>GitLab Models (<code>models/gitlab.py</code>): Project, group, and API response models</li> <li>Imbi Models (<code>models/imbi.py</code>): Project management system models</li> </ul>"},{"location":"architecture/#supporting-components","title":"Supporting Components","text":""},{"location":"architecture/#git-operations-gitpy","title":"Git Operations (<code>git.py</code>)","text":"<p>Comprehensive Git integration:</p> <ul> <li>Repository cloning with authentication</li> <li>Branch management and switching</li> <li>Commit creation and history management</li> <li>Tag and version handling</li> <li>Conflict resolution strategies</li> </ul>"},{"location":"architecture/#file-actions-file_actionspy","title":"File Actions (<code>file_actions.py</code>)","text":"<p>File manipulation operations:</p> <ul> <li>Copy, move, and delete operations</li> <li>Regex-based content replacement</li> <li>Template file processing</li> <li>Directory structure management</li> <li>Backup and restore capabilities</li> </ul>"},{"location":"architecture/#shell-integration-shellpy","title":"Shell Integration (<code>shell.py</code>)","text":"<p>Command execution with:</p> <ul> <li>Template variable substitution</li> <li>Environment variable management</li> <li>Output capture and logging</li> <li>Error handling and exit code processing</li> <li>Timeout and resource management</li> </ul>"},{"location":"architecture/#condition-checker-condition_checkerpy","title":"Condition Checker (<code>condition_checker.py</code>)","text":"<p>Workflow condition evaluation:</p> <ul> <li>Local file system checks (post-clone)</li> <li>Remote repository checks via API (pre-clone)</li> <li>Regex pattern matching</li> <li>Performance optimization with early filtering</li> </ul>"},{"location":"architecture/#docker-integration-dockerpy","title":"Docker Integration (<code>docker.py</code>)","text":""},{"location":"architecture/#container-operations-for","title":"Container operations for:","text":"<ul> <li>Image extraction and analysis</li> <li>File extraction from containers</li> <li>Dockerfile parsing and manipulation</li> <li>Registry operations</li> </ul>"},{"location":"architecture/#workflow-system","title":"Workflow System","text":""},{"location":"architecture/#workflow-structure","title":"Workflow Structure","text":"<p>Workflows are defined in TOML configuration files with three main sections:</p> <pre><code># Project filtering\n[filter]\nproject_ids = [123, 456]\nproject_types = [\"apis\", \"consumers\"]\nrequires_github_identifier = true\n\n# Execution conditions\n[[conditions]]\nremote_file_exists = \"package.json\"\n\n[[conditions]]\nfile_contains = \"python.*3\\\\.12\"\nfile = \"pyproject.toml\"\n\n# Action sequence\n[[actions]]\nname = \"update-dependencies\"\ntype = \"claude\"\n# ... action configuration\n</code></pre>"},{"location":"architecture/#action-types","title":"Action Types","text":""},{"location":"architecture/#1-callable-actions","title":"1. Callable Actions","text":"<p>Direct method calls on client instances: <pre><code>[[actions]]\ntype = \"callable\"\n[actions.value]\nclient = \"github\"\nmethod = \"create_pull_request\"\n[actions.value.kwargs]\ntitle = \"{{ workflow_name }}\"\nbody = \"Automated update\"\n</code></pre></p>"},{"location":"architecture/#2-claude-code-integration","title":"2. Claude Code Integration","text":"<p>AI-powered transformations: <pre><code>[[actions]]\ntype = \"claude\"\n[actions.value]\nprompt_file = \"prompts/update-readme.md\"\ncontext = \"project_context\"\n</code></pre></p>"},{"location":"architecture/#3-file-operations","title":"3. File Operations","text":"<p>Direct file manipulation: <pre><code>[[actions]]\ntype = \"file\"\n[actions.value]\noperation = \"regex_replace\"\nfile = \"README.md\"\npattern = \"Version: \\\\d+\\\\.\\\\d+\\\\.\\\\d+\"\nreplacement = \"Version: {{ new_version }}\"\n</code></pre></p>"},{"location":"architecture/#4-shell-commands","title":"4. Shell Commands","text":"<p>Arbitrary command execution: <pre><code>[[actions]]\ntype = \"shell\"\n[actions.value]\ncommand = \"python -m pytest tests/\"\nworking_directory = \"{{ repository_path }}\"\n</code></pre></p>"},{"location":"architecture/#condition-system","title":"Condition System","text":""},{"location":"architecture/#remote-conditions-pre-clone","title":"Remote Conditions (Pre-Clone)","text":"<p>Evaluated using provider APIs before repository cloning:</p> <ul> <li>Performance Benefit: Skip cloning for non-matching repositories</li> <li>Bandwidth Efficient: Reduce network usage for large batch operations</li> <li>Early Filtering: Fail fast before expensive operations</li> </ul> <pre><code>[[conditions]]\nremote_file_exists = \".github/workflows/ci.yml\"\n\n[[conditions]]\nremote_file_contains = \"python.*3\\\\.[0-9]+\"\nremote_file = \"pyproject.toml\"\n</code></pre>"},{"location":"architecture/#local-conditions-post-clone","title":"Local Conditions (Post-Clone)","text":"<p>Evaluated after repository cloning for complex analysis:</p> <ul> <li>Full Access: Complete repository content available</li> <li>Complex Patterns: Multi-file analysis and cross-references</li> <li>File Content Analysis: Deep inspection of file contents</li> </ul> <pre><code>[[conditions]]\nfile_exists = \"docker-compose.yml\"\n\n[[conditions]]\nfile_contains = \"FROM python:3\\\\.[0-9]+\"\nfile = \"Dockerfile\"\n</code></pre>"},{"location":"architecture/#template-system","title":"Template System","text":"<p>Jinja2-based template engine with full project context:</p>"},{"location":"architecture/#available-variables","title":"Available Variables","text":"<ul> <li><code>{{ imbi_project }}</code>: Complete Imbi project data</li> <li><code>{{ github_repository }}</code>: GitHub repository information</li> <li><code>{{ workflow_name }}</code>: Current workflow identifier</li> <li><code>{{ repository_path }}</code>: Local repository path</li> <li><code>{{ timestamp }}</code>: Execution timestamp</li> </ul>"},{"location":"architecture/#template-files","title":"Template Files","text":"<pre><code># Pull Request Template\n## Summary\nUpdating {{ imbi_project.name }} to use Python {{ target_version }}\n\n## Changes\n- Updated pyproject.toml Python version requirement\n- Modified GitHub Actions workflow\n- Updated Dockerfile base image\n\nGenerated by: {{ workflow_name }}\nDate: {{ timestamp }}\n</code></pre>"},{"location":"architecture/#error-handling-and-recovery","title":"Error Handling and Recovery","text":""},{"location":"architecture/#action-restart-mechanism","title":"Action Restart Mechanism","text":"<p>Actions support automatic restart on failure: <pre><code>[[actions]]\nname = \"fragile-operation\"\non_failure = \"cleanup-action\"  # Restart from this action\nmax_retries = 3\n</code></pre></p>"},{"location":"architecture/#failure-indication","title":"Failure Indication","text":"<ul> <li>Failure Files: Create specific failure files to signal workflow abortion</li> <li>Detailed Logging: Include actionable error information</li> <li>Recovery Strategies: Configurable retry and rollback mechanisms</li> </ul>"},{"location":"architecture/#resource-management","title":"Resource Management","text":"<ul> <li>Temporary Directory Cleanup: Automatic cleanup on success or failure</li> <li>Connection Pooling: Efficient HTTP connection reuse</li> <li>Memory Management: LRU caching for expensive operations</li> </ul>"},{"location":"architecture/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"architecture/#concurrent-processing","title":"Concurrent Processing","text":"<ul> <li>Batch Operations: Process multiple projects concurrently</li> <li>Connection Pooling: Reuse HTTP connections across requests</li> <li>Async Operations: Non-blocking I/O throughout the system</li> </ul>"},{"location":"architecture/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>LRU Caching: Cache expensive API calls and computations</li> <li>Repository State: Cache repository metadata between operations</li> <li>Template Compilation: Pre-compile Jinja2 templates</li> </ul>"},{"location":"architecture/#early-filtering","title":"Early Filtering","text":"<ul> <li>Remote Conditions: Filter projects before cloning</li> <li>Project Filtering: Apply filters before workflow execution</li> <li>Resumption: Skip already processed projects</li> </ul>"},{"location":"architecture/#testing-architecture","title":"Testing Architecture","text":""},{"location":"architecture/#test-infrastructure","title":"Test Infrastructure","text":"<ul> <li>Base Class: <code>AsyncTestCase</code> for async test support</li> <li>HTTP Mocking: <code>httpx.MockTransport</code> with JSON fixtures</li> <li>Test Isolation: Clean state between test runs</li> <li>Coverage Requirements: Comprehensive test coverage with exclusions</li> </ul>"},{"location":"architecture/#mock-data-strategy","title":"Mock Data Strategy","text":"<ul> <li>Path-Based Fixtures: JSON files matching URL patterns</li> <li>Realistic Data: Production-like test data</li> <li>Edge Cases: Comprehensive error condition testing</li> </ul>"},{"location":"architecture/#integration-testing","title":"Integration Testing","text":"<ul> <li>End-to-End Workflows: Complete workflow execution tests</li> <li>Provider Integration: Real API integration tests (optional)</li> <li>Performance Testing: Load and concurrency testing</li> </ul>"},{"location":"architecture/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/#credential-management","title":"Credential Management","text":"<ul> <li>Secret Strings: Automatic credential masking in logs</li> <li>Configuration Validation: Secure handling of API keys</li> <li>Environment Variables: Support for environment-based configuration</li> </ul>"},{"location":"architecture/#api-security","title":"API Security","text":"<ul> <li>Authentication: Proper token and key management</li> <li>Rate Limiting: Respect provider API limits</li> <li>SSL/TLS: Secure communication with all external services</li> </ul>"},{"location":"architecture/#repository-security","title":"Repository Security","text":"<ul> <li>Temporary Directories: Secure cleanup of cloned repositories</li> <li>File Permissions: Proper permission handling</li> <li>Branch Protection: Safe branch and tag operations</li> </ul>"},{"location":"architecture/#extensibility","title":"Extensibility","text":""},{"location":"architecture/#adding-new-action-types","title":"Adding New Action Types","text":"<ol> <li>Create action handler in appropriate module</li> <li>Add action type to workflow model validation</li> <li>Implement action execution logic</li> <li>Add comprehensive tests</li> </ol>"},{"location":"architecture/#adding-new-providers","title":"Adding New Providers","text":"<ol> <li>Implement client interface in <code>clients/</code></li> <li>Create provider-specific models</li> <li>Add configuration support</li> <li>Implement authentication and API integration</li> </ol>"},{"location":"architecture/#custom-workflows","title":"Custom Workflows","text":"<ol> <li>Create workflow directory structure</li> <li>Define <code>config.toml</code> with actions and conditions</li> <li>Add template files if needed</li> <li>Test with target projects</li> </ol> <p>This architecture provides a solid foundation for scalable automation across software projects while maintaining flexibility for future enhancements and integrations.</p>"},{"location":"cli/","title":"Command-Line Interface","text":"<p>Imbi Automations provides a comprehensive CLI for executing workflows across projects with flexible targeting, concurrency control, and debugging capabilities.</p>"},{"location":"cli/#basic-usage","title":"Basic Usage","text":"<pre><code>imbi-automations CONFIG WORKFLOW [OPTIONS]\n</code></pre> <p>Arguments: - <code>CONFIG</code>: Path to configuration TOML file - <code>WORKFLOW</code>: Path to workflow directory containing config.toml</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-python --all-projects\n</code></pre></p>"},{"location":"cli/#complete-syntax","title":"Complete Syntax","text":"<pre><code>imbi-automations [-h] [-V] [--debug] [-v]\n                 [--max-concurrency N]\n                 [--exit-on-error]\n                 [--preserve-on-error]\n                 [--error-dir DIR]\n                 [--start-from-project ID_OR_SLUG]\n                 (--project-id ID |\n                  --project-type SLUG |\n                  --all-projects |\n                  --github-repository URL |\n                  --github-organization ORG |\n                  --all-github-repositories |\n                  --gitlab-repository URL |\n                  --gitlab-group GROUP |\n                  --all-gitlab-repositories)\n                 CONFIG WORKFLOW\n</code></pre>"},{"location":"cli/#positional-arguments","title":"Positional Arguments","text":""},{"location":"cli/#config","title":"CONFIG","text":"<p>Path to configuration file containing API credentials and settings.</p> <p>Type: File path Format: TOML file</p> <p>Required: Yes</p> <p>Example: <pre><code>imbi-automations config.toml workflows/my-workflow --all-projects\nimbi-automations /etc/imbi/prod.toml workflows/deploy --all-projects\n</code></pre></p> <p>See Also: Configuration Documentation</p>"},{"location":"cli/#workflow","title":"WORKFLOW","text":"<p>Path to workflow directory containing <code>config.toml</code>.</p> <p>Type: Directory path Required: Yes Must Contain: <code>config.toml</code> file</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-python --all-projects\nimbi-automations config.toml ./my-workflow --project-id 123\n</code></pre></p> <p>Structure: <pre><code>workflows/my-workflow/\n\u251c\u2500\u2500 config.toml          # Required\n\u251c\u2500\u2500 prompts/             # Optional\n\u2502   \u2514\u2500\u2500 prompt.md\n\u2514\u2500\u2500 templates/           # Optional\n    \u2514\u2500\u2500 template.j2\n</code></pre></p>"},{"location":"cli/#targeting-options","title":"Targeting Options","text":"<p>Exactly one targeting option is required to specify which projects/repositories to process.</p>"},{"location":"cli/#-project-id-id","title":"--project-id ID","text":"<p>Process a single Imbi project by ID.</p> <p>Type: Integer Use Case: Testing workflows on specific project</p> <p>Example: <pre><code>imbi-automations config.toml workflows/fix-config --project-id 123\n</code></pre></p> <p>Output: <pre><code>Processing: my-project (123)\n\u2713 Completed: my-project\n</code></pre></p>"},{"location":"cli/#-project-type-slug","title":"--project-type SLUG","text":"<p>Process all Imbi projects of a specific type.</p> <p>Type: String (project type slug) Use Case: Target specific project categories</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-apis --project-type api\n</code></pre></p> <p>Common Project Types: - <code>api</code> - API services - <code>consumer</code> - Message consumers - <code>scheduled-job</code> - Scheduled tasks - <code>frontend</code> - Frontend applications - <code>library</code> - Shared libraries</p> <p>Output: <pre><code>Found 47 projects of type 'api'\nProcessing: api-service-1 (123)\nProcessing: api-service-2 (124)\n...\nCompleted: 45/47 projects successful\n</code></pre></p>"},{"location":"cli/#-all-projects","title":"--all-projects","text":"<p>Process all projects in Imbi.</p> <p>Type: Flag (boolean) Use Case: Batch updates across entire organization</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-deps --all-projects\n</code></pre></p> <p>Output: <pre><code>Found 664 total projects\nProcessing 664 projects...\n\u2713 Completed: 650/664 successful\n</code></pre></p> <p>Warning: This processes ALL projects. Use with caution and test workflow first with <code>--project-id</code>.</p>"},{"location":"cli/#-github-repository-url","title":"--github-repository URL","text":"<p>Process a single GitHub repository by URL.</p> <p>Type: URL string Format: <code>https://github.com/org/repo</code> or <code>org/repo</code></p> <p>Use Case: Target specific GitHub repository</p> <p>Example: <pre><code>imbi-automations config.toml workflows/fix-actions \\\n  --github-repository https://github.com/myorg/myrepo\n</code></pre></p> <p>Accepted Formats: <pre><code>--github-repository https://github.com/org/repo\n--github-repository github.com/org/repo\n--github-repository org/repo\n</code></pre></p>"},{"location":"cli/#-github-organization-org","title":"--github-organization ORG","text":"<p>Process all repositories in a GitHub organization.</p> <p>Type: String (organization name) Use Case: Update all repos in an organization</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-workflows \\\n  --github-organization myorg\n</code></pre></p> <p>Output: <pre><code>Found 32 repositories in organization 'myorg'\nProcessing: myorg/repo1\nProcessing: myorg/repo2\n...\nCompleted: 30/32 successful\n</code></pre></p>"},{"location":"cli/#-all-github-repositories","title":"--all-github-repositories","text":"<p>Process all GitHub repositories across all organizations.</p> <p>Type: Flag (boolean) Use Case: Organization-wide GitHub updates</p> <p>Example: <pre><code>imbi-automations config.toml workflows/security-update \\\n  --all-github-repositories\n</code></pre></p> <p>Note: Discovers repositories from all organizations the API key has access to.</p>"},{"location":"cli/#-gitlab-repository-url","title":"--gitlab-repository URL","text":"<p>Process a single GitLab repository by URL.</p> <p>Type: URL string Format: <code>https://gitlab.com/group/project</code></p> <p>Use Case: Target specific GitLab project</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-ci \\\n  --gitlab-repository https://gitlab.com/mygroup/myproject\n</code></pre></p>"},{"location":"cli/#-gitlab-group-group","title":"--gitlab-group GROUP","text":"<p>Recursively process all repositories in a GitLab group.</p> <p>Type: String (group path) Use Case: Update all projects in a GitLab group</p> <p>Example: <pre><code>imbi-automations config.toml workflows/update-deps \\\n  --gitlab-group mygroup/subgroup\n</code></pre></p> <p>Note: Processes group and all subgroups recursively.</p>"},{"location":"cli/#-all-gitlab-repositories","title":"--all-gitlab-repositories","text":"<p>Process all GitLab repositories across all accessible groups.</p> <p>Type: Flag (boolean) Use Case: Organization-wide GitLab updates</p> <p>Example: <pre><code>imbi-automations config.toml workflows/security-scan \\\n  --all-gitlab-repositories\n</code></pre></p>"},{"location":"cli/#execution-control-options","title":"Execution Control Options","text":""},{"location":"cli/#-start-from-project-id_or_slug","title":"--start-from-project ID_OR_SLUG","text":"<p>Resume batch processing from a specific project.</p> <p>Type: Integer (ID) or String (slug) Use Case: Resume interrupted batch runs</p> <p>Example: <pre><code># By project ID\nimbi-automations config.toml workflows/update-all \\\n  --all-projects \\\n  --start-from-project 456\n\n# By project slug\nimbi-automations config.toml workflows/update-all \\\n  --all-projects \\\n  --start-from-project my-project-slug\n</code></pre></p> <p>Behavior: - Skips all projects up to and including the specified project - Starts processing from the next project - Useful for resuming after interruption or failure</p> <p>Example Scenario: <pre><code># Initial run interrupted at project ID 456\nimbi-automations config.toml workflows/big-update --all-projects\n# ... processes projects 1-456, then interrupted\n\n# Resume from where it left off\nimbi-automations config.toml workflows/big-update \\\n  --all-projects \\\n  --start-from-project 456\n# ... starts from project 457\n</code></pre></p>"},{"location":"cli/#-max-concurrency-n","title":"--max-concurrency N","text":"<p>Set maximum number of concurrent workflow executions.</p> <p>Type: Integer Default: <code>1</code> (sequential) Range: 1-100 (practical limit depends on system resources)</p> <p>Example: <pre><code># Process 5 projects simultaneously\nimbi-automations config.toml workflows/update-deps \\\n  --all-projects \\\n  --max-concurrency 5\n</code></pre></p> <p>Performance Considerations:</p> Concurrency Use Case Memory Risk 1 Debugging, testing Low None 2-5 Normal batch processing Medium Low 10+ Large-scale updates High Higher 20+ Maximum throughput Very High Monitor carefully <p>Example Performance: <pre><code># Sequential (slower, safer)\n--max-concurrency 1\n# ~1 project/minute = 664 projects in 11 hours\n\n# Parallel (faster, more resources)\n--max-concurrency 10\n# ~10 projects/minute = 664 projects in 1.1 hours\n</code></pre></p> <p>Warning: Higher concurrency increases: - Memory usage (each workflow uses ~100-500MB) - API rate limit pressure - Disk I/O (simultaneous git clones) - Debugging complexity</p>"},{"location":"cli/#-exit-on-error","title":"--exit-on-error","text":"<p>Stop immediately when any project fails.</p> <p>Type: Flag (boolean) Default: <code>false</code> (continue with other projects)</p> <p>Example: <pre><code>imbi-automations config.toml workflows/critical-update \\\n  --all-projects \\\n  --exit-on-error\n</code></pre></p> <p>Behavior: - Without flag: Logs error, continues to next project - With flag: Exits immediately with error code</p> <p>Use Cases: - CI/CD pipelines requiring atomic success - Testing workflows before batch runs - Critical updates that must succeed for all projects - Debugging specific failure</p> <p>Example Comparison: <pre><code># Default: continues on error\nimbi-automations config.toml workflows/update --all-projects\n# Processes all 664 projects even if some fail\n# Exit code: 0 if any succeeded\n\n# Exits on first error\nimbi-automations config.toml workflows/update --all-projects --exit-on-error\n# Stops at first failure\n# Exit code: 5 on failure\n</code></pre></p>"},{"location":"cli/#debugging-options","title":"Debugging Options","text":""},{"location":"cli/#-preserve-on-error","title":"--preserve-on-error","text":"<p>Save working directory state when workflows fail.</p> <p>Type: Flag (boolean) Default: <code>false</code></p> <p>Example: <pre><code>imbi-automations config.toml workflows/failing-workflow \\\n  --project-id 123 \\\n  --preserve-on-error\n</code></pre></p> <p>What Gets Saved: - Complete Git repository state - Workflow resource files - Docker extracted files - All temporary files - <code>debug.log</code> with complete execution trace</p> <p>Storage Location: <code>./errors/workflow-name/project-slug-timestamp/</code></p> <p>See Also: Debugging Documentation</p>"},{"location":"cli/#-error-dir-dir","title":"--error-dir DIR","text":"<p>Specify directory for saving error states.</p> <p>Type: Directory path Default: <code>./errors</code></p> <p>Example: <pre><code>imbi-automations config.toml workflows/test \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --error-dir /tmp/workflow-errors\n</code></pre></p> <p>Directory Structure: <pre><code>/tmp/workflow-errors/\n\u2514\u2500\u2500 workflow-name/\n    \u2514\u2500\u2500 project-slug-20250103-143052/\n        \u251c\u2500\u2500 repository/\n        \u251c\u2500\u2500 workflow/\n        \u2514\u2500\u2500 debug.log\n</code></pre></p>"},{"location":"cli/#-debug","title":"--debug","text":"<p>Enable DEBUG level logging for all components.</p> <p>Type: Flag (boolean) Default: <code>false</code> (INFO level)</p> <p>Example: <pre><code>imbi-automations config.toml workflows/test \\\n  --project-id 123 \\\n  --debug\n</code></pre></p> <p>Output: <pre><code>2025-01-03 14:30:52 - imbi_automations.workflow_engine - DEBUG - Executing action: copy-files\n2025-01-03 14:30:52 - imbi_automations.actions.filea - DEBUG - Copying workflow:///template to repository:///config\n2025-01-03 14:30:52 - imbi_automations.utils - DEBUG - Resolved path: /tmp/workflow123/workflow/template\n</code></pre></p> <p>Log Categories: - Action execution details - HTTP requests/responses (API calls) - Git operations - File operations - Template rendering - Condition evaluation</p> <p>See Also: Debugging Documentation</p>"},{"location":"cli/#-v-verbose","title":"-v, --verbose","text":"<p>Show action start/end INFO messages.</p> <p>Type: Flag (boolean) Default: <code>false</code></p> <p>Example: <pre><code>imbi-automations config.toml workflows/update \\\n  --project-id 123 \\\n  --verbose\n</code></pre></p> <p>Output: <pre><code>2025-01-03 14:30:50 - INFO - Starting action: backup-files\n2025-01-03 14:30:52 - INFO - Completed action: backup-files\n2025-01-03 14:30:52 - INFO - Starting action: update-configs\n</code></pre></p> <p>Difference from --debug: - <code>--verbose</code>: Action-level progress (cleaner output) - <code>--debug</code>: Everything (very detailed)</p>"},{"location":"cli/#general-options","title":"General Options","text":""},{"location":"cli/#-h-help","title":"-h, --help","text":"<p>Show help message and exit.</p> <p>Example: <pre><code>imbi-automations --help\n</code></pre></p>"},{"location":"cli/#-v-version","title":"-V, --version","text":"<p>Show version number and exit.</p> <p>Example: <pre><code>imbi-automations --version\n</code></pre></p> <p>Output: <pre><code>0.1.0\n</code></pre></p>"},{"location":"cli/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"cli/#test-on-single-project","title":"Test on Single Project","text":"<p>Test workflow before batch execution:</p> <pre><code>imbi-automations config.toml workflows/new-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug\n</code></pre>"},{"location":"cli/#batch-update-with-debugging","title":"Batch Update with Debugging","text":"<p>Process all projects with error preservation:</p> <pre><code>imbi-automations config.toml workflows/update-deps \\\n  --all-projects \\\n  --max-concurrency 5 \\\n  --preserve-on-error \\\n  --error-dir ./errors \\\n  --verbose\n</code></pre>"},{"location":"cli/#resume-interrupted-run","title":"Resume Interrupted Run","text":"<p>Continue from where you left off:</p> <pre><code>imbi-automations config.toml workflows/large-update \\\n  --all-projects \\\n  --start-from-project 456 \\\n  --max-concurrency 5\n</code></pre>"},{"location":"cli/#github-organization-update","title":"GitHub Organization Update","text":"<p>Update all repos in an organization:</p> <pre><code>imbi-automations config.toml workflows/update-actions \\\n  --github-organization myorg \\\n  --max-concurrency 3 \\\n  --verbose\n</code></pre>"},{"location":"cli/#critical-production-update","title":"Critical Production Update","text":"<p>Ensure all or nothing success:</p> <pre><code>imbi-automations config.toml workflows/security-patch \\\n  --all-projects \\\n  --exit-on-error \\\n  --preserve-on-error \\\n  --verbose\n</code></pre>"},{"location":"cli/#debugging-specific-failure","title":"Debugging Specific Failure","text":"<p>Deep dive into a failing project:</p> <pre><code>imbi-automations config.toml workflows/failing \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --error-dir ./debug \\\n  --debug \\\n  --verbose \\\n  --exit-on-error\n</code></pre>"},{"location":"cli/#project-type-targeted-update","title":"Project Type Targeted Update","text":"<p>Update only APIs:</p> <pre><code>imbi-automations config.toml workflows/update-api-configs \\\n  --project-type api \\\n  --max-concurrency 5 \\\n  --verbose\n</code></pre>"},{"location":"cli/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Success - all workflows completed successfully 1 Configuration error (invalid config, missing workflow) 2 Interrupted (Ctrl+C) 3 Runtime error (unexpected exception) 5 Workflow failure (one or more projects failed) <p>Example Usage in Scripts: <pre><code>#!/bin/bash\nimbi-automations config.toml workflows/update --all-projects\n\nif [ $? -eq 0 ]; then\n    echo \"All projects updated successfully\"\nelif [ $? -eq 5 ]; then\n    echo \"Some projects failed - check logs\"\n    exit 1\nelse\n    echo \"Fatal error - check configuration\"\n    exit 1\nfi\n</code></pre></p>"},{"location":"cli/#environment-variables","title":"Environment Variables","text":"<p>While not CLI switches, these environment variables affect behavior:</p> Variable Purpose Example <code>ANTHROPIC_API_KEY</code> Claude API key <code>sk-ant-api03-...</code> <code>GITHUB_TOKEN</code> GitHub API token (if not in config) <code>ghp_...</code> <code>IMBI_API_KEY</code> Imbi API key (if not in config) <code>uuid-here</code> <p>Example: <pre><code>export ANTHROPIC_API_KEY=\"sk-ant-api03-...\"\nexport GITHUB_TOKEN=\"ghp_...\"\n\nimbi-automations config.toml workflows/ai-workflow --all-projects\n</code></pre></p>"},{"location":"cli/#performance-tips","title":"Performance Tips","text":""},{"location":"cli/#optimize-concurrency","title":"Optimize Concurrency","text":"<p>Start conservative, increase gradually:</p> <pre><code># Test with 1\n--max-concurrency 1\n\n# Increase to 5\n--max-concurrency 5\n\n# Monitor system resources, adjust\n--max-concurrency 10\n</code></pre>"},{"location":"cli/#use-filtering","title":"Use Filtering","text":"<p>Reduce scope with workflow filters in <code>config.toml</code>:</p> <pre><code>[filter]\nproject_types = [\"api\", \"consumer\"]\nrequires_github_identifier = true\n</code></pre>"},{"location":"cli/#batch-smartly","title":"Batch Smartly","text":"<p>Split large runs into chunks:</p> <pre><code># Process 100 at a time\n--all-projects --max-concurrency 5 --start-from-project 0\n# ... after completion\n--all-projects --max-concurrency 5 --start-from-project 100\n</code></pre>"},{"location":"cli/#troubleshooting","title":"Troubleshooting","text":""},{"location":"cli/#no-module-named-imbi_automations","title":"\"No module named imbi_automations\"","text":"<p>Problem: CLI not installed or not in PATH</p> <p>Solution: <pre><code>pip install -e .\n# or\npip install imbi-automations\n</code></pre></p>"},{"location":"cli/#workflow-path-is-not-a-directory","title":"\"Workflow path is not a directory\"","text":"<p>Problem: Incorrect workflow path</p> <p>Solution: <pre><code># Correct - path to directory\nimbi-automations config.toml workflows/my-workflow --all-projects\n\n# Incorrect - don't include config.toml\nimbi-automations config.toml workflows/my-workflow/config.toml --all-projects\n</code></pre></p>"},{"location":"cli/#exactly-one-targeting-option-required","title":"\"Exactly one targeting option required\"","text":"<p>Problem: No targeting flag specified</p> <p>Solution: <pre><code># Must include one of:\n--project-id 123\n--project-type api\n--all-projects\n--github-repository org/repo\n# etc.\n</code></pre></p>"},{"location":"cli/#configuration-validation-failed","title":"\"Configuration validation failed\"","text":"<p>Problem: Invalid or missing config values</p> <p>Solution: <pre><code># Validate config separately\npython -c \"from imbi_automations.cli import load_configuration; load_configuration(open('config.toml'))\"\n</code></pre></p>"},{"location":"cli/#advanced-examples","title":"Advanced Examples","text":""},{"location":"cli/#parallel-processing-with-error-handling","title":"Parallel Processing with Error Handling","text":"<pre><code>imbi-automations config.toml workflows/complex-update \\\n  --all-projects \\\n  --max-concurrency 10 \\\n  --preserve-on-error \\\n  --error-dir /var/log/imbi-errors \\\n  --verbose \\\n  2&gt;&amp;1 | tee workflow.log\n</code></pre>"},{"location":"cli/#conditional-batch-processing","title":"Conditional Batch Processing","text":"<pre><code>#!/bin/bash\n# Process projects by type with different concurrency\nfor type in api consumer scheduled-job; do\n    echo \"Processing $type projects...\"\n    imbi-automations config.toml workflows/update \\\n        --project-type $type \\\n        --max-concurrency 5 \\\n        --verbose\ndone\n</code></pre>"},{"location":"cli/#error-analysis-pipeline","title":"Error Analysis Pipeline","text":"<pre><code>#!/bin/bash\n# Run workflow with error preservation\nimbi-automations config.toml workflows/update \\\n    --all-projects \\\n    --preserve-on-error \\\n    --error-dir ./errors\n\n# Analyze errors\necho \"Failed projects:\"\nfind ./errors -name \"debug.log\" -exec grep -l \"ERROR\" {} \\; | \\\n    sed 's|.*/\\(.*\\)-[0-9]*-[0-9]*/debug.log|\\1|'\n\n# Count by error type\necho \"\\nError types:\"\nfind ./errors -name \"debug.log\" -exec grep \"ERROR\" {} \\; | \\\n    cut -d: -f4 | sort | uniq -c\n</code></pre>"},{"location":"cli/#see-also","title":"See Also","text":"<ul> <li>Configuration - Configure API keys and settings</li> <li>Debugging - Detailed debugging guide</li> <li>Actions - Workflow action reference</li> <li>Architecture - System design and components</li> </ul>"},{"location":"configuration/","title":"Configuration","text":"<p>Imbi Automations uses TOML-based configuration files with Pydantic validation for all settings. This document describes all available configuration options.</p>"},{"location":"configuration/#configuration-file-location","title":"Configuration File Location","text":"<p>By default, the CLI expects a <code>config.toml</code> file as the first argument:</p> <pre><code>imbi-automations config.toml workflows/workflow-name --all-projects\n</code></pre>"},{"location":"configuration/#complete-configuration-example","title":"Complete Configuration Example","text":"<pre><code># Global Settings\nai_commits = false\ncommit_author = \"Imbi Automations &lt;noreply@example.com&gt;\"\nerror_dir = \"./errors\"\npreserve_on_error = false\n\n# Anthropic API Configuration\n[anthropic]\napi_key = \"${ANTHROPIC_API_KEY}\"  # Or set directly\nbedrock = false\nmodel = \"claude-3-5-sonnet-latest\"\n\n# Claude Code SDK Configuration\n[claude_code]\nexecutable = \"claude\"\nenabled = true\n\n# GitHub API Configuration\n[github]\napi_key = \"ghp_your_github_token\"\nhostname = \"github.com\"\n\n# GitLab API Configuration (optional)\n[gitlab]\napi_key = \"glpat_your_gitlab_token\"\nhostname = \"gitlab.com\"\n\n# Imbi Project Management Configuration\n[imbi]\napi_key = \"your-imbi-api-key\"\nhostname = \"imbi.example.com\"\ngithub_identifier = \"github\"\ngitlab_identifier = \"gitlab\"\ngithub_link = \"GitHub Repository\"\ngitlab_link = \"GitLab Project\"\n</code></pre>"},{"location":"configuration/#global-settings","title":"Global Settings","text":""},{"location":"configuration/#ai_commits","title":"ai_commits","text":"<p>Enable AI-powered commit message generation.</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <p>When enabled, uses Anthropic API to generate commit messages based on changes.</p> <pre><code>ai_commits = true\n</code></pre>"},{"location":"configuration/#commit_author","title":"commit_author","text":"<p>Git commit author information for automated commits.</p> <p>Type: <code>string</code> Default: <code>\"Imbi Automations &lt;noreply@aweber.com&gt;\"</code> Format: <code>\"Name &lt;email&gt;\"</code></p> <pre><code>commit_author = \"Bot User &lt;bot@example.com&gt;\"\n</code></pre>"},{"location":"configuration/#error_dir","title":"error_dir","text":"<p>Directory to store error logs and debugging information when workflows fail.</p> <p>Type: <code>path</code></p> <p>Default: <code>\"./errors\"</code></p> <pre><code>error_dir = \"/var/log/imbi-automations/errors\"\n</code></pre>"},{"location":"configuration/#preserve_on_error","title":"preserve_on_error","text":"<p>Preserve working directories when errors occur for debugging.</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <p>When <code>true</code>, temporary directories are not cleaned up after failures, allowing manual inspection.</p> <pre><code>preserve_on_error = true\n</code></pre>"},{"location":"configuration/#anthropic-configuration","title":"Anthropic Configuration","text":"<p>Configuration for Anthropic Claude API used in Claude actions and AI commit generation.</p>"},{"location":"configuration/#anthropicapi_key","title":"[anthropic].api_key","text":"<p>Anthropic API key for Claude models.</p> <p>Type: <code>string</code> (secret) Default: <code>$ANTHROPIC_API_KEY</code> environment variable Required: For Claude actions or <code>ai_commits = true</code></p> <pre><code>[anthropic]\napi_key = \"sk-ant-api03-...\"\n</code></pre> <p>Or use environment variable: <pre><code>export ANTHROPIC_API_KEY=\"sk-ant-api03-...\"\n</code></pre></p>"},{"location":"configuration/#anthropicbedrock","title":"[anthropic].bedrock","text":"<p>Use AWS Bedrock instead of direct Anthropic API.</p> <p>Type: <code>boolean</code> Default: <code>false</code></p> <pre><code>[anthropic]\nbedrock = true\n</code></pre> <p>Note: Requires AWS credentials configured separately.</p>"},{"location":"configuration/#anthropicmodel","title":"[anthropic].model","text":"<p>Claude model to use for API requests.</p> <p>Type: <code>string</code> Default: <code>\"claude-3-5-haiku-latest\"</code></p> <p>Available Models:</p> <ul> <li><code>claude-3-5-sonnet-latest</code> - Most capable, higher cost</li> <li><code>claude-3-5-haiku-latest</code> - Fast and efficient (default)</li> <li><code>claude-3-opus-latest</code> - Highest capability, highest cost</li> </ul> <pre><code>[anthropic]\nmodel = \"claude-3-5-sonnet-latest\"\n</code></pre>"},{"location":"configuration/#claude-code-configuration","title":"Claude Code Configuration","text":"<p>Configuration for Claude Code SDK integration.</p>"},{"location":"configuration/#claude_codeexecutable","title":"[claude_code].executable","text":"<p>Path or command name for Claude Code executable.</p> <p>Type: <code>string</code> Default: <code>\"claude\"</code></p> <pre><code>[claude_code]\nexecutable = \"/usr/local/bin/claude\"\n</code></pre>"},{"location":"configuration/#claude_codeenabled","title":"[claude_code].enabled","text":"<p>Enable Claude Code actions in workflows.</p> <p>Type: <code>boolean</code> Default: <code>true</code></p> <p>Set to <code>false</code> to disable all Claude actions:</p> <pre><code>[claude_code]\nenabled = false\n</code></pre>"},{"location":"configuration/#claude_codebase_prompt","title":"[claude_code].base_prompt","text":"<p>Custom base prompt file for Claude Code sessions.</p> <p>Type: <code>path</code></p> <p>Default: <code>src/imbi_automations/prompts/claude.md</code></p> <pre><code>[claude_code]\nbase_prompt = \"/path/to/custom-prompt.md\"\n</code></pre>"},{"location":"configuration/#github-configuration","title":"GitHub Configuration","text":"<p>Configuration for GitHub API integration.</p>"},{"location":"configuration/#githubapi_key","title":"[github].api_key","text":"<p>GitHub personal access token or fine-grained token.</p> <p>Type: <code>string</code> (secret) Required: For GitHub workflows</p> <p>Token Permissions Required: - <code>repo</code> - Full repository access - <code>workflow</code> - Update GitHub Actions workflows - <code>admin:org</code> - Manage organization (for environment sync)</p> <pre><code>[github]\napi_key = \"ghp_your_github_personal_access_token\"\n</code></pre>"},{"location":"configuration/#githubhostname","title":"[github].hostname","text":"<p>GitHub hostname for Enterprise installations.</p> <p>Type: <code>string</code> Default: <code>\"github.com\"</code></p> <p>For GitHub Enterprise: <pre><code>[github]\nhostname = \"github.enterprise.com\"\n</code></pre></p>"},{"location":"configuration/#gitlab-configuration","title":"GitLab Configuration","text":"<p>Configuration for GitLab API integration (optional).</p>"},{"location":"configuration/#gitlabapi_key","title":"[gitlab].api_key","text":"<p>GitLab personal access token.</p> <p>Type: <code>string</code> (secret) Required: For GitLab workflows</p> <p>Token Scopes Required: - <code>api</code> - Full API access - <code>read_repository</code> - Read repository files - <code>write_repository</code> - Create/update files</p> <pre><code>[gitlab]\napi_key = \"glpat_your_gitlab_token\"\n</code></pre>"},{"location":"configuration/#gitlabhostname","title":"[gitlab].hostname","text":"<p>GitLab hostname for self-hosted installations.</p> <p>Type: <code>string</code> Default: <code>\"gitlab.com\"</code></p> <p>For self-hosted: <pre><code>[gitlab]\nhostname = \"gitlab.example.com\"\n</code></pre></p>"},{"location":"configuration/#imbi-configuration","title":"Imbi Configuration","text":"<p>Configuration for Imbi project management system integration.</p>"},{"location":"configuration/#imbiapi_key","title":"[imbi].api_key","text":"<p>Imbi API authentication key.</p> <p>Type: <code>string</code> (secret) Required: Always (core functionality)</p> <pre><code>[imbi]\napi_key = \"your-imbi-api-key-uuid\"\n</code></pre>"},{"location":"configuration/#imbihostname","title":"[imbi].hostname","text":"<p>Imbi instance hostname.</p> <p>Type: <code>string</code> Required: Always</p> <pre><code>[imbi]\nhostname = \"imbi.example.com\"\n</code></pre>"},{"location":"configuration/#imbi_identifier","title":"[imbi].*_identifier","text":"<p>Project identifier field names in Imbi for external systems.</p> <p>Type: <code>string</code> Defaults: - <code>github_identifier = \"github\"</code> - <code>gitlab_identifier = \"gitlab\"</code> - <code>pagerduty_identifier = \"pagerduty\"</code> - <code>sonarqube_identifier = \"sonarqube\"</code> - <code>sentry_identifier = \"sentry\"</code></p> <p>These specify which Imbi project identifier fields contain external system references:</p> <pre><code>[imbi]\ngithub_identifier = \"github-id\"\ngitlab_identifier = \"gitlab-id\"\n</code></pre>"},{"location":"configuration/#imbi_link","title":"[imbi].*_link","text":"<p>Link type names in Imbi for external system URLs.</p> <p>Type: <code>string</code> Defaults: - <code>github_link = \"GitHub Repository\"</code> - <code>gitlab_link = \"GitLab Project\"</code> - <code>grafana_link = \"Grafana Dashboard\"</code> - <code>pagerduty_link = \"PagerDuty\"</code> - <code>sentry_link = \"Sentry\"</code> - <code>sonarqube_link = \"SonarQube\"</code></p> <p>These specify the link type names used in Imbi to store external URLs:</p> <pre><code>[imbi]\ngithub_link = \"GitHub Repo\"\ngitlab_link = \"GitLab\"\n</code></pre>"},{"location":"configuration/#environment-variables","title":"Environment Variables","text":"<p>Several configuration values support environment variable substitution:</p>"},{"location":"configuration/#supported-in-configuration-file","title":"Supported in Configuration File","text":"<pre><code>[github]\napi_key = \"${GITHUB_TOKEN}\"\n\n[anthropic]\napi_key = \"${ANTHROPIC_API_KEY}\"\n\n[imbi]\napi_key = \"${IMBI_API_KEY}\"\n</code></pre>"},{"location":"configuration/#environment-variable-defaults","title":"Environment Variable Defaults","text":"<p>Some fields use environment variables as defaults if not specified:</p> Configuration Field Environment Variable <code>anthropic.api_key</code> <code>ANTHROPIC_API_KEY</code>"},{"location":"configuration/#minimal-configuration","title":"Minimal Configuration","text":"<p>The absolute minimum configuration for basic GitHub workflows:</p> <pre><code>[github]\napi_key = \"ghp_your_token\"\n\n[imbi]\napi_key = \"your-imbi-key\"\nhostname = \"imbi.example.com\"\n</code></pre>"},{"location":"configuration/#configuration-validation","title":"Configuration Validation","text":"<p>Configuration is validated at startup using Pydantic. Common errors:</p>"},{"location":"configuration/#missing-required-fields","title":"Missing Required Fields","text":"<pre><code>ValidationError: 1 validation error for Configuration\ngithub.api_key\n  field required (type=value_error.missing)\n</code></pre> <p>Solution: Add the required field to your config.toml</p>"},{"location":"configuration/#invalid-api-key-format","title":"Invalid API Key Format","text":"<pre><code>ValidationError: 1 validation error for Configuration\ngithub.api_key\n  string does not match regex (type=value_error.str.regex)\n</code></pre> <p>Solution: Check API key format and validity</p>"},{"location":"configuration/#invalid-hostname","title":"Invalid Hostname","text":"<pre><code>ValidationError: 1 validation error for Configuration\nimbi.hostname\n  invalid hostname (type=value_error.url.host)\n</code></pre> <p>Solution: Use valid hostname without protocol (no <code>https://</code>)</p>"},{"location":"configuration/#security-best-practices","title":"Security Best Practices","text":""},{"location":"configuration/#api-key-storage","title":"API Key Storage","text":"<p>DO NOT commit API keys to version control:</p> <pre><code># \u274c BAD - Keys in config file\n[github]\napi_key = \"ghp_actual_key_here\"\n\n# \u2705 GOOD - Environment variables\n[github]\napi_key = \"${GITHUB_TOKEN}\"\n</code></pre>"},{"location":"configuration/#file-permissions","title":"File Permissions","text":"<p>Restrict config file permissions:</p> <pre><code>chmod 600 config.toml\n</code></pre>"},{"location":"configuration/#environment-variables_1","title":"Environment Variables","text":"<p>Set sensitive values via environment:</p> <pre><code>export GITHUB_TOKEN=\"ghp_...\"\nexport ANTHROPIC_API_KEY=\"sk-ant-...\"\nexport IMBI_API_KEY=\"uuid-here\"\n\nimbi-automations config.toml workflows/workflow-name --all-projects\n</code></pre>"},{"location":"configuration/#separate-configurations","title":"Separate Configurations","text":"<p>Use different config files for different environments:</p> <pre><code># Development\nimbi-automations config.dev.toml workflows/test\n\n# Production\nimbi-automations config.prod.toml workflows/deploy\n</code></pre>"},{"location":"configuration/#configuration-examples","title":"Configuration Examples","text":""},{"location":"configuration/#github-only-workflows","title":"GitHub Only Workflows","text":"<pre><code>commit_author = \"GitHub Bot &lt;bot@example.com&gt;\"\n\n[github]\napi_key = \"${GITHUB_TOKEN}\"\n\n[imbi]\napi_key = \"${IMBI_API_KEY}\"\nhostname = \"imbi.example.com\"\n</code></pre>"},{"location":"configuration/#github-enterprise","title":"GitHub Enterprise","text":"<pre><code>[github]\napi_key = \"${GITHUB_ENTERPRISE_TOKEN}\"\nhostname = \"github.enterprise.com\"\n\n[imbi]\napi_key = \"${IMBI_API_KEY}\"\nhostname = \"imbi.example.com\"\n</code></pre>"},{"location":"configuration/#with-ai-features","title":"With AI Features","text":"<pre><code>ai_commits = true\n\n[anthropic]\napi_key = \"${ANTHROPIC_API_KEY}\"\nmodel = \"claude-3-5-sonnet-latest\"\n\n[claude_code]\nenabled = true\nexecutable = \"claude\"\n\n[github]\napi_key = \"${GITHUB_TOKEN}\"\n\n[imbi]\napi_key = \"${IMBI_API_KEY}\"\nhostname = \"imbi.example.com\"\n</code></pre>"},{"location":"configuration/#multi-platform","title":"Multi-Platform","text":"<pre><code>[github]\napi_key = \"${GITHUB_TOKEN}\"\n\n[gitlab]\napi_key = \"${GITLAB_TOKEN}\"\n\n[imbi]\napi_key = \"${IMBI_API_KEY}\"\nhostname = \"imbi.example.com\"\ngithub_identifier = \"github\"\ngitlab_identifier = \"gitlab\"\n</code></pre>"},{"location":"configuration/#with-debugging","title":"With Debugging","text":"<pre><code>preserve_on_error = true\nerror_dir = \"/tmp/imbi-errors\"\n\n[github]\napi_key = \"${GITHUB_TOKEN}\"\n\n[imbi]\napi_key = \"${IMBI_API_KEY}\"\nhostname = \"imbi.example.com\"\n</code></pre>"},{"location":"configuration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"configuration/#configuration-not-loading","title":"Configuration Not Loading","text":"<p>Problem: <code>FileNotFoundError: config.toml not found</code></p> <p>Solution: Provide full path to config file: <pre><code>imbi-automations /path/to/config.toml workflows/name --all-projects\n</code></pre></p>"},{"location":"configuration/#authentication-failures","title":"Authentication Failures","text":"<p>Problem: <code>401 Unauthorized</code> errors</p> <p>Solutions: 1. Verify API key is valid and not expired 2. Check API key has required permissions 3. Ensure environment variables are exported 4. Test API access manually with curl</p>"},{"location":"configuration/#invalid-toml-syntax","title":"Invalid TOML Syntax","text":"<p>Problem: <code>toml.decoder.TomlDecodeError</code></p> <p>Solutions: 1. Validate TOML syntax with online validator 2. Check for missing quotes around strings 3. Verify section headers use <code>[section]</code> format 4. Ensure key-value pairs use <code>key = \"value\"</code> format</p>"},{"location":"configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"configuration/#custom-error-directory-structure","title":"Custom Error Directory Structure","text":"<pre><code>error_dir = \"/var/log/imbi-automations/errors\"\n</code></pre> <p>Creates: <pre><code>/var/log/imbi-automations/errors/\n\u2514\u2500\u2500 workflow-name/\n    \u2514\u2500\u2500 project-slug-timestamp/\n        \u251c\u2500\u2500 repository/\n        \u251c\u2500\u2500 workflow/\n        \u2514\u2500\u2500 error.log\n</code></pre></p>"},{"location":"configuration/#custom-commit-author-per-workflow","title":"Custom Commit Author Per Workflow","text":"<p>Set in workflow config.toml instead:</p> <pre><code># workflows/my-workflow/config.toml\ncommit_author = \"Workflow Bot &lt;workflow@example.com&gt;\"\n</code></pre> <p>Overrides global <code>commit_author</code> for that workflow only.</p>"},{"location":"configuration/#see-also","title":"See Also","text":"<ul> <li>Workflow Actions - Complete action configuration reference</li> <li>Architecture - System design and components</li> <li>GitHub Actions - GitHub-specific configuration</li> <li>Claude Actions - AI transformation configuration</li> </ul>"},{"location":"debugging/","title":"Debugging Workflows","text":"<p>Imbi Automations provides comprehensive debugging capabilities to troubleshoot workflow failures, including error preservation, detailed logging, and diagnostic tools.</p>"},{"location":"debugging/#quick-start","title":"Quick Start","text":"<p>To debug a failing workflow, use these flags together:</p> <pre><code>imbi-automations config.toml workflows/failing-workflow \\\n  --all-projects \\\n  --preserve-on-error \\\n  --error-dir ./debug \\\n  --debug \\\n  --verbose\n</code></pre> <p>This will: - <code>--preserve-on-error</code>: Save working directory state on failures - <code>--error-dir ./debug</code>: Store error states in <code>./debug/</code> - <code>--debug</code>: Enable DEBUG level logging (all log messages) - <code>--verbose</code>: Show action start/end messages</p>"},{"location":"debugging/#debugging-flags","title":"Debugging Flags","text":""},{"location":"debugging/#-preserve-on-error","title":"--preserve-on-error","text":"<p>Preserves the complete working directory when a workflow fails, including: - Cloned repository state - Workflow resource files - Extracted Docker files - All intermediate files</p> <p>Usage: <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --all-projects \\\n  --preserve-on-error\n</code></pre></p> <p>Default: <code>false</code> (working directories are cleaned up)</p> <p>When to Use: - Investigating why a workflow failed - Examining repository state at time of failure - Debugging file operations - Analyzing Claude action failures</p>"},{"location":"debugging/#-error-dir","title":"--error-dir","text":"<p>Specifies where to save preserved error states.</p> <p>Usage: <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --all-projects \\\n  --preserve-on-error \\\n  --error-dir /tmp/imbi-errors\n</code></pre></p> <p>Default: <code>./errors</code></p> <p>Directory Structure: <pre><code>errors/\n\u2514\u2500\u2500 workflow-name/\n    \u2514\u2500\u2500 project-slug-timestamp/\n        \u251c\u2500\u2500 repository/          # Cloned Git repository\n        \u251c\u2500\u2500 workflow/            # Workflow resources\n        \u251c\u2500\u2500 extracted/           # Docker extracted files (if any)\n        \u251c\u2500\u2500 debug.log            # Complete DEBUG level logs\n        \u2514\u2500\u2500 other temporary files\n</code></pre></p> <p>Example Paths: <pre><code>errors/\n\u2514\u2500\u2500 python39-project-fix/\n    \u251c\u2500\u2500 api-service-20250103-143052/\n    \u2502   \u251c\u2500\u2500 repository/\n    \u2502   \u251c\u2500\u2500 workflow/\n    \u2502   \u2514\u2500\u2500 debug.log\n    \u2514\u2500\u2500 consumer-app-20250103-143105/\n        \u251c\u2500\u2500 repository/\n        \u251c\u2500\u2500 workflow/\n        \u2514\u2500\u2500 debug.log\n</code></pre></p>"},{"location":"debugging/#-debug","title":"--debug","text":"<p>Enables DEBUG level logging for all components, showing detailed operation traces.</p> <p>Usage: <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --all-projects \\\n  --debug\n</code></pre></p> <p>Default: <code>false</code> (INFO level)</p> <p>What Gets Logged: - All action executions with parameters - HTTP requests/responses - Git operations - File operations - Template rendering - Claude API interactions - Condition evaluations - All internal state changes</p> <p>Example Output: <pre><code>2025-01-03 14:30:52 - imbi_automations.workflow_engine - DEBUG - Executing action: copy-gitignore\n2025-01-03 14:30:52 - imbi_automations.actions.filea - DEBUG - Copying workflow:///.gitignore to repository:///.gitignore\n2025-01-03 14:30:52 - imbi_automations.utils - DEBUG - Resolved path: /tmp/workflow123/workflow/.gitignore\n2025-01-03 14:30:52 - imbi_automations.utils - DEBUG - Resolved path: /tmp/workflow123/repository/.gitignore\n</code></pre></p>"},{"location":"debugging/#-verbose","title":"--verbose","text":"<p>Shows action start/end messages at INFO level without full DEBUG output.</p> <p>Usage: <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --all-projects \\\n  --verbose\n</code></pre></p> <p>Default: <code>false</code></p> <p>What Gets Logged: - Action start messages - Action completion messages - Major workflow milestones - Success/failure summaries</p> <p>Example Output: <pre><code>2025-01-03 14:30:50 - imbi_automations.workflow_engine - INFO - Starting action: backup-files\n2025-01-03 14:30:52 - imbi_automations.workflow_engine - INFO - Completed action: backup-files\n2025-01-03 14:30:52 - imbi_automations.workflow_engine - INFO - Starting action: ai-refactor\n</code></pre></p>"},{"location":"debugging/#-exit-on-error","title":"--exit-on-error","text":"<p>Stop processing immediately when any project fails instead of continuing with remaining projects.</p> <p>Usage: <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --all-projects \\\n  --exit-on-error\n</code></pre></p> <p>Default: <code>false</code> (continue with other projects)</p> <p>When to Use: - Testing workflows on small batches - CI/CD environments - When failures are critical - Debugging specific project issues</p>"},{"location":"debugging/#debuglog-file","title":"debug.log File","text":"<p>When <code>--preserve-on-error</code> is enabled, a <code>debug.log</code> file is automatically created in each error directory containing ALL DEBUG level logs for that specific project execution.</p>"},{"location":"debugging/#contents","title":"Contents","text":"<p>The <code>debug.log</code> file includes: - Complete action execution trace - All HTTP API requests and responses - File operations with full paths - Git commands and output - Template rendering details - Claude/Anthropic API interactions - Error messages and stack traces - Timing information</p>"},{"location":"debugging/#format","title":"Format","text":"<pre><code>2025-01-03 14:30:50,123 - imbi_automations.controller - INFO - Processing my-project (123)\n2025-01-03 14:30:50,456 - imbi_automations.git - DEBUG - Cloning repository: https://github.com/org/repo.git\n2025-01-03 14:30:52,789 - imbi_automations.workflow_engine - DEBUG - Executing action: copy-files\n2025-01-03 14:30:52,890 - imbi_automations.actions.filea - DEBUG - Copying workflow:///templates/ to repository:///config/\n2025-01-03 14:30:53,123 - imbi_automations.actions.filea - ERROR - Failed to copy: Source directory not found\n</code></pre>"},{"location":"debugging/#location","title":"Location","text":"<pre><code># Default location\n./errors/workflow-name/project-slug-timestamp/debug.log\n\n# Custom error-dir\n/tmp/debug/workflow-name/project-slug-timestamp/debug.log\n</code></pre>"},{"location":"debugging/#per-project-isolation","title":"Per-Project Isolation","text":"<p>Each project execution gets its own <code>debug.log</code> file, even when running workflows concurrently with <code>--max-concurrency &gt; 1</code>. This is achieved using Python's <code>contextvars</code> to isolate log captures per async task.</p>"},{"location":"debugging/#error-directory-contents","title":"Error Directory Contents","text":"<p>When a workflow fails and <code>--preserve-on-error</code> is enabled, the error directory contains:</p>"},{"location":"debugging/#repository","title":"repository/","text":"<p>Complete clone of the Git repository at the point of failure: - All files in their current state - <code>.git/</code> directory with full history - Working tree changes (staged and unstaged) - Any files created by workflow actions</p> <p>Use Cases: - Examine file modifications made by actions - Check what Claude Code changed - Review git history and commits - Test fixes locally</p> <pre><code>cd errors/workflow-name/project-slug-timestamp/repository/\ngit log\ngit diff HEAD\ngit status\n</code></pre>"},{"location":"debugging/#workflow","title":"workflow/","text":"<p>Copy of workflow resources: - Template files - Prompt files - Static resources - Any files copied from workflow directory</p> <p>Use Cases: - Verify template content - Check prompt files - Review workflow resources</p>"},{"location":"debugging/#extracted-if-present","title":"extracted/ (if present)","text":"<p>Files extracted from Docker containers by docker actions: - Configuration files - Binary artifacts - Library files</p> <p>Use Cases: - Verify Docker extraction worked - Check extracted file contents - Debug docker action issues</p>"},{"location":"debugging/#debuglog","title":"debug.log","text":"<p>Complete DEBUG level logs (see above section).</p>"},{"location":"debugging/#other-files","title":"Other Files","text":"<p>Any temporary files created during workflow execution: - Action-specific output files - Intermediate processing files - Failure indicator files (e.g., <code>ACTION_FAILED</code>)</p>"},{"location":"debugging/#common-debugging-scenarios","title":"Common Debugging Scenarios","text":""},{"location":"debugging/#debugging-failed-actions","title":"Debugging Failed Actions","text":"<p>Scenario: An action fails and you need to understand why.</p> <p>Steps: 1. Run with error preservation:    <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug\n</code></pre></p> <ol> <li> <p>Check console output for immediate errors</p> </li> <li> <p>Examine the error directory:    <pre><code>cd errors/my-workflow/project-name-*\ncat debug.log | grep ERROR\n</code></pre></p> </li> <li> <p>Review repository state:    <pre><code>cd repository/\ngit status\ngit log -1\n</code></pre></p> </li> <li> <p>Check for failure files:    <pre><code>find . -name \"*FAILED\"\ncat ACTION_FAILED  # If exists\n</code></pre></p> </li> </ol>"},{"location":"debugging/#debugging-claude-actions","title":"Debugging Claude Actions","text":"<p>Scenario: Claude Code action fails or produces unexpected results.</p> <p>Steps: 1. Enable full debugging:    <pre><code>imbi-automations config.toml workflows/claude-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug \\\n  --verbose\n</code></pre></p> <ol> <li> <p>Check <code>debug.log</code> for Claude interactions:    <pre><code>cd errors/claude-workflow/project-*\ngrep -A 10 \"Claude\" debug.log\ngrep -A 5 \"Anthropic\" debug.log\n</code></pre></p> </li> <li> <p>Review the prompt sent to Claude:    <pre><code>grep -B 5 -A 20 \"Execute agent prompt\" debug.log\n</code></pre></p> </li> <li> <p>Check for failure files:    <pre><code>ls repository/*FAILED\ncat repository/ACTION_FAILED\n</code></pre></p> </li> <li> <p>Examine repository changes:    <pre><code>cd repository/\ngit diff\n</code></pre></p> </li> </ol>"},{"location":"debugging/#debugging-file-actions","title":"Debugging File Actions","text":"<p>Scenario: File copy/move operations aren't working as expected.</p> <p>Steps: 1. Run with verbose debugging:    <pre><code>imbi-automations config.toml workflows/file-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug\n</code></pre></p> <ol> <li> <p>Check resolved paths in <code>debug.log</code>:    <pre><code>grep \"Resolved path\" debug.log\ngrep \"Copying\\|Moving\\|Writing\" debug.log\n</code></pre></p> </li> <li> <p>Verify file existence:    <pre><code>cd errors/file-workflow/project-*/\nls -laR repository/\nls -laR workflow/\n</code></pre></p> </li> <li> <p>Check for permission or path errors:    <pre><code>grep \"Permission denied\\|No such file\" debug.log\n</code></pre></p> </li> </ol>"},{"location":"debugging/#debugging-template-actions","title":"Debugging Template Actions","text":"<p>Scenario: Templates aren't rendering correctly or variables are undefined.</p> <p>Steps: 1. Enable debugging:    <pre><code>imbi-automations config.toml workflows/template-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug\n</code></pre></p> <ol> <li> <p>Check template rendering in logs:    <pre><code>grep \"Template\\|Jinja2\" debug.log\n</code></pre></p> </li> <li> <p>Examine rendered output:    <pre><code>cd errors/template-workflow/project-*/repository/\ncat rendered-file.yaml\n</code></pre></p> </li> <li> <p>Review workflow template files:    <pre><code>cd ../workflow/\ncat template-file.j2\n</code></pre></p> </li> <li> <p>Check for undefined variable errors:    <pre><code>grep \"undefined\\|UndefinedError\" debug.log\n</code></pre></p> </li> </ol>"},{"location":"debugging/#debugging-shell-actions","title":"Debugging Shell Actions","text":"<p>Scenario: Shell commands fail or produce unexpected output.</p> <p>Steps: 1. Enable debugging:    <pre><code>imbi-automations config.toml workflows/shell-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug\n</code></pre></p> <ol> <li> <p>Check command execution in logs:    <pre><code>grep \"Executing shell command\\|Command stdout\\|Command stderr\" debug.log\n</code></pre></p> </li> <li> <p>Re-run command manually:    <pre><code>cd errors/shell-workflow/project-*/repository/\n# Copy command from debug.log and run it\npytest tests/ -v\n</code></pre></p> </li> <li> <p>Check exit codes:    <pre><code>grep \"exit code\" debug.log\n</code></pre></p> </li> </ol>"},{"location":"debugging/#debugging-concurrent-execution","title":"Debugging Concurrent Execution","text":"<p>Scenario: Running with <code>--max-concurrency &gt; 1</code> and need to debug specific project.</p> <p>Steps: 1. First, identify the failing project in normal execution 2. Re-run with just that project:    <pre><code>imbi-automations config.toml workflows/my-workflow \\\n  --project-id 123 \\\n  --preserve-on-error \\\n  --debug \\\n  --exit-on-error\n</code></pre></p> <ol> <li>Each project gets isolated <code>debug.log</code> even in concurrent mode</li> <li>Check error directory for all failed projects:    <pre><code>ls -ltr errors/my-workflow/\n</code></pre></li> </ol>"},{"location":"debugging/#configuration-file-debugging","title":"Configuration File Debugging","text":"<p>You can also set error preservation in <code>config.toml</code>:</p> <pre><code>preserve_on_error = true\nerror_dir = \"/var/log/imbi-errors\"\n</code></pre> <p>Note: CLI flags override config file settings.</p>"},{"location":"debugging/#log-levels","title":"Log Levels","text":"<p>Imbi Automations uses Python's standard logging levels:</p> Level Description When to Use DEBUG All operations and internal state Debugging failures INFO Major milestones and progress Normal operation WARNING Recoverable issues Monitoring ERROR Action failures Alert on issues CRITICAL Fatal errors System failures <p>Set via CLI: <pre><code># DEBUG level\n--debug\n\n# INFO level (default)\n# No flag needed\n\n# INFO level with action details\n--verbose\n</code></pre></p>"},{"location":"debugging/#performance-impact","title":"Performance Impact","text":""},{"location":"debugging/#-preserve-on-error_1","title":"--preserve-on-error","text":"<p>Impact: Minimal during execution, significant on failure - No overhead during successful workflows - On failure: Copies entire working directory (can be large) - Storage: Requires disk space for preserved directories</p> <p>Recommendation: Enable for debugging, disable for production batch processing</p>"},{"location":"debugging/#-debug_1","title":"--debug","text":"<p>Impact: Moderate logging overhead - Increases log volume significantly - Slightly slower due to additional logging calls - Memory impact from buffering logs</p> <p>Recommendation: Use for troubleshooting specific issues, not for large batch runs</p>"},{"location":"debugging/#-verbose_1","title":"--verbose","text":"<p>Impact: Minimal - Only logs action start/end messages - Negligible performance impact</p> <p>Recommendation: Safe to use in production</p>"},{"location":"debugging/#cleaning-up-error-directories","title":"Cleaning Up Error Directories","text":"<p>Error directories accumulate over time. Clean them periodically:</p> <pre><code># Remove all error directories\nrm -rf errors/\n\n# Remove errors older than 7 days\nfind errors/ -type d -mtime +7 -exec rm -rf {} +\n\n# Remove errors for specific workflow\nrm -rf errors/workflow-name/\n\n# Keep only latest N errors per workflow\ncd errors/workflow-name/\nls -t | tail -n +6 | xargs rm -rf\n</code></pre>"},{"location":"debugging/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Start Small: Debug single projects before batch runs    <pre><code>--project-id 123 --preserve-on-error --debug\n</code></pre></p> </li> <li> <p>Isolate Issues: Use <code>--exit-on-error</code> when debugging    <pre><code>--all-projects --exit-on-error --preserve-on-error\n</code></pre></p> </li> <li> <p>Review Logs First: Check <code>debug.log</code> before examining files    <pre><code>grep ERROR errors/workflow/project/debug.log\n</code></pre></p> </li> <li> <p>Clean Up Regularly: Remove old error directories    <pre><code>find errors/ -mtime +7 -delete\n</code></pre></p> </li> <li> <p>Use Specific Targeting: Debug exact failing project    <pre><code>--project-id 123  # Instead of --all-projects\n</code></pre></p> </li> <li> <p>Disable in Production: Don't preserve errors for large batch runs    <pre><code># Production: no preserve-on-error\nimbi-automations config.toml workflows/prod --all-projects\n</code></pre></p> </li> <li> <p>Combine Flags Effectively:    <pre><code># Maximum debugging\n--preserve-on-error --debug --verbose --exit-on-error\n\n# Light debugging\n--verbose\n\n# Specific issue\n--project-id 123 --preserve-on-error --debug\n</code></pre></p> </li> </ol>"},{"location":"debugging/#troubleshooting-the-debugger","title":"Troubleshooting the Debugger","text":""},{"location":"debugging/#error-directories-not-created","title":"Error Directories Not Created","text":"<p>Problem: <code>--preserve-on-error</code> set but no directories in <code>errors/</code></p> <p>Causes: - Workflow succeeded (no errors to preserve) - Insufficient permissions to create directories - Disk space full</p> <p>Solution: <pre><code># Check permissions\nls -ld errors/\nmkdir -p errors/test\n\n# Check disk space\ndf -h .\n\n# Try explicit error-dir\n--error-dir /tmp/imbi-errors\n</code></pre></p>"},{"location":"debugging/#debuglog-missing-or-empty","title":"debug.log Missing or Empty","text":"<p>Problem: Error directory created but <code>debug.log</code> missing</p> <p>Causes: - Failure occurred before logging started - Logging not properly initialized - Concurrent execution issue</p> <p>Solution: <pre><code># Run single-threaded\n--max-concurrency 1\n\n# Ensure debug logging\n--debug --preserve-on-error\n</code></pre></p>"},{"location":"debugging/#too-much-log-output","title":"Too Much Log Output","text":"<p>Problem: <code>--debug</code> generates too much output</p> <p>Solution: <pre><code># Use --verbose instead for less output\n--verbose\n\n# Or filter debug output\n--debug 2&gt;&amp;1 | grep -v \"anthropic\\|httpx\\|httpcore\"\n</code></pre></p>"},{"location":"debugging/#see-also","title":"See Also","text":"<ul> <li>Configuration - Configure error directories in config.toml</li> <li>Architecture - Understanding workflow execution</li> <li>Actions - Action-specific debugging tips</li> </ul>"},{"location":"workflow-conditions/","title":"Workflow Conditions","text":"<p>Conditions check repository state to determine if workflows or individual actions should execute. They provide fine-grained control over workflow execution based on file existence, file contents, and repository structure.</p>"},{"location":"workflow-conditions/#condition-levels","title":"Condition Levels","text":"<p>Conditions can be applied at two levels:</p>"},{"location":"workflow-conditions/#workflow-level-conditions","title":"Workflow-Level Conditions","text":"<p>Evaluated once per project before any actions execute. If conditions fail, the entire workflow is skipped.</p> <pre><code>[[conditions]]\nremote_file_exists = \"setup.cfg\"\n</code></pre>"},{"location":"workflow-conditions/#action-level-conditions","title":"Action-Level Conditions","text":"<p>Evaluated before each action executes. If conditions fail, only that specific action is skipped.</p> <pre><code>[[actions]]\nname = \"update-dockerfile\"\ntype = \"file\"\n\n[[actions.conditions]]\nfile_exists = \"Dockerfile\"\n</code></pre>"},{"location":"workflow-conditions/#condition-types","title":"Condition Types","text":""},{"location":"workflow-conditions/#remote-conditions-pre-clone","title":"Remote Conditions (Pre-Clone)","text":"<p>Remote conditions are checked via API before cloning the repository. They are faster and more efficient than local conditions.</p> <p>Advantages:</p> <ul> <li>\u26a1 No repository cloning required</li> <li>\ud83d\udcbe Saves bandwidth and disk space</li> <li>\ud83d\ude80 Faster workflow evaluation</li> <li>\u2705 Early filtering (fail fast)</li> </ul> <p>Limitations:</p> <ul> <li>Limited to single file content checks</li> <li>No glob pattern support for content matching</li> <li>API rate limits may apply</li> </ul>"},{"location":"workflow-conditions/#remote_file_exists","title":"remote_file_exists","text":"<p>Check if a file exists using GitHub/GitLab API.</p> <p>Type: <code>string</code> (file path or glob pattern)</p> <pre><code>[[conditions]]\nremote_file_exists = \"setup.cfg\"\n</code></pre> <p>Glob pattern support: <pre><code>[[conditions]]\nremote_file_exists = \"**/*.tf\"  # Any Terraform file recursively\n</code></pre></p> <p>Real-world example: <pre><code>[[conditions]]\nremote_file_exists = \"setup.cfg\"\n</code></pre></p> <p>Why? Workflow migrates projects from setup.cfg to pyproject.toml, so it only runs on projects that still have setup.cfg.</p>"},{"location":"workflow-conditions/#remote_file_not_exists","title":"remote_file_not_exists","text":"<p>Check if a file does NOT exist using GitHub/GitLab API.</p> <p>Type: <code>string</code> (file path or glob pattern)</p> <pre><code>[[conditions]]\nremote_file_not_exists = \"pyproject.toml\"\n</code></pre> <p>Real-world example: <pre><code>[[conditions]]\nremote_file_not_exists = \"pyproject.toml\"\n</code></pre></p> <p>Why? Combined with <code>remote_file_exists = \"setup.cfg\"</code>, this targets projects that haven't been migrated yet (have setup.cfg but no pyproject.toml).</p>"},{"location":"workflow-conditions/#remote_file_contains-remote_file","title":"remote_file_contains + remote_file","text":"<p>Check if a file contains specific text or matches a regex pattern.</p> <p>Type: <code>string</code> (pattern to search for)</p> <p>Requires: <code>remote_file</code> field with target file path</p> <pre><code>[[conditions]]\nremote_file_contains = \"python.*3\\\\.9\"\nremote_file = \"setup.cfg\"\n</code></pre> <p>Pattern matching:</p> <ol> <li>String search first (fast)</li> <li>Falls back to regex if string not found</li> <li>Use regex escaping: <code>\\\\.</code> for literal <code>.</code>, <code>\\\\d</code> for digits</li> </ol> <p>Example - exact string: <pre><code>[[conditions]]\nremote_file_contains = \"FROM python:3.9\"\nremote_file = \"Dockerfile\"\n</code></pre></p> <p>Example - regex pattern: <pre><code>[[conditions]]\nremote_file_contains = \"python_requires.*=[\\\"']&gt;=3\\\\.(9|10)\"\nremote_file = \"setup.cfg\"\n</code></pre></p>"},{"location":"workflow-conditions/#remote_file_doesnt_contain-remote_file","title":"remote_file_doesnt_contain + remote_file","text":"<p>Check if a file does NOT contain a pattern.</p> <pre><code>[[conditions]]\nremote_file_doesnt_contain = \"python.*3\\\\.12\"\nremote_file = \"pyproject.toml\"\n</code></pre>"},{"location":"workflow-conditions/#remote_client","title":"remote_client","text":"<p>Specify which API client to use for remote checks.</p> <p>Type: <code>string</code></p> <p>Values: <code>\"github\"</code> (default), <code>\"gitlab\"</code></p> <pre><code>[[conditions]]\nremote_client = \"gitlab\"\nremote_file_exists = \".gitlab-ci.yml\"\n</code></pre>"},{"location":"workflow-conditions/#local-conditions-post-clone","title":"Local Conditions (Post-Clone)","text":"<p>Local conditions are checked after cloning the repository. They have full filesystem access and support glob patterns.</p> <p>Advantages:</p> <ul> <li>\u2705 Full glob pattern support</li> <li>\u2705 Access to all files, even .gitignored</li> <li>\u2705 Complex pattern matching</li> <li>\u2705 Directory checks</li> </ul> <p>Disadvantages:</p> <ul> <li>\ud83d\udc0c Requires git clone first</li> <li>\ud83d\udcbe Uses bandwidth and disk space</li> <li>\u23f1\ufe0f Slower than remote conditions</li> </ul>"},{"location":"workflow-conditions/#file_exists","title":"file_exists","text":"<p>Check if a file or directory exists locally.</p> <p>Type: <code>ResourceUrl</code> (path relative to repository)</p> <p>Supports: Glob patterns</p> <pre><code>[[conditions]]\nfile_exists = \"Dockerfile\"\n</code></pre> <p>Glob patterns: <pre><code>[[conditions]]\nfile_exists = \"**/*.py\"  # Any Python file recursively\n\n[[conditions]]\nfile_exists = \"src/**/__init__.py\"  # __init__.py in any src subdirectory\n</code></pre></p> <p>Real-world example from example-workflow (action-level): <pre><code>[[actions]]\nname = \"extract-constraints\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"{{ extract_image_from_dockerfile('repository/Dockerfile') }}\"\nsource = \"/tmp/constraints.txt\"\ndestination = \"extracted:///constraints.txt\"\n\n[[actions.conditions]]\nfile_exists = \"Dockerfile\"\n</code></pre></p> <p>Why? Only extract Docker constraints if project has a Dockerfile.</p>"},{"location":"workflow-conditions/#file_not_exists","title":"file_not_exists","text":"<p>Check if a file or directory does NOT exist locally.</p> <pre><code>[[conditions]]\nfile_not_exists = \".travis.yml\"  # No legacy CI\n</code></pre> <p>Real-world example from example-workflow (action-level): <pre><code>[[actions]]\nname = \"extract-original-compose-yml\"\ntype = \"git\"\ncommand = \"extract\"\ncommit_keyword = \"migration\"\nsource = \"compose.yml\"\ndestination = \"extracted:///compose.original.yaml\"\n\n[[actions.conditions]]\nfile_not_exists = \"extracted:///compose.original.yaml\"\n</code></pre></p> <p>Why? Only attempt to extract compose.yml from git history if we haven't already extracted it from a previous attempt (compose.yaml).</p>"},{"location":"workflow-conditions/#file_contains-file","title":"file_contains + file","text":"<p>Check if a file contains specific text or matches a regex pattern.</p> <p>Type: <code>string</code> (pattern to search for)</p> <p>Requires: <code>file</code> field with target file path</p> <pre><code>[[conditions]]\nfile_contains = \"FROM python:3\\\\.9\"\nfile = \"Dockerfile\"\n</code></pre> <p>Pattern matching:</p> <ol> <li>String search first (fast)</li> <li>Falls back to regex if string not found</li> <li>Use regex escaping: <code>\\\\.</code> for literal <code>.</code>, <code>\\\\d</code> for digits</li> </ol> <p>Example - Check Python version: <pre><code>[[conditions]]\nfile_contains = \"python.*3\\\\.(9|10|11)\"\nfile = \"pyproject.toml\"\n</code></pre></p> <p>Example - Check dependencies: <pre><code>[[conditions]]\nfile_contains = \"fastapi.*==.*0\\\\.\"\nfile = \"requirements.txt\"\n</code></pre></p>"},{"location":"workflow-conditions/#file_doesnt_contain-file","title":"file_doesnt_contain + file","text":"<p>Check if a file does NOT contain a pattern.</p> <pre><code>[[conditions]]\nfile_doesnt_contain = \"python.*2\\\\.\"\nfile = \"setup.py\"\n</code></pre>"},{"location":"workflow-conditions/#condition-evaluation","title":"Condition Evaluation","text":""},{"location":"workflow-conditions/#condition_type","title":"condition_type","text":"<p>Controls how multiple conditions are evaluated.</p> <p>Type: <code>string</code></p> <p>Values: <code>\"all\"</code> (AND logic), <code>\"any\"</code> (OR logic)</p> <p>Default: <code>\"all\"</code></p>"},{"location":"workflow-conditions/#and-logic-condition_type-all","title":"AND Logic (condition_type = \"all\")","text":"<p>ALL conditions must pass for execution to proceed.</p> <pre><code>condition_type = \"all\"  # All conditions must pass (default)\n\n[[conditions]]\nremote_file_exists = \"setup.cfg\"\n\n[[conditions]]\nremote_file_not_exists = \"pyproject.toml\"\n</code></pre> <p>Real-world example: <pre><code># Workflow level - targets un-migrated projects\n[[conditions]]\nremote_file_exists = \"setup.cfg\"\n\n[[conditions]]\nremote_file_not_exists = \"pyproject.toml\"\n</code></pre></p> <p>Result: Only processes projects that have setup.cfg AND don't have pyproject.toml (haven't been migrated yet).</p>"},{"location":"workflow-conditions/#or-logic-condition_type-any","title":"OR Logic (condition_type = \"any\")","text":"<p>ANY ONE condition passing is sufficient for execution.</p> <pre><code>condition_type = \"any\"  # Any condition passing is sufficient\n\n[[conditions]]\nremote_file_exists = \"requirements.txt\"\n\n[[conditions]]\nremote_file_exists = \"pyproject.toml\"\n\n[[conditions]]\nremote_file_exists = \"setup.py\"\n</code></pre> <p>Result: Executes if project has ANY Python configuration file.</p>"},{"location":"workflow-conditions/#real-world-examples","title":"Real-World Examples","text":""},{"location":"workflow-conditions/#example-1-workflow-level-conditions-example-workflow","title":"Example 1: Workflow-Level Conditions (example-workflow)","text":"<pre><code># Only target Python projects that still use setup.cfg\n[[conditions]]\nremote_file_exists = \"setup.cfg\"\n\n[[conditions]]\nremote_file_not_exists = \"pyproject.toml\"\n</code></pre> <p>What it does:</p> <ol> <li>\u2705 Project must have <code>setup.cfg</code> (old configuration)</li> <li>\u2705 Project must NOT have <code>pyproject.toml</code> (not yet migrated)</li> </ol> <p>Why remote conditions? These checks happen before cloning, so we avoid cloning projects that don't need migration. For 1000 projects, this might only clone 50 that need fixing.</p>"},{"location":"workflow-conditions/#example-2-action-level-conditions-conditional-docker-extraction","title":"Example 2: Action-Level Conditions (Conditional Docker Extraction)","text":"<pre><code>[[actions]]\nname = \"extract-constraints\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"{{ extract_image_from_dockerfile('repository/Dockerfile') }}\"\nsource = \"/tmp/constraints.txt\"\ndestination = \"extracted:///constraints.txt\"\n\n[[actions.conditions]]\nfile_exists = \"Dockerfile\"\n</code></pre> <p>What it does:</p> <ul> <li>Only extracts Docker constraints if project has a Dockerfile</li> <li>If no Dockerfile, action is skipped (not a failure)</li> </ul> <p>Why action-level? Not all Python projects use Docker, so this action should only run when applicable.</p>"},{"location":"workflow-conditions/#example-3-multiple-action-conditions-compose-file-variations","title":"Example 3: Multiple Action Conditions (Compose File Variations)","text":"<pre><code>[[actions]]\nname = \"extract-original-docker-compose-yml\"\ntype = \"git\"\ncommand = \"extract\"\ncommit_keyword = \"migration\"\nsource = \"docker-compose.yml\"\ndestination = \"extracted:///compose.original.yaml\"\nignore_errors = true\n\n[[actions.conditions]]\nfile_not_exists = \"extracted:///compose.original.yaml\"\n\n[[actions.conditions]]\nfile_exists = \"repository:///compose.yaml\"\n</code></pre> <p>What it does:</p> <ol> <li>\u2705 Only extract if we haven't already extracted a compose file</li> <li>\u2705 Only extract if project currently has compose.yaml</li> </ol> <p>Why both conditions? Projects might have compose.yaml, compose.yml, docker-compose.yaml, or docker-compose.yml. The workflow tries each variant in sequence, but stops once one succeeds.</p>"},{"location":"workflow-conditions/#example-4-conditional-dockerfile-update","title":"Example 4: Conditional Dockerfile Update","text":"<pre><code>[[actions]]\nname = \"generate-dockerfile\"\ntype = \"claude\"\nprompt = \"prompts/dockerfile.md.j2\"\nvalidation_prompt = \"prompts/validate-dockerfile.md.j2\"\n\n[[actions.conditions]]\nfile_exists = \"repository:///Dockerfile\"\n</code></pre> <p>What it does:</p> <ul> <li>Only runs Claude to update Dockerfile if project has one</li> <li>Projects without Docker are skipped gracefully</li> </ul> <p>Why ResourceUrl? The <code>repository:///</code> prefix ensures we're checking the cloned repository, not extracted files.</p>"},{"location":"workflow-conditions/#example-5-multiple-condition-fallbacks","title":"Example 5: Multiple Condition Fallbacks","text":"<p>This pattern from example-workflow tries multiple compose file names:</p> <pre><code># Try compose.yaml first\n[[actions]]\nname = \"extract-original-compose-yaml\"\ntype = \"git\"\ncommand = \"extract\"\nsource = \"compose.yaml\"\ndestination = \"extracted:///compose.original.yaml\"\n\n# Try compose.yml if compose.yaml wasn't found\n[[actions]]\nname = \"extract-original-compose-yml\"\ntype = \"git\"\ncommand = \"extract\"\nsource = \"compose.yml\"\ndestination = \"extracted:///compose.original.yaml\"\n\n[[actions.conditions]]\nfile_not_exists = \"extracted:///compose.original.yaml\"  # Only if previous failed\n\n# Try docker-compose.yaml\n[[actions]]\nname = \"extract-original-docker-compose-yaml\"\ntype = \"git\"\ncommand = \"extract\"\nsource = \"docker-compose.yaml\"\ndestination = \"extracted:///compose.original.yaml\"\n\n[[actions.conditions]]\nfile_not_exists = \"extracted:///compose.original.yaml\"\n\n# Try docker-compose.yml\n[[actions]]\nname = \"extract-original-docker-compose-yml\"\ntype = \"git\"\ncommand = \"extract\"\nsource = \"docker-compose.yml\"\ndestination = \"extracted:///compose.original.yaml\"\n\n[[actions.conditions]]\nfile_not_exists = \"extracted:///compose.original.yaml\"\n</code></pre> <p>What it does:</p> <ol> <li>Try <code>compose.yaml</code> (modern name)</li> <li>If that fails, try <code>compose.yml</code></li> <li>If that fails, try <code>docker-compose.yaml</code></li> <li>If that fails, try <code>docker-compose.yml</code></li> <li>Stop at first success</li> </ol> <p>Why this pattern? Docker Compose supports multiple filenames, and different projects use different conventions. This ensures we find the file regardless of naming.</p>"},{"location":"workflow-conditions/#best-practices","title":"Best Practices","text":""},{"location":"workflow-conditions/#1-use-remote-conditions-first","title":"1. Use Remote Conditions First","text":"<pre><code># \u2705 Good - check remotely before cloning\n[[conditions]]\nremote_file_exists = \"package.json\"\n\n[[conditions]]\nremote_file_contains = \"node.*18\"\nremote_file = \".nvmrc\"\n\n# \u274c Slower - clones every repository\n[[conditions]]\nfile_exists = \"package.json\"\n\n[[conditions]]\nfile_contains = \"node.*18\"\nfile = \".nvmrc\"\n</code></pre> <p>Performance impact: For 1000 projects, remote conditions might process 50, while local conditions require cloning all 1000 first.</p>"},{"location":"workflow-conditions/#2-combine-and-logic-for-precision","title":"2. Combine AND Logic for Precision","text":"<pre><code>condition_type = \"all\"  # All must pass (default)\n\n[[conditions]]\nremote_file_exists = \"Dockerfile\"\n\n[[conditions]]\nremote_file_contains = \"FROM python:3\\\\.9\"\nremote_file = \"Dockerfile\"\n\n[[conditions]]\nremote_file_not_exists = \"pyproject.toml\"\n</code></pre> <p>Result: Only Python 3.9 Docker projects without pyproject.toml.</p>"},{"location":"workflow-conditions/#3-use-or-logic-for-flexibility","title":"3. Use OR Logic for Flexibility","text":"<pre><code>condition_type = \"any\"  # Any one passing is sufficient\n\n[[conditions]]\nremote_file_exists = \"setup.py\"\n\n[[conditions]]\nremote_file_exists = \"setup.cfg\"\n\n[[conditions]]\nremote_file_exists = \"pyproject.toml\"\n</code></pre> <p>Result: Any Python project with configuration.</p>"},{"location":"workflow-conditions/#4-action-conditions-for-optional-steps","title":"4. Action Conditions for Optional Steps","text":"<pre><code>[[actions]]\nname = \"update-dockerfile\"\ntype = \"file\"\n\n[[actions.conditions]]\nfile_exists = \"Dockerfile\"  # Skip if no Docker\n\n[[actions]]\nname = \"run-tests\"\ntype = \"shell\"\ncommand = \"pytest tests/\"\n\n[[actions.conditions]]\nfile_exists = \"tests/\"  # Skip if no tests\n</code></pre> <p>Why? Not all projects need all actions. Conditions allow graceful degradation.</p>"},{"location":"workflow-conditions/#5-avoid-over-filtering","title":"5. Avoid Over-Filtering","text":"<pre><code># \u274c Too restrictive - might miss valid projects\n[[conditions]]\nremote_file_contains = \"python_requires.*=.*['\\\"]3\\\\.9['\\\"]\"\nremote_file = \"setup.cfg\"\n\n# \u2705 Better - allows variations\n[[conditions]]\nremote_file_contains = \"python.*3\\\\.9\"\nremote_file = \"setup.cfg\"\n</code></pre> <p>Why? The second pattern matches more variations in how version might be specified.</p>"},{"location":"workflow-conditions/#condition-vs-filter","title":"Condition vs Filter","text":"Feature Filters Remote Conditions Local Conditions When evaluated Before processing Before cloning After cloning Data source Imbi metadata GitHub/GitLab API Local filesystem Speed \u26a1\u26a1\u26a1 Fastest \u26a1\u26a1 Fast \u26a1 Slower Use for Project metadata File existence/content Complex patterns Glob support No Limited Full Bandwidth None Minimal High <p>Best practice: Use all three in combination:</p> <ol> <li>Filters for broad technology targeting</li> <li>Remote conditions for file-based applicability</li> <li>Local conditions for complex repository checks</li> </ol>"},{"location":"workflow-conditions/#complete-example","title":"Complete Example","text":"<p>This is the actual condition strategy from example-workflow:</p> <pre><code># Filter: Broad targeting\n[filter]\nproject_types = [\"apis\", \"consumers\", ...]\nproject_facts = {\"programming_language\" = \"Python 3.9\"}\ngithub_identifier_required = true\ngithub_workflow_status_exclude = [\"success\"]\n\n# Workflow conditions: Migration applicability\n[[conditions]]\nremote_file_exists = \"setup.cfg\"\n\n[[conditions]]\nremote_file_not_exists = \"pyproject.toml\"\n\n# Action conditions: Optional steps\n[[actions]]\nname = \"extract-constraints\"\ntype = \"docker\"\n\n[[actions.conditions]]\nfile_exists = \"Dockerfile\"  # Only if Docker is used\n\n[[actions]]\nname = \"ensure-correct-pins\"\ntype = \"claude\"\n\n[[actions.conditions]]\nfile_exists = \"Dockerfile\"  # Only if Docker is used\n\n[[actions]]\nname = \"generate-dockerfile\"\ntype = \"claude\"\n\n[[actions.conditions]]\nfile_exists = \"repository:///Dockerfile\"  # Only if Dockerfile exists\n</code></pre> <p>Result:</p> <ol> <li>Filter reduces 1000 projects \u2192 50 Python 3.9 projects with failing builds</li> <li>Remote conditions reduce 50 projects \u2192 30 projects needing migration (have setup.cfg, no pyproject.toml)</li> <li>Action conditions skip Docker-related actions for non-Docker projects</li> </ol>"},{"location":"workflow-conditions/#see-also","title":"See Also","text":"<ul> <li>Workflow Filters - Pre-filtering projects by metadata</li> <li>Workflow Configuration - Complete configuration reference</li> <li>Workflows Overview - High-level concepts and best practices</li> </ul>"},{"location":"workflow-configuration/","title":"Workflow Configuration Reference","text":"<p>Complete field reference for workflow <code>config.toml</code> files with detailed descriptions, types, defaults, and examples.</p> <p>Tip: Workflow configuration syntax is validated on startup</p>"},{"location":"workflow-configuration/#configuration-structure","title":"Configuration Structure","text":"<p>A complete workflow configuration includes:</p> <pre><code># Workflow Metadata\nname = \"workflow-name\"\ndescription = \"Optional description\"\nprompt = \"workflow:///prompts/base.md\"\n\n# Project Filtering\n[filter]\nproject_ids = [123, 456]\nproject_types = [\"api\"]\nproject_facts = {\"Programming Language\" = \"Python 3.12\"}\ngithub_identifier_required = true\ngithub_workflow_status_exclude = [\"success\"]\n\n# Git Configuration\n[git]\nclone = true\ndepth = 1\nref = \"main\"\nstarting_branch = \"main\"\nci_skip_checks = false\nclone_type = \"ssh\"  # or \"http\"\n\n# GitHub Configuration\n[github]\ncreate_pull_request = true\nreplace_branch = false\n\n# GitLab Configuration\n[gitlab]\ncreate_merge_request = true\nreplace_branch = false\n\n# Workflow-Level Conditions\ncondition_type = \"all\"  # or \"any\"\n\n[[conditions]]\nremote_file_exists = \"file.txt\"\n\n# Actions\n[[actions]]\nname = \"action-name\"\ntype = \"file\"\n# ... action-specific fields\n</code></pre>"},{"location":"workflow-configuration/#workflow-metadata","title":"Workflow Metadata","text":""},{"location":"workflow-configuration/#name-required","title":"name (required)","text":"<p>Workflow display name shown in logs, reports, and pull requests.</p> <p>Type: <code>string</code></p> <pre><code>name = \"Update Python Dependencies\"\n</code></pre>"},{"location":"workflow-configuration/#description-optional","title":"description (optional)","text":"<p>Human-readable description of workflow purpose and goals.</p> <p>Type: <code>string</code></p> <p>Default: None</p> <pre><code>description = \"Updates Python dependencies to latest compatible versions while maintaining compatibility\"\n</code></pre>"},{"location":"workflow-configuration/#prompt-optional","title":"prompt (optional)","text":"<p>Base prompt file for Claude Code actions. This prompt is prepended to all Claude actions in the workflow unless they specify their own prompt.</p> <p>Type: <code>ResourceUrl</code> (path to prompt template file)</p> <p>Default: None</p> <pre><code>prompt = \"workflow:///prompts/base-context.md\"\n</code></pre> <p>Usage: Provides shared context across all Claude actions in the workflow.</p>"},{"location":"workflow-configuration/#git-configuration","title":"Git Configuration","text":"<p>The <code>[git]</code> section controls repository cloning and commit behavior.</p>"},{"location":"workflow-configuration/#clone","title":"clone","text":"<p>Whether to clone the repository from the remote.</p> <p>Type: <code>boolean</code></p> <p>Default: <code>true</code></p> <pre><code>[git]\nclone = true\n</code></pre> <p>When to use <code>false</code>: API-only workflows that don't need repository access.</p>"},{"location":"workflow-configuration/#depth","title":"depth","text":"<p>Shallow clone depth (number of commits to fetch).</p> <p>Type: <code>integer</code></p> <p>Default: <code>1</code></p> <pre><code>[git]\ndepth = 1  # Shallow clone (fastest)\n\n# OR\n\n[git]\ndepth = 100  # More history available for git operations\n</code></pre> <p>Use cases:</p> <ul> <li><code>depth = 1</code>: Fastest, use for most workflows</li> <li><code>depth = 100+</code>: When extracting files from commit history</li> </ul>"},{"location":"workflow-configuration/#ref","title":"ref","text":"<p>Git reference (branch, tag, or commit SHA) to clone.</p> <p>Type: <code>string</code></p> <p>Default: Repository's default branch</p> <pre><code>[git]\nref = \"main\"\n\n# OR\n\n[git]\nref = \"v1.2.3\"  # Clone specific tag\n\n# OR\n\n[git]\nref = \"abc123\"  # Clone specific commit\n</code></pre>"},{"location":"workflow-configuration/#starting_branch","title":"starting_branch","text":"<p>Branch name to use as starting point for workflow branch.</p> <p>Type: <code>string</code></p> <p>Default: Repository's default branch</p> <pre><code>[git]\nstarting_branch = \"develop\"  # Branch from develop instead of main\n</code></pre>"},{"location":"workflow-configuration/#ci_skip_checks","title":"ci_skip_checks","text":"<p>Whether to skip CI/CD checks in commit messages.</p> <p>Type: <code>boolean</code></p> <p>Default: <code>false</code></p> <pre><code>[git]\nci_skip_checks = true  # Adds [skip ci] to commit messages\n</code></pre>"},{"location":"workflow-configuration/#clone_type","title":"clone_type","text":"<p>Protocol to use for cloning repositories.</p> <p>Type: <code>string</code></p> <p>Values: <code>\"ssh\"</code> (default), <code>\"http\"</code></p> <pre><code>[git]\nclone_type = \"ssh\"  # Use SSH keys (default)\n\n# OR\n\n[git]\nclone_type = \"http\"  # Use HTTPS (requires token)\n</code></pre>"},{"location":"workflow-configuration/#github-configuration","title":"GitHub Configuration","text":"<p>The <code>[github]</code> section controls GitHub pull request creation and branch management.</p>"},{"location":"workflow-configuration/#create_pull_request","title":"create_pull_request","text":"<p>Whether to create a pull request after committing changes.</p> <p>Type: <code>boolean</code></p> <p>Default: <code>true</code></p> <pre><code>[github]\ncreate_pull_request = true\n</code></pre> <p>When to use <code>false</code>: Direct commits to main (not recommended), testing workflows.</p>"},{"location":"workflow-configuration/#replace_branch","title":"replace_branch","text":"<p>Delete and recreate remote branch if it already exists.</p> <p>Type: <code>boolean</code></p> <p>Default: <code>false</code></p> <pre><code>[github]\ncreate_pull_request = true\nreplace_branch = true  # Force-replace existing PR branch\n</code></pre> <p>Requirements: <code>create_pull_request</code> must be <code>true</code>.</p> <p>Use cases:</p> <ul> <li>Updating failed workflow runs</li> <li>Re-running workflows with fixes</li> <li>Forcing clean state</li> </ul> <p>Warning: Destroys existing PR branch and its history.</p>"},{"location":"workflow-configuration/#gitlab-configuration","title":"GitLab Configuration","text":"<p>The <code>[gitlab]</code> section controls GitLab merge request creation and branch management.</p>"},{"location":"workflow-configuration/#create_merge_request","title":"create_merge_request","text":"<p>Whether to create a merge request after committing changes.</p> <p>Type: <code>boolean</code></p> <p>Default: <code>true</code></p> <pre><code>[gitlab]\ncreate_merge_request = true\n</code></pre>"},{"location":"workflow-configuration/#replace_branch_1","title":"replace_branch","text":"<p>Delete and recreate remote branch if it already exists.</p> <p>Type: <code>boolean</code></p> <p>Default: <code>false</code></p> <pre><code>[gitlab]\ncreate_merge_request = true\nreplace_branch = false\n</code></pre> <p>Requirements: <code>create_merge_request</code> must be <code>true</code>.</p>"},{"location":"workflow-configuration/#workflow-level-conditions","title":"Workflow-Level Conditions","text":"<p>Workflow conditions determine if the entire workflow should execute for a project. See Workflow Conditions for detailed documentation.</p>"},{"location":"workflow-configuration/#condition_type","title":"condition_type","text":"<p>How to evaluate multiple conditions.</p> <p>Type: <code>string</code></p> <p>Values: <code>\"all\"</code> (AND logic), <code>\"any\"</code> (OR logic)</p> <p>Default: <code>\"all\"</code></p> <pre><code>condition_type = \"all\"  # All conditions must pass\n\n[[conditions]]\nremote_file_exists = \"package.json\"\n\n[[conditions]]\nremote_file_contains = \"node.*18\"\nremote_file = \".nvmrc\"\n</code></pre> <p>With <code>condition_type = \"all\"</code>, workflow executes only if BOTH conditions pass.</p> <pre><code>condition_type = \"any\"  # Any one condition passing is sufficient\n\n[[conditions]]\nremote_file_exists = \"requirements.txt\"\n\n[[conditions]]\nremote_file_exists = \"pyproject.toml\"\n</code></pre> <p>With <code>condition_type = \"any\"</code>, workflow executes if EITHER file exists.</p>"},{"location":"workflow-configuration/#conditions","title":"[[conditions]]","text":"<p>Array of condition objects. See Workflow Conditions for complete condition types and examples.</p> <p>Condition Types:</p> <ul> <li>Remote conditions (checked via API before cloning)</li> <li><code>remote_file_exists</code> / <code>remote_file_not_exists</code></li> <li> <p><code>remote_file_contains</code> / <code>remote_file_doesnt_contain</code> + <code>remote_file</code></p> </li> <li> <p>Local conditions (checked after cloning)</p> </li> <li><code>file_exists</code> / <code>file_not_exists</code></li> <li><code>file_contains</code> / <code>file_doesnt_contain</code> + <code>file</code></li> </ul> <p>Example: <pre><code>[[conditions]]\nremote_file_exists = \"Dockerfile\"\n\n[[conditions]]\nremote_file_contains = \"FROM python:3\"\nremote_file = \"Dockerfile\"\n</code></pre></p>"},{"location":"workflow-configuration/#actions","title":"Actions","text":"<p>Actions define the operations to perform during workflow execution. Each action has common fields plus type-specific configuration.</p>"},{"location":"workflow-configuration/#common-action-fields","title":"Common Action Fields","text":"<p>All actions support these fields:</p>"},{"location":"workflow-configuration/#name-required_1","title":"name (required)","text":"<p>Action identifier for logging and error messages.</p> <p>Type: <code>string</code></p> <pre><code>[[actions]]\nname = \"copy-gitignore\"\n</code></pre>"},{"location":"workflow-configuration/#type-required","title":"type (required)","text":"<p>Action type determines which operation to perform.</p> <p>Type: <code>string</code></p> <p>Values: <code>callable</code>, <code>claude</code>, <code>docker</code>, <code>file</code>, <code>git</code>, <code>github</code>, <code>imbi</code>, <code>shell</code>, <code>template</code>, <code>utility</code></p> <pre><code>[[actions]]\ntype = \"file\"\n</code></pre> <p>See Actions Reference for complete documentation of each action type.</p>"},{"location":"workflow-configuration/#ai_commit-optional","title":"ai_commit (optional)","text":"<p>Use AI to generate commit message for this action's changes.</p> <p>Type: <code>boolean</code></p> <p>Default: <code>false</code></p> <p>Requires: Anthropic API key configured</p> <pre><code>[[actions]]\nname = \"complex-refactor\"\ntype = \"claude\"\nai_commit = true  # AI-generated commit message\n</code></pre>"},{"location":"workflow-configuration/#committable-optional","title":"committable (optional)","text":"<p>Whether this action's changes should be included in git commits.</p> <p>Type: <code>boolean</code></p> <p>Default: <code>true</code></p> <pre><code>[[actions]]\nname = \"temporary-analysis\"\ntype = \"file\"\ncommand = \"write\"\ncommittable = false  # Don't commit this file\n</code></pre> <p>Use cases:</p> <ul> <li>Temporary files for other actions</li> <li>Diagnostic output files</li> <li>Intermediate processing artifacts</li> </ul>"},{"location":"workflow-configuration/#on_success-optional","title":"on_success (optional)","text":"<p>Action name to jump to if this action succeeds.</p> <p>Type: <code>string</code> (action name)</p> <pre><code>[[actions]]\nname = \"try-fast-method\"\ntype = \"shell\"\ncommand = \"fast-operation\"\non_success = \"skip-slow-method\"\n\n[[actions]]\nname = \"slow-fallback\"\n# This will be skipped if fast method succeeds\n\n[[actions]]\nname = \"skip-slow-method\"\n# Execution resumes here\n</code></pre>"},{"location":"workflow-configuration/#on_failure-optional","title":"on_failure (optional)","text":"<p>Action name to restart from if this action fails after all retry cycles.</p> <p>Type: <code>string</code> (action name)</p> <p>Max Retries: 3 per action</p> <pre><code>[[actions]]\nname = \"backup-files\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///src/\"\ndestination = \"extracted:///src.backup/\"\n\n[[actions]]\nname = \"risky-transformation\"\ntype = \"claude\"\nprompt = \"prompts/transform.md\"\non_failure = \"restore-backup\"\n\n[[actions]]\nname = \"restore-backup\"\ntype = \"file\"\ncommand = \"move\"\nsource = \"extracted:///src.backup/\"\ndestination = \"repository:///src/\"\n</code></pre>"},{"location":"workflow-configuration/#timeout-optional","title":"timeout (optional)","text":"<p>Maximum execution time for action in seconds.</p> <p>Type: <code>integer</code></p> <p>Default: <code>3600</code> (1 hour)</p> <pre><code>[[actions]]\nname = \"long-running-build\"\ntype = \"shell\"\ncommand = \"make build\"\ntimeout = 7200  # 2 hours\n</code></pre>"},{"location":"workflow-configuration/#filter-optional","title":"filter (optional)","text":"<p>Project filter to apply for this specific action. Uses same filter format as workflow-level <code>[filter]</code>.</p> <p>Type: <code>WorkflowFilter</code> object</p> <pre><code>[[actions]]\nname = \"api-specific-update\"\ntype = \"file\"\n\n# Only execute this action for API projects\n[actions.filter]\nproject_types = [\"api\"]\n</code></pre>"},{"location":"workflow-configuration/#condition_type-optional","title":"condition_type (optional)","text":"<p>How to evaluate multiple action conditions.</p> <p>Type: <code>string</code></p> <p>Values: <code>\"all\"</code> (default), <code>\"any\"</code></p> <pre><code>[[actions]]\nname = \"update-python-config\"\ntype = \"template\"\ncondition_type = \"any\"  # Execute if ANY config file exists\n\n[[actions.conditions]]\nfile_exists = \"setup.py\"\n\n[[actions.conditions]]\nfile_exists = \"pyproject.toml\"\n\n[[actions.conditions]]\nfile_exists = \"requirements.txt\"\n</code></pre>"},{"location":"workflow-configuration/#actionsconditions","title":"[[actions.conditions]]","text":"<p>Array of conditions that must pass for this action to execute. Same condition types as workflow-level conditions.</p> <p>Example: <pre><code>[[actions]]\nname = \"update-dockerfile\"\ntype = \"file\"\n\n[[actions.conditions]]\nfile_exists = \"Dockerfile\"\n\n[[actions.conditions]]\nfile_contains = \"FROM python:3\\\\.11\"\nfile = \"Dockerfile\"\n</code></pre></p> <p>See Workflow Conditions for detailed condition documentation.</p>"},{"location":"workflow-configuration/#data-optional","title":"data (optional)","text":"<p>Custom data dictionary for action-specific use.</p> <p>Type: <code>dict[string, any]</code></p> <p>Default: <code>{}</code></p> <pre><code>[[actions]]\nname = \"custom-action\"\ntype = \"callable\"\n\n[actions.data]\ncustom_field = \"value\"\nnested = { key = \"value\" }\n</code></pre>"},{"location":"workflow-configuration/#action-specific-fields","title":"Action-Specific Fields","text":"<p>Each action type has additional required and optional fields. See the Actions Reference for complete documentation:</p> <ul> <li>Callable Actions - <code>import</code>, <code>callable</code>, <code>args</code>, <code>kwargs</code></li> <li>Claude Actions - <code>prompt</code>, <code>validation_prompt</code>, <code>max_cycles</code></li> <li>Docker Actions - <code>command</code>, <code>image</code>, <code>tag</code>, <code>source</code>, <code>destination</code></li> <li>File Actions - <code>command</code>, <code>path</code>, <code>source</code>, <code>destination</code>, <code>content</code>, <code>pattern</code></li> <li>Git Actions - <code>command</code>, <code>source</code>, <code>destination</code>, <code>url</code>, <code>commit_keyword</code></li> <li>GitHub Actions - <code>command</code></li> <li>Imbi Actions - <code>command</code></li> <li>Shell Actions - <code>command</code>, <code>working_directory</code>, <code>ignore_errors</code></li> <li>Template Actions - <code>source_path</code>, <code>destination_path</code></li> <li>Utility Actions - <code>command</code>, <code>path</code>, <code>args</code>, <code>kwargs</code></li> </ul>"},{"location":"workflow-configuration/#complete-example","title":"Complete Example","text":"<pre><code>name = \"Python 3.12 Migration\"\ndescription = \"Migrate Python projects from 3.11 to 3.12\"\nprompt = \"workflow:///prompts/base-python.md\"\n\n[filter]\nproject_types = [\"api\", \"consumer\", \"daemon\"]\nproject_facts = {\"Programming Language\" = \"Python 3.11\"}\ngithub_identifier_required = true\ngithub_workflow_status_exclude = [\"success\"]\n\n[git]\nclone = true\ndepth = 100  # Need history for git extract actions\nstarting_branch = \"main\"\nclone_type = \"ssh\"\n\n[github]\ncreate_pull_request = true\nreplace_branch = true\n\ncondition_type = \"all\"\n\n[[conditions]]\nremote_file_exists = \"pyproject.toml\"\n\n[[conditions]]\nremote_file_contains = \"python.*3\\\\.11\"\nremote_file = \"pyproject.toml\"\n\n[[actions]]\nname = \"backup-pyproject\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///pyproject.toml\"\ndestination = \"extracted:///pyproject.toml.backup\"\ncommittable = false\n\n[[actions]]\nname = \"update-python-version\"\ntype = \"claude\"\nprompt = \"prompts/update-python-version.md\"\nvalidation_prompt = \"prompts/validate-python-version.md\"\nmax_cycles = 3\non_failure = \"restore-backup\"\nai_commit = true\n\n[[actions]]\nname = \"run-tests\"\ntype = \"shell\"\ncommand = \"pytest tests/ -v\"\nworking_directory = \"repository:///\"\ntimeout = 600\n\n[[actions.conditions]]\nfile_exists = \"tests/\"\n\n[[actions]]\nname = \"restore-backup\"\ntype = \"file\"\ncommand = \"move\"\nsource = \"extracted:///pyproject.toml.backup\"\ndestination = \"repository:///pyproject.toml\"\n</code></pre>"},{"location":"workflow-configuration/#see-also","title":"See Also","text":"<ul> <li>Workflow Filters - Detailed filter documentation with examples</li> <li>Workflow Conditions - Comprehensive condition types and patterns</li> <li>Actions Reference - Complete action types documentation</li> <li>Workflows Overview - High-level workflow concepts and best practices</li> </ul>"},{"location":"workflow-filters/","title":"Workflow Filters","text":"<p>Project filters reduce the scope of workflow execution by pre-filtering projects based on Imbi metadata before any workflow processing begins. This is the first and most efficient level of project selection.</p>"},{"location":"workflow-filters/#when-to-use-filters","title":"When to Use Filters","text":"<p>Use filters when you want to:</p> <ul> <li>Target specific project types (APIs, consumers, libraries, etc.)</li> <li>Select projects with specific technology stacks</li> <li>Require GitHub/GitLab integration</li> <li>Exclude projects with passing builds (target only failing ones)</li> <li>Process only a specific subset of projects</li> </ul> <p>Performance benefit: Filtered-out projects are never processed, saving API calls, cloning, and condition evaluation.</p>"},{"location":"workflow-filters/#filter-configuration","title":"Filter Configuration","text":"<p>Filters are defined in the <code>[filter]</code> section of <code>config.toml</code>:</p> <pre><code>[filter]\nproject_ids = [123, 456, 789]\nproject_types = [\"api\", \"consumer\"]\nproject_facts = {\"Programming Language\" = \"Python 3.12\"}\ngithub_identifier_required = true\ngithub_workflow_status_exclude = [\"success\"]\n</code></pre> <p>Filter Logic: ALL filter criteria must match (AND logic). A project must satisfy every filter to be included.</p>"},{"location":"workflow-filters/#filter-fields","title":"Filter Fields","text":""},{"location":"workflow-filters/#project_ids","title":"project_ids","text":"<p>Target specific projects by their Imbi project ID.</p> <p>Type: <code>list[int]</code></p> <p>Default: <code>[]</code> (no ID filtering)</p> <pre><code>[filter]\nproject_ids = [42, 108, 256]\n</code></pre> <p>Use cases:</p> <ul> <li>Testing workflows on specific projects</li> <li>Fixing issues in known problem projects</li> <li>Updating projects that failed in a previous run</li> </ul> <p>Example from real workflow: <pre><code># Test workflow on three projects before full rollout\n[filter]\nproject_ids = [123, 456, 789]\n</code></pre></p>"},{"location":"workflow-filters/#project_types","title":"project_types","text":"<p>Filter by project type slugs from Imbi.</p> <p>Type: <code>list[string]</code></p> <p>Default: <code>[]</code> (no type filtering)</p> <p>Common project types:</p> <ul> <li><code>api</code> / <code>apis</code> - REST APIs and web services</li> <li><code>backend-libraries</code> - Shared backend libraries</li> <li><code>bots</code> - Chat and automation bots</li> <li><code>cli</code> / <code>clis</code> - Command-line tools</li> <li><code>consumer</code> / <code>consumers</code> - Message queue consumers</li> <li><code>daemon</code> / <code>daemons</code> - Background services</li> <li><code>frontend</code> - Web frontends</li> <li><code>plugin</code> / <code>plugins</code> - Extension plugins</li> <li><code>scheduled-job</code> / <code>scheduled-jobs</code> - Cron-like tasks</li> </ul> <pre><code>[filter]\nproject_types = [\"api\", \"consumer\", \"daemon\"]\n</code></pre> <p>Real-world example: <pre><code>[filter]\nproject_types = [\n    \"apis\",\n    \"backend-libraries\",\n    \"bots\",\n    \"clis\",\n    \"consumers\",\n    \"daemons\",\n    \"plugin\",\n    \"scheduled-jobs\"\n]\n</code></pre></p> <p>Why this filter? Excludes frontend projects that don't use Python setup.cfg files.</p>"},{"location":"workflow-filters/#project_facts","title":"project_facts","text":"<p>Filter by exact Imbi project fact values.</p> <p>Type: <code>dict[string, string]</code></p> <p>Default: <code>{}</code> (no fact filtering)</p> <p>Fact matching:</p> <ul> <li>Keys are fact names (case-sensitive)</li> <li>Values must match exactly</li> <li>ALL specified facts must match (AND logic)</li> </ul> <pre><code>[filter]\nproject_facts = {\n    \"Programming Language\" = \"Python 3.12\",\n    \"Framework\" = \"FastAPI\"\n}\n</code></pre> <p>Only projects with BOTH <code>Programming Language = \"Python 3.12\"</code> AND <code>Framework = \"FastAPI\"</code> will be included.</p> <p>Real-world example: <pre><code>[filter]\nproject_facts = {\"programming_language\" = \"Python 3.9\"}\n</code></pre></p> <p>Why this filter? Targets only Python 3.9 projects that need updating.</p> <p>Common fact names:</p> <ul> <li><code>Programming Language</code> - e.g., \"Python 3.12\", \"TypeScript\", \"Go\"</li> <li><code>Framework</code> - e.g., \"FastAPI\", \"Flask\", \"Express\"</li> <li><code>Database</code> - e.g., \"PostgreSQL\", \"MongoDB\"</li> <li><code>Message Queue</code> - e.g., \"RabbitMQ\", \"SQS\"</li> <li><code>Deployment Platform</code> - e.g., \"Kubernetes\", \"ECS\"</li> </ul>"},{"location":"workflow-filters/#github_identifier_required","title":"github_identifier_required","text":"<p>Require projects to have a GitHub repository identifier.</p> <p>Type: <code>boolean</code></p> <p>Default: <code>false</code></p> <pre><code>[filter]\ngithub_identifier_required = true\n</code></pre> <p>Use cases:</p> <ul> <li>GitHub-specific workflows (workflow fixes, PR automation)</li> <li>Projects that must have CI/CD</li> <li>Excluding archived or non-GitHub projects</li> </ul> <p>Real-world example: <pre><code>[filter]\ngithub_identifier_required = true\n</code></pre></p> <p>Why this filter? Workflow creates pull requests, so GitHub integration is required.</p>"},{"location":"workflow-filters/#github_workflow_status_exclude","title":"github_workflow_status_exclude","text":"<p>Exclude projects with specific GitHub Actions workflow statuses.</p> <p>Type: <code>list[string]</code></p> <p>Default: <code>[]</code> (no status filtering)</p> <p>Valid statuses:</p> <ul> <li><code>\"success\"</code> - All workflows passing</li> <li><code>\"failure\"</code> - At least one workflow failing</li> <li><code>\"pending\"</code> - Workflows currently running</li> <li><code>\"skipped\"</code> - Workflows skipped</li> </ul> <pre><code>[filter]\ngithub_workflow_status_exclude = [\"success\"]\n</code></pre> <p>Only projects with failing, pending, or no workflows will be processed.</p> <p>Real-world example: <pre><code>[filter]\ngithub_workflow_status_exclude = [\"success\"]\n</code></pre></p> <p>Why this filter? No need to process projects with passing builds - they don't need fixes.</p> <p>Common patterns: <pre><code># Only process failing builds\n[filter]\ngithub_workflow_status_exclude = [\"success\", \"pending\", \"skipped\"]\n\n# Exclude projects with active/passing workflows\n[filter]\ngithub_workflow_status_exclude = [\"success\", \"pending\"]\n\n# Only process completely broken projects\n[filter]\ngithub_workflow_status_exclude = [\"success\", \"pending\"]\n</code></pre></p>"},{"location":"workflow-filters/#complete-real-world-example","title":"Complete Real-World Example","text":"<p>This is the actual filter from the example-workflow workflow:</p> <pre><code>[filter]\ngithub_identifier_required = true\ngithub_workflow_status_exclude = [\"success\"]\nproject_facts = {\"programming_language\" = \"Python 3.9\"}\nproject_types = [\n    \"apis\",\n    \"backend-libraries\",\n    \"bots\",\n    \"clis\",\n    \"consumers\",\n    \"daemons\",\n    \"plugin\",\n    \"scheduled-jobs\"\n]\n</code></pre> <p>What this filter does:</p> <ol> <li>\u2705 Must have GitHub (<code>github_identifier_required = true</code>)</li> <li>Excludes projects without GitHub integration</li> <li> <p>Ensures PR creation will work</p> </li> <li> <p>\u2705 Exclude passing builds (<code>github_workflow_status_exclude = [\"success\"]</code>)</p> </li> <li>Only processes projects with failing or missing workflows</li> <li> <p>Avoids unnecessary work on healthy projects</p> </li> <li> <p>\u2705 Python 3.9 only (<code>project_facts = {\"programming_language\" = \"Python 3.9\"}</code>)</p> </li> <li>Targets exactly Python 3.9 projects</li> <li> <p>Excludes Python 3.10, 3.11, 3.12, etc.</p> </li> <li> <p>\u2705 Backend projects only (<code>project_types = [...]</code>)</p> </li> <li>Includes APIs, libraries, CLIs, consumers, etc.</li> <li>Excludes frontend projects that don't have setup.cfg</li> </ol> <p>Result: From 1000 total projects \u2192 ~50 projects that need fixing</p>"},{"location":"workflow-filters/#filter-evaluation-flow","title":"Filter Evaluation Flow","text":"<pre><code>All Projects (1000)\n    \u2193\ngithub_identifier_required = true\n    \u2193 (excludes 200 projects without GitHub)\n800 projects remain\n    \u2193\ngithub_workflow_status_exclude = [\"success\"]\n    \u2193 (excludes 600 projects with passing builds)\n200 projects remain\n    \u2193\nproject_facts = {\"programming_language\" = \"Python 3.9\"}\n    \u2193 (excludes 120 non-Python-3.9 projects)\n80 projects remain\n    \u2193\nproject_types = [\"apis\", \"consumers\", ...]\n    \u2193 (excludes 30 frontend projects)\n50 projects match all filters\n</code></pre> <p>These 50 projects then proceed to workflow condition evaluation.</p>"},{"location":"workflow-filters/#common-filter-patterns","title":"Common Filter Patterns","text":""},{"location":"workflow-filters/#target-specific-technology-stack","title":"Target Specific Technology Stack","text":"<pre><code>[filter]\nproject_facts = {\n    \"Programming Language\" = \"Python 3.12\",\n    \"Framework\" = \"FastAPI\",\n    \"Database\" = \"PostgreSQL\"\n}\n</code></pre>"},{"location":"workflow-filters/#python-projects-with-failing-builds","title":"Python Projects with Failing Builds","text":"<pre><code>[filter]\nproject_types = [\"api\", \"consumer\", \"daemon\"]\nproject_facts = {\"Programming Language\" = \"Python 3.12\"}\ngithub_identifier_required = true\ngithub_workflow_status_exclude = [\"success\"]\n</code></pre>"},{"location":"workflow-filters/#specific-project-type-without-github","title":"Specific Project Type Without GitHub","text":"<pre><code>[filter]\nproject_types = [\"backend-libraries\"]\n# No github_identifier_required - includes non-GitHub projects\n</code></pre>"},{"location":"workflow-filters/#testing-filter-small-subset","title":"Testing Filter (Small Subset)","text":"<pre><code>[filter]\nproject_ids = [42, 108, 256]  # Test on 3 projects first\n</code></pre>"},{"location":"workflow-filters/#all-python-projects","title":"All Python Projects","text":"<pre><code>[filter]\n# Use facts to match any Python version\nproject_facts = {\"Programming Language\" = \"Python\"}  # Won't work - needs exact match\n\n# Better: Use multiple workflows or no filter + conditions\n</code></pre> <p>Note: Fact filtering requires exact matches. For partial matching, use workflow conditions with regex.</p>"},{"location":"workflow-filters/#projects-needing-github-actions","title":"Projects Needing GitHub Actions","text":"<pre><code>[filter]\ngithub_identifier_required = true\n# Then use conditions to check for specific workflow files\n</code></pre>"},{"location":"workflow-filters/#filter-performance","title":"Filter Performance","text":"<p>Filters are the most efficient project selection mechanism:</p> <ul> <li>\u2705 No API calls - Uses cached Imbi data</li> <li>\u2705 No git operations - No cloning or remote checks</li> <li>\u2705 Fast evaluation - Simple equality checks</li> <li>\u2705 Early elimination - Reduces downstream processing</li> </ul> <p>Performance comparison for 1000 projects:</p> Method Projects Processed API Calls Git Clones No filters 1000 1000+ 1000 With filters 50 50+ 50 <p>Best practice: Use filters to get close to your target set, then use workflow conditions for fine-grained selection.</p>"},{"location":"workflow-filters/#filter-vs-condition-vs-cli-argument","title":"Filter vs Condition vs CLI Argument","text":""},{"location":"workflow-filters/#cli-arguments","title":"CLI Arguments","text":"<p>Scope: Initial project selection Speed: \u26a1\u26a1\u26a1 Fastest Use for: One-off targeting, testing</p> <pre><code>--project-id 123\n--project-type api\n--all-projects\n</code></pre>"},{"location":"workflow-filters/#filters","title":"Filters","text":"<p>Scope: Workflow-level pre-filtering Speed: \u26a1\u26a1 Very fast Use for: Broad targeting, technology stack selection</p> <pre><code>[filter]\nproject_types = [\"api\"]\nproject_facts = {\"Programming Language\" = \"Python 3.12\"}\n</code></pre>"},{"location":"workflow-filters/#workflow-conditions","title":"Workflow Conditions","text":"<p>Scope: Repository state checks Speed: \u26a1 Fast (remote) or \ud83d\udc0c Slow (local) Use for: File existence, content checking</p> <pre><code>[[conditions]]\nremote_file_exists = \"package.json\"\n</code></pre>"},{"location":"workflow-filters/#action-conditions","title":"Action Conditions","text":"<p>Scope: Per-action execution control Speed: \u26a1 Fast (already cloned) Use for: Conditional behavior within workflow</p> <pre><code>[[actions.conditions]]\nfile_exists = \"setup.py\"\n</code></pre>"},{"location":"workflow-filters/#combining-filters-with-other-mechanisms","title":"Combining Filters with Other Mechanisms","text":""},{"location":"workflow-filters/#filter-workflow-conditions","title":"Filter + Workflow Conditions","text":"<pre><code># Filter: Broad technology targeting\n[filter]\nproject_types = [\"api\"]\nproject_facts = {\"Programming Language\" = \"Python 3.12\"}\n\n# Conditions: Specific repository requirements\n[[conditions]]\nremote_file_exists = \"pyproject.toml\"\n\n[[conditions]]\nremote_file_contains = \"fastapi\"\nremote_file = \"pyproject.toml\"\n</code></pre> <p>Result: FastAPI projects using Python 3.12 with pyproject.toml</p>"},{"location":"workflow-filters/#filter-cli-arguments","title":"Filter + CLI Arguments","text":"<pre><code># CLI: Specific project type\nimbi-automations config.toml workflows/update-python --project-type api\n\n# Workflow filter: Further refinement\n[filter]\nproject_facts = {\"Programming Language\" = \"Python 3.12\"}\ngithub_identifier_required = true\n</code></pre> <p>Result: Python 3.12 APIs with GitHub integration</p>"},{"location":"workflow-filters/#filter-action-conditions","title":"Filter + Action Conditions","text":"<pre><code># Filter: Python projects\n[filter]\nproject_facts = {\"Programming Language\" = \"Python 3.12\"}\n\n[[actions]]\nname = \"update-setup-py\"\ntype = \"file\"\n\n# Action condition: Only if setup.py exists\n[[actions.conditions]]\nfile_exists = \"setup.py\"\n\n[[actions]]\nname = \"update-pyproject\"\ntype = \"file\"\n\n# Action condition: Only if pyproject.toml exists\n[[actions.conditions]]\nfile_exists = \"pyproject.toml\"\n</code></pre> <p>Result: Python 3.12 projects, with different actions for setup.py vs pyproject.toml</p>"},{"location":"workflow-filters/#see-also","title":"See Also","text":"<ul> <li>Workflow Conditions - File existence and content checking</li> <li>Workflow Configuration - Complete configuration reference</li> <li>Workflows Overview - High-level concepts and best practices</li> </ul>"},{"location":"workflows/","title":"Workflows","text":"<p>Workflows are the core automation units in Imbi Automations. Each workflow defines a sequence of actions to execute across your project repositories, with powerful filtering and conditional execution capabilities.</p>"},{"location":"workflows/#what-is-a-workflow","title":"What is a Workflow?","text":"<p>A workflow is a directory containing a <code>config.toml</code> file that defines:</p> <ul> <li>Actions: Operations to perform (file manipulation, AI transformations, shell commands, etc.)</li> <li>Conditions: Repository state checks to determine if workflow/actions should run</li> <li>Filters: Project targeting criteria to select which projects to process</li> <li>Configuration: Git, GitHub, and GitLab behavior settings</li> </ul>"},{"location":"workflows/#workflow-structure","title":"Workflow Structure","text":"<pre><code>workflows/workflow-name/\n\u251c\u2500\u2500 config.toml          # Required - workflow configuration\n\u251c\u2500\u2500 prompts/             # Optional - Claude prompt templates\n\u2502   \u251c\u2500\u2500 task.md.j2\n\u2502   \u2514\u2500\u2500 validator.md.j2\n\u251c\u2500\u2500 templates/           # Optional - Jinja2 templates\n\u2502   \u251c\u2500\u2500 config.yaml.j2\n\u2502   \u2514\u2500\u2500 README.md.j2\n\u2514\u2500\u2500 files/               # Optional - static resources\n    \u251c\u2500\u2500 .gitignore\n    \u2514\u2500\u2500 .pre-commit-config.yaml\n</code></pre>"},{"location":"workflows/#minimal-example","title":"Minimal Example","text":"<p>The simplest workflow requires only a name and actions:</p> <pre><code>name = \"update-gitignore\"\n\n[[actions]]\nname = \"copy-gitignore\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///.gitignore\"\ndestination = \"repository:///.gitignore\"\n</code></pre> <p>This workflow copies a <code>.gitignore</code> file from the workflow directory to each repository.</p>"},{"location":"workflows/#three-levels-of-project-selection","title":"Three Levels of Project Selection","text":"<p>In addition to the <code>--project-id</code>, <code>--project-type</code>, and <code>--all-projects</code> command-line arguments, Imbi Automations provides three complementary mechanisms to control which projects to process and which actions execute:</p>"},{"location":"workflows/#1-project-filters-pre-filter-before-processing","title":"1. Project Filters - Pre-filter before processing","text":"<p>Target specific project subsets using Imbi metadata (project IDs, types, facts, GitHub requirements).</p> <p>When: Before any workflow processing begins</p> <p>Effect: Projects that don't match are never processed</p> <p>Use for: Broad targeting (e.g., \"only Python APIs\")</p>"},{"location":"workflows/#2-workflow-conditions-skip-entire-workflow","title":"2. Workflow Conditions - Skip entire workflow","text":"<p>Check repository state (remote or local) to determine if workflow should run.</p> <p>When: Once per project, before any actions execute</p> <p>Effect: If conditions fail, entire workflow is skipped for that project</p> <p>Use for: Workflow applicability (e.g., \"only if Dockerfile exists\")</p>"},{"location":"workflows/#3-action-conditions-skip-individual-actions","title":"3. Action Conditions - Skip individual actions","text":"<p>Check repository state before each action to conditionally execute.</p> <p>When: Before each action executes</p> <p>Effect: If conditions fail, only that specific action is skipped</p> <p>Use for: Conditional behavior (e.g., \"update setup.py only if it exists\")</p>"},{"location":"workflows/#evaluation-flow","title":"Evaluation Flow","text":"<pre><code>1. Apply project filters    \u2192 1000 projects \u2192 50 matching\n   [filter] section\n\n2. Check workflow conditions \u2192 50 projects \u2192 30 applicable\n   [[conditions]]\n\n3. Clone repository          \u2192 Working with 30 repositories\n\n4. For each action:          \u2192 Execute only when conditions pass\n   Check action conditions\n   [[actions.conditions]]\n</code></pre>"},{"location":"workflows/#key-capabilities","title":"Key Capabilities","text":""},{"location":"workflows/#action-types","title":"Action Types","text":"<p>Workflows support multiple action types for different operations:</p> <ul> <li>File Actions: Copy, move, delete, write files with glob pattern support</li> <li>Shell Actions: Execute commands with template variable substitution</li> <li>Template Actions: Render Jinja2 templates with full project context</li> <li>Claude Actions: AI-powered code transformations using Claude Code SDK</li> <li>Git Actions: Extract files from commit history, clone repositories</li> <li>Docker Actions: Extract files from containers, build images</li> <li>GitHub/GitLab/Imbi Actions: API operations on project management platforms</li> <li>Utility Actions: Helper operations for common patterns</li> </ul> <p>See the Actions Reference for complete documentation.</p>"},{"location":"workflows/#conditional-execution","title":"Conditional Execution","text":"<p>Remote Conditions (checked via API before cloning): <pre><code>[[conditions]]\nremote_file_exists = \"package.json\"\n\n[[conditions]]\nremote_file_contains = \"\\\"node\\\": \\\"18\\\"\"\nremote_file = \"package.json\"\n</code></pre></p> <p>Local Conditions (checked after cloning): <pre><code>[[conditions]]\nfile_exists = \"**/*.tf\"  # Glob pattern support\n\n[[conditions]]\nfile_contains = \"python.*3\\\\.12\"\nfile = \"pyproject.toml\"\n</code></pre></p> <p>Action-Level Conditions: <pre><code>[[actions]]\nname = \"update-setup-py\"\ntype = \"file\"\ncommand = \"write\"\n\n[[actions.conditions]]\nfile_exists = \"setup.py\"  # Only execute if setup.py exists\n</code></pre></p>"},{"location":"workflows/#project-filtering","title":"Project Filtering","text":"<p>Target specific project subsets efficiently:</p> <pre><code>[filter]\nproject_types = [\"api\", \"consumer\"]\nproject_facts = {\"Programming Language\" = \"Python 3.12\"}\ngithub_identifier_required = true\ngithub_workflow_status_exclude = [\"success\"]  # Only failing/missing workflows\n</code></pre>"},{"location":"workflows/#ai-powered-transformations","title":"AI-Powered Transformations","text":"<p>Use Claude Code for complex multi-file transformations:</p> <pre><code>[[actions]]\nname = \"migrate-to-pydantic-v2\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/pydantic-migration.md\"\nmax_cycles = 5\nai_commit = true  # AI-generated commit messages\n</code></pre>"},{"location":"workflows/#pull-request-automation","title":"Pull Request Automation","text":"<p>Automatically create PRs for workflow changes:</p> <pre><code>[github]\ncreate_pull_request = true\nreplace_branch = true  # Force-replace existing PR branch\n\n[gitlab]\ncreate_merge_request = true\n</code></pre>"},{"location":"workflows/#example-workflows","title":"Example Workflows","text":""},{"location":"workflows/#simple-file-copy","title":"Simple File Copy","text":"<pre><code>name = \"Deploy Standard .gitignore\"\n\n[[conditions]]\nremote_file_exists = \".git\"\n\n[[actions]]\nname = \"copy-gitignore\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///.gitignore\"\ndestination = \"repository:///.gitignore\"\n</code></pre>"},{"location":"workflows/#ai-powered-migration","title":"AI-Powered Migration","text":"<pre><code>name = \"Migrate to Pydantic V2\"\n\n[filter]\nproject_types = [\"api\"]\nproject_facts = {\"Programming Language\" = \"Python 3.12\"}\n\n[[conditions]]\nremote_file_contains = \"pydantic\"\nremote_file = \"pyproject.toml\"\n\n[[actions]]\nname = \"migrate-pydantic\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/pydantic-v2.md\"\nmax_cycles = 5\non_failure = \"restore-backup\"\nai_commit = true\n</code></pre>"},{"location":"workflows/#conditional-updates","title":"Conditional Updates","text":"<pre><code>name = \"Update Python Files\"\n\n[[actions]]\nname = \"update-setup-py\"\ntype = \"template\"\nsource_path = \"workflow:///setup.py.j2\"\ndestination_path = \"repository:///setup.py\"\n\n[[actions.conditions]]\nfile_exists = \"setup.py\"\n\n[[actions]]\nname = \"update-pyproject\"\ntype = \"template\"\nsource_path = \"workflow:///pyproject.toml.j2\"\ndestination_path = \"repository:///pyproject.toml\"\n\n[[actions.conditions]]\nfile_exists = \"pyproject.toml\"\n</code></pre>"},{"location":"workflows/#running-workflows","title":"Running Workflows","text":"<p>Execute workflows across all your projects:</p> <pre><code># Run on all projects\nimbi-automations config.toml workflows/workflow-name --all-projects\n\n# Run on specific project types\nimbi-automations config.toml workflows/workflow-name --project-type api\n\n# Run on specific project\nimbi-automations config.toml workflows/workflow-name --project-id 123\n\n# Resume from specific project (useful for large batches)\nimbi-automations config.toml workflows/workflow-name --all-projects \\\n  --start-from-project my-project-slug\n</code></pre> <p>See the CLI Reference for complete command-line options.</p>"},{"location":"workflows/#included-workflows","title":"Included Workflows","text":"<p>Imbi Automations includes 25+ pre-built workflows for common tasks:</p> <p>Infrastructure &amp; Tooling: - Docker image updates and health checks - Terraform CI/CD pipelines - Frontend build and deployment - Compose configuration fixes</p> <p>Code Quality: - CI/CD pipeline enforcement - GitHub Actions workflow fixes - SonarQube quality gate fixes</p> <p>Project Maintenance: - Standard .gitignore deployment - GitHub team synchronization - Environment synchronization - Project validation</p> <p>See the <code>workflows/</code> directory in the repository for all available workflows.</p>"},{"location":"workflows/#best-practices","title":"Best Practices","text":""},{"location":"workflows/#use-remote-conditions-first","title":"Use Remote Conditions First","text":"<p>Remote conditions are faster and avoid unnecessary cloning:</p> <pre><code># \u2705 Good - check remotely before cloning\n[[conditions]]\nremote_file_exists = \"package.json\"\n\n# \u274c Slower - clones every repository\n[[conditions]]\nfile_exists = \"package.json\"\n</code></pre>"},{"location":"workflows/#filter-early-filter-often","title":"Filter Early, Filter Often","text":"<p>Use workflow-level filters to reduce processing scope:</p> <pre><code># \u2705 Good - filter at workflow level\n[filter]\nproject_types = [\"api\"]\nproject_facts = {\"Programming Language\" = \"Python 3.12\"}\n\n# \u274c Less efficient - evaluates conditions on all projects\n[[conditions]]\n# checking conditions on 1000 projects instead of 50\n</code></pre>"},{"location":"workflows/#design-idempotent-workflows","title":"Design Idempotent Workflows","text":"<p>Make workflows safely re-runnable:</p> <pre><code>[[actions.conditions]]\nfile_not_exists = \"config/app.yaml\"  # Only create if missing\n</code></pre>"},{"location":"workflows/#use-action-conditions-for-variation","title":"Use Action Conditions for Variation","text":"<p>Different projects need different actions:</p> <pre><code>[[actions]]\nname = \"update-setup-py\"\n[[actions.conditions]]\nfile_exists = \"setup.py\"\n\n[[actions]]\nname = \"update-pyproject\"\n[[actions.conditions]]\nfile_exists = \"pyproject.toml\"\n</code></pre>"},{"location":"workflows/#learn-more","title":"Learn More","text":"<ul> <li>Workflow Configuration - Detailed configuration reference with all fields and options</li> <li>Actions Reference - Complete action types documentation</li> <li>Debugging Workflows - Troubleshooting and debugging techniques</li> <li>CLI Reference - Command-line options and usage</li> </ul>"},{"location":"actions/","title":"About Actions","text":"<p>Workflow actions are the core building blocks of automation in Imbi Automations. Each action type provides specific capabilities for interacting with repositories, external services, and project files.</p>"},{"location":"actions/#action-types-overview","title":"Action Types Overview","text":"Action Type Purpose Use Cases Callable Direct API method calls GitHub/GitLab operations, Imbi updates Claude AI-powered transformations Complex code changes, intelligent analysis Docker Container operations Extract files from images, build images File File manipulation Copy, move, delete, append, write files Git Version control operations Extract commits, branch management GitHub GitHub-specific operations Environment sync, workflow management Imbi Imbi project management Update project facts and metadata Shell Command execution Run tests, build processes, scripts Template Jinja2 file generation Generate configs, documentation Utility Helper operations Logging, state management"},{"location":"actions/#resourceurl-path-system","title":"ResourceUrl Path System","text":"<p>All file and resource paths in actions use the <code>ResourceUrl</code> type, which supports multiple schemes for flexible file addressing:</p>"},{"location":"actions/#path-schemes","title":"Path Schemes","text":""},{"location":"actions/#file-relative-to-working-directory","title":"<code>file:///</code> - Relative to Working Directory","text":"<p>Default scheme for simple paths. Resolves relative to the workflow's working directory:</p> <pre><code>[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"file:///config.yaml\"      # Or just \"config.yaml\"\ndestination = \"file:///backup/config.yaml\"\n</code></pre> <p>Equivalent simplified syntax: <pre><code>source = \"config.yaml\"\ndestination = \"backup/config.yaml\"\n</code></pre></p>"},{"location":"actions/#repository-repository-files","title":"<code>repository:///</code> - Repository Files","text":"<p>Paths within the cloned Git repository:</p> <pre><code>[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///.github/workflows/ci.yml\"\ndestination = \"repository:///.github/workflows/ci-backup.yml\"\n</code></pre> <p>The <code>repository:///</code> prefix maps to <code>{working_directory}/repository/</code> where the actual repository is cloned.</p>"},{"location":"actions/#workflow-workflow-resources","title":"<code>workflow:///</code> - Workflow Resources","text":"<p>Paths to files bundled with the workflow itself:</p> <pre><code>[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///.gitignore\"           # From workflow directory\ndestination = \"repository:///.gitignore\"     # To repository\n</code></pre> <p>The <code>workflow:///</code> prefix maps to <code>{working_directory}/workflow/</code> where workflow resources are staged.</p>"},{"location":"actions/#extracted-extracted-files","title":"<code>extracted:///</code> - Extracted Files","text":"<p>Files extracted from Docker containers or Git repositories via git/docker actions:</p> <pre><code># Extract from Docker container\n[[actions]]\nname = \"extract-from-docker\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"myapp:latest\"\nsource = \"/app/config/\"\ndestination = \"extracted:///docker-configs/\"\n\n# Extract file from Git history\n[[actions]]\nname = \"extract-from-git\"\ntype = \"git\"\ncommand = \"extract\"\nsource = \"config.yaml\"\ndestination = \"extracted:///old-config.yaml\"\ncommit_keyword = \"breaking change\"\nsearch_strategy = \"before_last_match\"\n\n# Use extracted files\n[[actions]]\nname = \"copy-extracted\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"extracted:///docker-configs/app.yaml\"\ndestination = \"repository:///config/app.yaml\"\n</code></pre> <p>The <code>extracted:///</code> prefix maps to <code>{working_directory}/extracted/</code> where extracted files from Docker containers and Git history are stored.</p>"},{"location":"actions/#path-resolution-examples","title":"Path Resolution Examples","text":"<pre><code># Example 1: Copy workflow template to repository\n[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///templates/README.md\"\ndestination = \"repository:///README.md\"\n\n# Example 2: Extract Docker config and use it\n[[actions]]\nname = \"extract-config\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"python:3.12\"\nsource = \"/usr/local/lib/python3.12/\"\ndestination = \"extracted:///python-libs/\"\n\n[[actions]]\nname = \"analyze-libs\"\ntype = \"shell\"\ncommand = \"ls -lah {{ working_directory }}/extracted/python-libs\"\n\n# Example 3: Multiple file operations\n[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///old-config.yaml\"\ndestination = \"repository:///backup/config.yaml\"\n\n[[actions]]\ntype = \"file\"\ncommand = \"write\"\npath = \"repository:///config.yaml\"\ncontent = \"new_config: true\"\n</code></pre>"},{"location":"actions/#working-directory-structure","title":"Working Directory Structure","text":"<p>During workflow execution, the working directory contains:</p> <pre><code>{working_directory}/\n\u251c\u2500\u2500 repository/          # Cloned Git repository\n\u2502   \u251c\u2500\u2500 .git/\n\u2502   \u251c\u2500\u2500 README.md\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 workflow/            # Workflow resources (templates, files)\n\u2502   \u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 .gitignore\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 extracted/           # Files extracted from Docker\n\u2502   \u2514\u2500\u2500 configs/\n\u2514\u2500\u2500 other files...       # Working files (logs, temp files)\n</code></pre>"},{"location":"actions/#case-sensitivity","title":"Case Sensitivity","text":"<p>Important: File paths preserve case sensitivity. The three-slash format (<code>file:///</code>) ensures paths are treated correctly on both case-sensitive (Linux) and case-insensitive (macOS/Windows) filesystems.</p> <pre><code># Correct - case is preserved\nsource = \"README.md\"              # Becomes file:///README.md\nsource = \"repository:///LICENSE\"  # Exact case maintained\n\n# Incorrect legacy format (deprecated)\nsource = \"file://readme.md\"       # Would lowercase on some systems\n</code></pre>"},{"location":"actions/#common-action-patterns","title":"Common Action Patterns","text":""},{"location":"actions/#sequential-file-operations","title":"Sequential File Operations","text":"<pre><code>[[actions]]\nname = \"backup-config\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///config.yaml\"\ndestination = \"repository:///config.yaml.bak\"\n\n[[actions]]\nname = \"update-config\"\ntype = \"file\"\ncommand = \"write\"\npath = \"repository:///config.yaml\"\ncontent = \"\"\"\nversion: 2\nupdated: true\n\"\"\"\n</code></pre>"},{"location":"actions/#template-generation-pipeline","title":"Template Generation Pipeline","text":"<pre><code>[[actions]]\nname = \"render-templates\"\ntype = \"template\"\nsource_path = \"workflow:///templates/\"\ndestination_path = \"repository:///config/\"\n\n[[actions]]\nname = \"validate-configs\"\ntype = \"shell\"\ncommand = \"python -m yamllint {{ working_directory }}/repository/config/\"\n</code></pre>"},{"location":"actions/#docker-extract-and-transform","title":"Docker Extract and Transform","text":"<pre><code>[[actions]]\nname = \"extract-from-base\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"base:latest\"\nsource = \"/app/\"\ndestination = \"extracted:///base-app/\"\n\n[[actions]]\nname = \"merge-with-repo\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"extracted:///base-app/config.json\"\ndestination = \"repository:///config/base.json\"\n</code></pre>"},{"location":"actions/#action-execution-context","title":"Action Execution Context","text":"<p>All actions execute with access to these context variables (via Jinja2 templating where supported):</p> <ul> <li><code>workflow</code>: Current workflow configuration</li> <li><code>imbi_project</code>: Imbi project data (ID, name, type, facts, etc.)</li> <li><code>github_repository</code>: GitHub repository data (if applicable)</li> <li><code>gitlab_project</code>: GitLab project data (if applicable)</li> <li><code>working_directory</code>: Temporary execution directory path</li> <li><code>starting_commit</code>: Initial Git commit SHA (for tracking changes)</li> </ul> <p>See individual action type documentation for specific configuration options and examples.</p>"},{"location":"actions/callable/","title":"Callable Actions","text":"<p>\u26a0\ufe0f NOT IMPLEMENTED: Callable actions raise <code>NotImplementedError</code>. This action type is currently a placeholder.</p> <p>Callable actions are intended to invoke Python callable objects (functions, methods, classes) dynamically with flexible arguments.</p>"},{"location":"actions/callable/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"callable\"\nimport = \"module.path.to.callable\"\ncallable = \"function_or_class_name\"\nargs = []      # Optional positional arguments\nkwargs = {}    # Optional keyword arguments\nai_commit = true  # Optional, default: true\n</code></pre>"},{"location":"actions/callable/#fields","title":"Fields","text":""},{"location":"actions/callable/#import-required","title":"import (required)","text":"<p>Python module path to import the callable from.</p> <p>Type: <code>string</code></p> <p>Field Name: <code>import</code> (model field: <code>import_name</code>)</p> <p>Example: <code>\"imbi_automations.clients.github\"</code></p>"},{"location":"actions/callable/#callable-required","title":"callable (required)","text":"<p>The callable object (function, method, or class) to invoke.</p> <p>Type: <code>Callable</code> (Python callable object)</p> <p>Note: The model expects an actual callable object, not a string. The TOML configuration likely needs to reference importable callables by name.</p>"},{"location":"actions/callable/#args-optional","title":"args (optional)","text":"<p>Positional arguments to pass to the callable.</p> <p>Type: <code>list</code></p> <p>Default: <code>[]</code></p>"},{"location":"actions/callable/#kwargs-optional","title":"kwargs (optional)","text":"<p>Keyword arguments to pass to the callable.</p> <p>Type: <code>dict</code></p> <p>Default: <code>{}</code></p>"},{"location":"actions/callable/#ai_commit-optional","title":"ai_commit (optional)","text":"<p>Whether to use AI-generated commit messages for changes.</p> <p>Type: <code>boolean</code></p> <p>Default: <code>true</code></p>"},{"location":"actions/callable/#implementation-status","title":"Implementation Status","text":"<p>Status: \u274c Not implemented</p> <p>The implementation in <code>src/imbi_automations/actions/callablea.py</code> line 25 shows:</p> <pre><code>async def execute(self, action: models.WorkflowCallableAction) -&gt; None:\n    raise NotImplementedError('Callable actions not yet supported')\n</code></pre> <p>Model Definition: <code>src/imbi_automations/models/workflow.py:107-120</code></p> <pre><code>class WorkflowCallableAction(WorkflowAction):\n    type: typing.Literal['callable'] = 'callable'\n    import_name: str = pydantic.Field(alias='import')\n    callable: typing.Callable\n    args: list[typing.Any] = pydantic.Field(default_factory=list)\n    kwargs: dict[str, typing.Any] = pydantic.Field(default_factory=dict)\n    ai_commit: bool = True\n</code></pre>"},{"location":"actions/callable/#intended-usage-examples","title":"Intended Usage Examples","text":"<p>Note: These examples show the intended usage once implemented. They will currently fail with <code>NotImplementedError</code>.</p>"},{"location":"actions/callable/#call-github-client-method","title":"Call GitHub Client Method","text":"<pre><code>[[actions]]\nname = \"create-github-issue\"\ntype = \"callable\"\nimport = \"imbi_automations.clients.github\"\ncallable = \"GitHubClient.create_issue\"\n\n[[actions.kwargs]]\ntitle = \"Automated issue\"\nbody = \"Issue created by workflow\"\n</code></pre>"},{"location":"actions/callable/#call-imbi-client-method","title":"Call Imbi Client Method","text":"<pre><code>[[actions]]\nname = \"update-project\"\ntype = \"callable\"\nimport = \"imbi_automations.clients.imbi\"\ncallable = \"ImbiClient.update_project_fact\"\n\n[[actions.kwargs]]\nproject_id = 123\nfact_name = \"Automation Status\"\nfact_value = \"Updated\"\n</code></pre>"},{"location":"actions/callable/#call-utility-function","title":"Call Utility Function","text":"<pre><code>[[actions]]\nname = \"parse-version\"\ntype = \"callable\"\nimport = \"semver\"\ncallable = \"parse\"\nargs = [\"1.2.3\"]\n</code></pre>"},{"location":"actions/callable/#design-questions","title":"Design Questions","text":"<p>The current model definition has some unclear aspects:</p> <ol> <li> <p>Callable Type: The <code>callable</code> field expects a <code>typing.Callable</code> object, but TOML configuration can only contain strings. How is this resolved?</p> </li> <li> <p>Import Resolution: How does <code>import</code> + <code>callable</code> get resolved to an actual callable object? Is <code>callable</code> a string name looked up in the imported module?</p> </li> <li> <p>Client Access: How would this access workflow clients (GitHub, GitLab, Imbi) that are already instantiated in the workflow context?</p> </li> <li> <p>Context Passing: How would the callable receive workflow context (repository, project data, etc.)?</p> </li> </ol> <p>These design questions suggest the feature may need additional planning before implementation.</p>"},{"location":"actions/callable/#workarounds","title":"Workarounds","text":"<p>Until callable actions are implemented, use alternative approaches:</p> <ol> <li>Client Operations: Use specific action types (github, imbi) when they exist</li> <li>Custom Logic: Use shell actions to call Python scripts</li> <li>Claude Actions: Use Claude for complex operations requiring decision-making</li> </ol>"},{"location":"actions/callable/#shell-action-alternative","title":"Shell Action Alternative","text":"<pre><code>[[actions]]\nname = \"custom-operation\"\ntype = \"shell\"\ncommand = \"python -c 'from mymodule import func; func()'\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/callable/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Action type defined but not implemented</li> <li>Raises <code>NotImplementedError</code> on execution</li> <li>Model uses <code>typing.Callable</code> which may need runtime resolution</li> <li>Field <code>import</code> aliased to <code>import_name</code> to avoid Python keyword</li> <li>Intended for direct Python callable invocation with flexible arguments</li> <li>AI commit enabled by default when implemented</li> </ul>"},{"location":"actions/claude/","title":"Claude Actions","text":"<p>Claude actions leverage the Claude Agent SDK for AI-powered code transformations, enabling complex multi-file analysis and intelligent code modifications that would be difficult or error-prone with traditional approaches.</p>"},{"location":"actions/claude/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"claude\"\nprompt = \"prompts/task.md\"                      # Required\nvalidation_prompt = \"prompts/validate.md\"       # Optional\nmax_cycles = 3                                  # Optional, default: 3\non_failure = \"cleanup-action\"                   # Optional\nai_commit = true                                # Optional, default: true\n</code></pre>"},{"location":"actions/claude/#fields","title":"Fields","text":""},{"location":"actions/claude/#prompt-required","title":"prompt (required)","text":"<p>Path to Jinja2 template file containing the task prompt for Claude.</p> <p>Type: <code>string</code> (path relative to workflow directory)</p> <p>Format: Jinja2 template (<code>.j2</code> extension) or plain markdown</p> <p>Location: Relative to workflow directory (e.g., <code>prompts/update-python.md</code>)</p>"},{"location":"actions/claude/#validation_prompt-optional","title":"validation_prompt (optional)","text":"<p>Path to validation prompt template. If provided, Claude will run a validation cycle after the task cycle.</p> <p>Type: <code>string</code> (path relative to workflow directory)</p>"},{"location":"actions/claude/#max_cycles-optional","title":"max_cycles (optional)","text":"<p>Maximum number of retry cycles if transformation fails.</p> <p>Type: <code>integer</code></p> <p>Default: <code>3</code></p>"},{"location":"actions/claude/#on_failure-optional","title":"on_failure (optional)","text":"<p>Action name to restart from if this action fails after all retry cycles.</p> <p>Type: <code>string</code> (action name)</p>"},{"location":"actions/claude/#ai_commit-optional","title":"ai_commit (optional)","text":"<p>Whether to use AI-generated commit messages for changes made by this action.</p> <p>Type: <code>boolean</code></p> <p>Default: <code>true</code></p>"},{"location":"actions/claude/#prompt-context","title":"Prompt Context","text":"<p>Prompts have access to all workflow context variables:</p> Variable Description <code>workflow</code> Workflow configuration <code>imbi_project</code> Imbi project data <code>github_repository</code> GitHub repository (if applicable) <code>gitlab_project</code> GitLab project (if applicable) <code>working_directory</code> Execution directory path <code>starting_commit</code> Initial commit SHA <code>commit_author</code> Git commit author (from config) <code>commit_author_name</code> Author name only <code>commit_author_address</code> Author email only <code>workflow_name</code> Current workflow name"},{"location":"actions/claude/#examples","title":"Examples","text":""},{"location":"actions/claude/#basic-code-transformation","title":"Basic Code Transformation","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"update-python-version\"\ntype = \"claude\"\nprompt = \"prompts/update-python.md\"\n</code></pre></p> <p>Prompt (<code>prompts/update-python.md</code>): <pre><code># Update Python Version to 3.12\n\nUpdate all Python version references in this repository to Python 3.12.\n\n## Files to Update\n\n1. `pyproject.toml` - Update `requires-python` field\n2. `.github/workflows/*.yml` - Update GitHub Actions Python version\n3. `Dockerfile` - Update base image to python:3.12\n4. `README.md` - Update installation instructions if they mention Python version\n\n## Requirements\n\n- Maintain backwards compatibility where possible\n- Update all version strings consistently\n- Preserve existing configuration structure\n- Do not modify other unrelated settings\n\n## Project Context\n\n- **Project**: {{ imbi_project.name }}\n- **Type**: {{ imbi_project.project_type }}\n- **Current Python**: {{ imbi_project.facts.get('Programming Language', 'unknown') }}\n\n## Success Criteria\n\nCreate a commit with all Python version references updated to 3.12.\n\n## Failure Indication\n\nIf you cannot complete this task, return failure with details about what prevented completion.\n</code></pre></p>"},{"location":"actions/claude/#multi-cycle-transformation-with-retry","title":"Multi-Cycle Transformation with Retry","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"refactor-codebase\"\ntype = \"claude\"\nprompt = \"prompts/refactor.md\"\nmax_cycles = 5\non_failure = \"create-issue\"  # Create GitHub issue if fails\n</code></pre></p>"},{"location":"actions/claude/#with-validator","title":"With Validator","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"update-dependencies\"\ntype = \"claude\"\nprompt = \"prompts/update-deps.md\"\nvalidation_prompt = \"prompts/validate-deps.md\"\n</code></pre></p> <p>Validator prompt: <pre><code># Validate Dependency Updates\n\nVerify that the dependency updates were successful:\n\n1. Check that `requirements.txt` or `pyproject.toml` has been updated\n2. Verify no breaking changes were introduced\n3. Confirm all imports still resolve correctly\n4. Check that version constraints are reasonable\n\nReturn success if validation passes, failure otherwise with specific errors.\n</code></pre></p>"},{"location":"actions/claude/#complex-transformation","title":"Complex Transformation","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"migrate-to-pydantic-v2\"\ntype = \"claude\"\nprompt = \"prompts/pydantic-migration.md\"\nmax_cycles = 10\n</code></pre></p> <p>Prompt: <pre><code># Migrate to Pydantic V2\n\nMigrate this codebase from Pydantic v1 to Pydantic v2.\n\n## Migration Steps\n\n1. **Update imports**: Change `pydantic` imports to v2 syntax\n2. **Config classes**: Convert `Config` class to `model_config` dict\n3. **Validators**: Update `@validator` to `@field_validator`\n4. **Field definitions**: Update `Field(...)` syntax changes\n5. **JSON methods**: Replace `.dict()` with `.model_dump()`, `.json()` with `.model_dump_json()`\n\n## Files to Process\n\nScan the repository for Python files containing:\n- `from pydantic import`\n- `class.*\\\\(.*BaseModel\\\\)`\n- `@validator`\n- `.dict()` or `.json()` calls on Pydantic models\n\n## Testing\n\nAfter making changes:\n1. Run tests if they exist: `pytest tests/`\n2. Check for import errors\n3. Verify all models still validate correctly\n\n## Commit Message\n\n````\nMigrate from Pydantic v1 to v2\n\n- Update imports to v2 syntax\n- Convert Config classes to model_config\n- Update validators to field_validator\n- Replace .dict()/.json() with .model_dump()/.model_dump_json()\n\nProject: {{ imbi_project.name }}\n````\n\n## Failure Conditions\n\nReturn failure if:\n- Unable to identify Pydantic usage patterns\n- Migration would break existing functionality\n- Tests fail after migration\n- Manual intervention required\n\nInclude specific error details and affected files in the failure response.\n</code></pre></p>"},{"location":"actions/claude/#prompt-best-practices","title":"Prompt Best Practices","text":""},{"location":"actions/claude/#clear-objectives","title":"Clear Objectives","text":"<pre><code># Update Docker Base Image\n\n**Goal**: Update the Dockerfile to use python:3.12-slim as the base image.\n\n**Files**: `Dockerfile`, `docker-compose.yml`\n\n**Requirements**:\n- Change base image in all Dockerfiles\n- Maintain multi-stage build structure if present\n- Update docker-compose.yml references\n- Keep existing COPY, RUN, CMD instructions\n</code></pre>"},{"location":"actions/claude/#specific-instructions","title":"Specific Instructions","text":"<pre><code>## Step-by-Step Process\n\n1. Locate all Dockerfile* files in the repository\n2. For each Dockerfile:\n   a. Find the `FROM` instruction\n   b. Replace with `FROM python:3.12-slim`\n   c. Keep any `AS builder` or stage names\n3. Update docker-compose.yml if it hardcodes Python version\n4. Commit changes with message: \"Update Python base image to 3.12\"\n</code></pre>"},{"location":"actions/claude/#successfailure-criteria","title":"Success/Failure Criteria","text":"<pre><code>## Success Criteria\n\nYou must:\n- \u2713 Update all Dockerfiles\n- \u2713 Maintain working configuration\n- \u2713 Create a git commit\n- \u2713 Include descriptive commit message\n\n## Failure Indication\n\nReturn failure if:\n- No Dockerfile found in repository\n- Unable to parse existing Dockerfile syntax\n- Changes would break the build process\n- Multiple conflicting Dockerfile versions exist\n\nInclude the specific error and list of files examined in the failure response.\n</code></pre>"},{"location":"actions/claude/#project-context-usage","title":"Project Context Usage","text":"<pre><code>## Project-Specific Considerations\n\n- **Project**: {{ imbi_project.name }}\n- **Type**: {{ imbi_project.project_type }}\n- **Namespace**: {{ imbi_project.namespace }}\n\n{% if imbi_project.project_type == 'api' %}\nThis is an API project - ensure uvicorn/fastapi configurations are preserved.\n{% elif imbi_project.project_type == 'consumer' %}\nThis is a consumer - ensure message handling configurations are intact.\n{% endif %}\n\n{% if imbi_project.facts %}\n## Known Facts\n{% for key, value in imbi_project.facts.items() %}\n- **{{ key }}**: {{ value }}\n{% endfor %}\n{% endif %}\n</code></pre>"},{"location":"actions/claude/#failure-handling","title":"Failure Handling","text":""},{"location":"actions/claude/#failure-files","title":"Failure Files","text":"<p>Claude actions detect failure through specific files created in the working directory:</p> File Name Meaning <code>ACTION_FAILED</code> Generic action failure <code>{ACTION_NAME}_FAILED</code> Specific action failure Custom names Custom failure indicators <p>Prompt instructions for failure: <pre><code>## Failure Indication\n\nIf you cannot complete this task, return failure with:\n\n1. **Reason**: Why the task failed\n2. **Files Examined**: List of files you checked\n3. **Errors Encountered**: Specific error messages\n4. **Manual Steps**: What a human would need to do\n5. **Context**: Any relevant information for debugging\n\nExample failure response:\n````\nUnable to parse pyproject.toml due to syntax error\n\nFiles examined: pyproject.toml, requirements.txt\nError: toml.decoder.TomlDecodeError at line 15\nManual steps: Fix toml syntax error in pyproject.toml line 15\n````\n</code></pre></p>"},{"location":"actions/claude/#retry-mechanism","title":"Retry Mechanism","text":"<pre><code>[[actions]]\nname = \"fragile-transformation\"\ntype = \"claude\"\nprompt = \"prompts/transform.md\"\nmax_cycles = 5        # Try up to 5 times\non_failure = \"cleanup\" # Run cleanup action if all cycles fail\n</code></pre> <p>Cycle behavior:</p> <ol> <li>Execute transformation</li> <li>Check for failure files</li> <li>If failure detected and cycles remaining, retry</li> <li>If all cycles exhausted, trigger <code>on_failure</code> action</li> <li>Pass error context to retry attempts</li> </ol>"},{"location":"actions/claude/#error-context-in-retries","title":"Error Context in Retries","text":"<p>On retry, the prompt receives additional context:</p> <pre><code># Appended to prompt automatically:\n\"\"\"\n---\nYou need to fix problems identified from a previous run.\nThe errors for context are:\n\n{\n  \"result\": \"failure\",\n  \"message\": \"Unable to update dependencies\",\n  \"errors\": [\"Package X not found\", \"Version conflict with Y\"]\n}\n\"\"\"\n</code></pre>"},{"location":"actions/claude/#advanced-usage","title":"Advanced Usage","text":""},{"location":"actions/claude/#conditional-prompts","title":"Conditional Prompts","text":"<p>Workflow: <pre><code>[[actions]]\nname = \"language-specific-update\"\ntype = \"claude\"\nprompt = \"prompts/{{ imbi_project.facts.get('Programming Language', 'unknown') | lower }}-update.md\"\n</code></pre></p>"},{"location":"actions/claude/#multi-stage-transformations","title":"Multi-Stage Transformations","text":"<pre><code>[[actions]]\nname = \"stage1-refactor\"\ntype = \"claude\"\nprompt = \"prompts/stage1.md\"\n\n[[actions]]\nname = \"stage2-optimize\"\ntype = \"claude\"\nprompt = \"prompts/stage2.md\"\n\n[[actions]]\nname = \"stage3-document\"\ntype = \"claude\"\nprompt = \"prompts/stage3.md\"\n</code></pre>"},{"location":"actions/claude/#with-prepost-actions","title":"With Pre/Post Actions","text":"<pre><code>[[actions]]\nname = \"backup-files\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///src/\"\ndestination = \"repository:///src.backup/\"\n\n[[actions]]\nname = \"ai-refactor\"\ntype = \"claude\"\nprompt = \"prompts/refactor.md\"\non_failure = \"restore-backup\"\n\n[[actions]]\nname = \"run-tests\"\ntype = \"shell\"\ncommand = \"pytest tests/\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"restore-backup\"\ntype = \"file\"\ncommand = \"move\"\nsource = \"repository:///src.backup/\"\ndestination = \"repository:///src/\"\n</code></pre>"},{"location":"actions/claude/#integration-with-other-actions","title":"Integration with Other Actions","text":""},{"location":"actions/claude/#claude-shell-test-verification","title":"Claude + Shell (Test Verification)","text":"<pre><code>[[actions]]\nname = \"ai-code-update\"\ntype = \"claude\"\nprompt = \"prompts/update.md\"\n\n[[actions]]\nname = \"verify-tests\"\ntype = \"shell\"\ncommand = \"pytest tests/ -v\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/claude/#claude-file-template-application","title":"Claude + File (Template Application)","text":"<pre><code>[[actions]]\nname = \"generate-base-config\"\ntype = \"template\"\nsource_path = \"config.yaml.j2\"\ndestination_path = \"repository:///config.yaml\"\n\n[[actions]]\nname = \"customize-config\"\ntype = \"claude\"\nprompt = \"prompts/customize-config.md\"\n</code></pre>"},{"location":"actions/claude/#claude-git-commit-verification","title":"Claude + Git (Commit Verification)","text":"<pre><code>[[actions]]\nname = \"ai-transformation\"\ntype = \"claude\"\nprompt = \"prompts/transform.md\"\n\n[[actions]]\nname = \"verify-commit\"\ntype = \"shell\"\ncommand = \"git log -1 --pretty=%B\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/claude/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>API Costs: Each cycle makes Claude API calls</li> <li>Execution Time: Complex transformations can take several minutes</li> <li>Context Size: Large repositories may hit context limits</li> <li>Rate Limiting: Respect Anthropic API rate limits</li> </ul>"},{"location":"actions/claude/#security-considerations","title":"Security Considerations","text":"<ul> <li>Code Execution: Claude can execute arbitrary code in the repository context</li> <li>Sensitive Data: Prompts and code are sent to Anthropic API</li> <li>API Keys: Ensure API keys are properly secured</li> <li>Verification: Always verify AI-generated changes before merging</li> </ul>"},{"location":"actions/claude/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Working directory isolated per execution</li> <li>Automatic cleanup on success or failure</li> <li>Full logging of Claude interactions at DEBUG level</li> </ul>"},{"location":"actions/docker/","title":"Docker Actions","text":"<p>Docker actions provide container operations for extracting files from Docker images.</p>"},{"location":"actions/docker/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"docker\"\ncommand = \"extract\"     # Only extract is currently implemented\nimage = \"image:tag\"     # Required\n# Command-specific fields below\n</code></pre>"},{"location":"actions/docker/#commands","title":"Commands","text":""},{"location":"actions/docker/#extract","title":"extract","text":"<p>Extract files from a Docker container image.</p> <p>Status: \u2705 Implemented</p> <p>Required Fields:</p> <ul> <li><code>image</code> (string): Docker image name (tag can be separate or in format <code>image:tag</code>)</li> <li><code>source</code> (pathlib.Path): Path inside container to extract from</li> <li><code>destination</code> (<code>ResourceUrl</code>): Local path to extract to (typically <code>extracted:///</code>)</li> </ul> <p>Optional Fields:</p> <ul> <li><code>tag</code> (string): Image tag (default: <code>latest</code>) - only used if image doesn't contain <code>:tag</code></li> </ul> <p>Example: <pre><code>[[actions]]\nname = \"extract-python-libs\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"python\"\ntag = \"3.12-slim\"\nsource = \"/usr/local/lib/python3.12/\"\ndestination = \"extracted:///python-libs/\"\n</code></pre></p> <p>Behavior:</p> <ol> <li>Pulls the image if not available locally (<code>docker pull</code>)</li> <li>Creates temporary container from image (<code>docker create</code>)</li> <li>Copies files from container to local filesystem (<code>docker cp</code>)</li> <li>Stores in <code>extracted:///</code> directory (resolves to <code>{working_directory}/extracted/</code>)</li> <li>Automatically cleans up container (<code>docker rm</code>)</li> </ol>"},{"location":"actions/docker/#build","title":"build","text":"<p>Status: \u274c Not yet implemented (raises NotImplementedError)</p> <p>Build a Docker image from a Dockerfile.</p> <p>Required Fields:</p> <ul> <li><code>image</code>: Image name to create</li> <li><code>path</code>: Path to Dockerfile directory (<code>ResourceUrl</code>)</li> </ul> <p>Optional Fields:</p> <ul> <li><code>tag</code>: Image tag (default: <code>latest</code>)</li> </ul>"},{"location":"actions/docker/#pull","title":"pull","text":"<p>Status: \u274c Not yet implemented (raises NotImplementedError)</p> <p>Pull a Docker image from registry.</p> <p>Required Fields:</p> <ul> <li><code>image</code>: Image name to pull</li> </ul> <p>Optional Fields:</p> <ul> <li><code>tag</code>: Image tag (default: <code>latest</code>)</li> </ul>"},{"location":"actions/docker/#push","title":"push","text":"<p>Status: \u274c Not yet implemented (raises NotImplementedError)</p> <p>Push a Docker image to registry.</p> <p>Required Fields:</p> <ul> <li><code>image</code>: Image name to push</li> </ul> <p>Optional Fields:</p> <ul> <li><code>tag</code>: Image tag (default: <code>latest</code>)</li> </ul>"},{"location":"actions/docker/#common-use-cases","title":"Common Use Cases","text":""},{"location":"actions/docker/#extract-configuration-files","title":"Extract Configuration Files","text":"<pre><code>[[actions]]\nname = \"extract-nginx-config\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"nginx\"\ntag = \"latest\"\nsource = \"/etc/nginx/\"\ndestination = \"extracted:///nginx-config/\"\n\n[[actions]]\nname = \"copy-to-repo\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"extracted:///nginx-config/nginx.conf\"\ndestination = \"repository:///config/nginx.conf\"\n</code></pre>"},{"location":"actions/docker/#extract-python-packages","title":"Extract Python Packages","text":"<pre><code>[[actions]]\nname = \"extract-site-packages\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"myapp\"\ntag = \"latest\"\nsource = \"/usr/local/lib/python3.12/site-packages/\"\ndestination = \"extracted:///packages/\"\n</code></pre>"},{"location":"actions/docker/#extract-multiple-directories","title":"Extract Multiple Directories","text":"<pre><code>[[actions]]\nname = \"extract-app-dir\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"myapp\"\ntag = \"latest\"\nsource = \"/app/\"\ndestination = \"extracted:///app/\"\n\n[[actions]]\nname = \"extract-config-dir\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"myapp\"\ntag = \"latest\"\nsource = \"/etc/myapp/\"\ndestination = \"extracted:///config/\"\n</code></pre>"},{"location":"actions/docker/#implementation-notes","title":"Implementation Notes","text":""},{"location":"actions/docker/#extract-command","title":"Extract Command","text":"<ul> <li>Requires Docker daemon running locally</li> <li>Uses <code>docker</code> CLI commands (<code>pull</code>, <code>create</code>, <code>cp</code>, <code>rm</code>)</li> <li>Temporary containers automatically cleaned up after extraction</li> <li>Extracted files preserve permissions from container</li> <li>Container name format: <code>imbi-extract-{id}</code></li> <li>Pulls image automatically if not available locally</li> <li>Image names support Jinja2 templating: <code>image = \"{{ project_name }}\"</code></li> </ul>"},{"location":"actions/docker/#not-implemented-commands","title":"Not Implemented Commands","text":"<p>The following commands are defined but not yet implemented: - <code>build</code>: Would build Docker images from Dockerfiles - <code>pull</code>: Would pull images from registry (extract does this automatically) - <code>push</code>: Would push images to registry</p> <p>Attempting to use these commands will raise <code>NotImplementedError</code>.</p>"},{"location":"actions/docker/#error-handling","title":"Error Handling","text":"<ul> <li>Docker command failures raise <code>RuntimeError</code> with exit code and output</li> <li>Missing Docker CLI raises helpful error: \"Docker command not found - is Docker installed and in PATH?\"</li> <li>Container cleanup failures are logged but don't fail the action</li> <li>Image pull failures propagate as RuntimeError</li> </ul>"},{"location":"actions/docker/#integration-with-other-actions","title":"Integration with Other Actions","text":""},{"location":"actions/docker/#docker-extract-file-copy-pattern","title":"Docker Extract + File Copy Pattern","text":"<pre><code># Extract from container\n[[actions]]\nname = \"extract-config\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"nginx\"\ntag = \"alpine\"\nsource = \"/etc/nginx/nginx.conf\"\ndestination = \"extracted:///nginx.conf\"\n\n# Copy to repository\n[[actions]]\nname = \"use-extracted-config\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"extracted:///nginx.conf\"\ndestination = \"repository:///config/nginx.conf\"\n</code></pre>"},{"location":"actions/docker/#docker-extract-claude-analysis","title":"Docker Extract + Claude Analysis","text":"<pre><code># Extract application code\n[[actions]]\nname = \"extract-app-code\"\ntype = \"docker\"\ncommand = \"extract\"\nimage = \"production-app\"\ntag = \"latest\"\nsource = \"/app/src/\"\ndestination = \"extracted:///prod-code/\"\n\n# Analyze with Claude\n[[actions]]\nname = \"analyze-differences\"\ntype = \"claude\"\nprompt = \"prompts/analyze-prod-vs-repo.md\"\n# Prompt can reference both extracted:///prod-code/ and repository:///\n</code></pre>"},{"location":"actions/file/","title":"File Actions","text":"<p>File actions provide comprehensive file manipulation capabilities including copying, moving, deleting, appending, and writing files with support for glob patterns and multiple encoding options.</p>"},{"location":"actions/file/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"file\"\ncommand = \"copy|move|rename|delete|append|write\"\n# Command-specific fields documented below\n</code></pre>"},{"location":"actions/file/#commands","title":"Commands","text":""},{"location":"actions/file/#copy","title":"copy","text":"<p>Copy files or directories with glob pattern support.</p> <p>Required Fields:</p> <ul> <li><code>source</code>: Source file/directory path or glob pattern</li> <li><code>destination</code>: Destination path</li> </ul> <p>Examples:</p> <pre><code># Copy single file\n[[actions]]\nname = \"copy-readme\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///README.md\"\ndestination = \"repository:///README.md\"\n\n# Copy with glob pattern\n[[actions]]\nname = \"copy-yaml-files\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///configs/*.yaml\"\ndestination = \"repository:///config/\"\n\n# Copy directory\n[[actions]]\nname = \"copy-templates\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///templates/\"\ndestination = \"repository:///.github/templates/\"\n\n# Recursive glob pattern\n[[actions]]\nname = \"copy-all-python\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///**/*.py\"\ndestination = \"repository:///scripts/\"\n</code></pre> <p>Glob Pattern Support:</p> <ul> <li><code>*</code> - Matches any characters within a filename</li> <li><code>?</code> - Matches single character</li> <li><code>[...]</code> - Matches character ranges</li> <li><code>**/</code> - Recursive directory matching</li> </ul> <p>Behavior:</p> <ul> <li>Creates destination parent directories automatically</li> <li>For glob patterns, destination must be a directory</li> <li>Preserves file metadata (timestamps, permissions)</li> <li>For directories, uses recursive copy</li> </ul>"},{"location":"actions/file/#move","title":"move","text":"<p>Move (rename across directories) files or directories.</p> <p>Required Fields:</p> <ul> <li><code>source</code>: Source file/directory path</li> <li><code>destination</code>: Destination path</li> </ul> <p>Examples:</p> <pre><code># Move file to different directory\n[[actions]]\nname = \"relocate-config\"\ntype = \"file\"\ncommand = \"move\"\nsource = \"repository:///old-location/config.yaml\"\ndestination = \"repository:///config/app.yaml\"\n\n# Reorganize directory structure\n[[actions]]\nname = \"move-tests\"\ntype = \"file\"\ncommand = \"move\"\nsource = \"repository:///old_tests/\"\ndestination = \"repository:///tests/\"\n</code></pre> <p>Behavior:</p> <ul> <li>Source file/directory is removed after move</li> <li>Creates destination parent directories automatically</li> <li>Fails if source doesn't exist</li> </ul>"},{"location":"actions/file/#rename","title":"rename","text":"<p>Rename files within the same directory or move to different location.</p> <p>Required Fields:</p> <ul> <li><code>source</code>: Source file path</li> <li><code>destination</code>: Destination file path</li> </ul> <p>Examples:</p> <pre><code># Simple rename\n[[actions]]\nname = \"rename-config\"\ntype = \"file\"\ncommand = \"rename\"\nsource = \"repository:///config.yml\"\ndestination = \"repository:///config.yaml\"\n\n# Rename with path change\n[[actions]]\nname = \"rename-and-move\"\ntype = \"file\"\ncommand = \"rename\"\nsource = \"repository:///src/old_module.py\"\ndestination = \"repository:///src/new_module.py\"\n</code></pre> <p>Behavior:</p> <ul> <li>Similar to <code>move</code> but semantically for file renaming</li> <li>Creates destination parent directories automatically</li> </ul>"},{"location":"actions/file/#delete","title":"delete","text":"<p>Delete files or directories, with regex pattern matching support.</p> <p>Required Fields: One of:</p> <ul> <li><code>path</code>: Specific file/directory path</li> <li><code>pattern</code>: Regex pattern for matching files</li> </ul> <p>Examples:</p> <pre><code># Delete specific file\n[[actions]]\nname = \"remove-old-config\"\ntype = \"file\"\ncommand = \"delete\"\npath = \"repository:///old-config.yaml\"\n\n# Delete directory\n[[actions]]\nname = \"remove-cache\"\ntype = \"file\"\ncommand = \"delete\"\npath = \"repository:///__pycache__/\"\n\n# Delete with regex pattern\n[[actions]]\nname = \"remove-pyc-files\"\ntype = \"file\"\ncommand = \"delete\"\npattern = \".*\\\\.pyc$\"\n\n# Delete temporary files\n[[actions]]\nname = \"cleanup-temps\"\ntype = \"file\"\ncommand = \"delete\"\npattern = \".*\\\\.(tmp|bak|swp)$\"\n</code></pre> <p>Behavior:</p> <ul> <li>For <code>path</code>: Deletes specific file or directory (recursive)</li> <li>For <code>pattern</code>: Searches recursively and deletes all matching files</li> <li>Does not error if path doesn't exist</li> <li>Pattern matching uses Python regex syntax (string in TOML, compiled at runtime)</li> </ul>"},{"location":"actions/file/#append","title":"append","text":"<p>Append content to existing files or create new files.</p> <p>Required Fields:</p> <ul> <li><code>path</code>: Target file path</li> <li><code>content</code>: Content to append (string or bytes)</li> </ul> <p>Optional Fields:</p> <ul> <li><code>encoding</code>: Character encoding (default: <code>utf-8</code>)</li> </ul> <p>Examples:</p> <pre><code># Append text to existing file\n[[actions]]\nname = \"add-to-gitignore\"\ntype = \"file\"\ncommand = \"append\"\npath = \"repository:///.gitignore\"\ncontent = \"\"\"\n\n# Added by automation\n*.log\n__pycache__/\n.env\n\"\"\"\n\n# Create or append to file\n[[actions]]\nname = \"add-config-section\"\ntype = \"file\"\ncommand = \"append\"\npath = \"repository:///config.ini\"\ncontent = \"\"\"\n[new_section]\noption = value\n\"\"\"\n\n# Append with custom encoding\n[[actions]]\nname = \"append-unicode\"\ntype = \"file\"\ncommand = \"append\"\npath = \"repository:///unicode.txt\"\ncontent = \"Hello \u4e16\u754c\\n\"\nencoding = \"utf-16\"\n</code></pre> <p>Behavior:</p> <ul> <li>Creates file if it doesn't exist</li> <li>Creates parent directories automatically</li> <li>Appends to end of existing files</li> <li>Text mode only (bytes are decoded using specified encoding)</li> </ul>"},{"location":"actions/file/#write","title":"write","text":"<p>Write content to files, overwriting if they exist.</p> <p>Required Fields:</p> <ul> <li><code>path</code>: Target file path</li> <li><code>content</code>: Content to write (string or bytes)</li> </ul> <p>Optional Fields:</p> <ul> <li><code>encoding</code>: Character encoding (default: <code>utf-8</code>)</li> </ul> <p>Examples:</p> <pre><code># Write text file\n[[actions]]\nname = \"create-readme\"\ntype = \"file\"\ncommand = \"write\"\npath = \"repository:///README.md\"\ncontent = \"\"\"\n# My Project\n\nDescription here\n\n## Installation\n\n````bash\npip install my-project\n````\n\"\"\"\n\n# Write JSON configuration\n[[actions]]\nname = \"write-config\"\ntype = \"file\"\ncommand = \"write\"\npath = \"repository:///config.json\"\ncontent = \"\"\"\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"type\": \"library\"\n}\n\"\"\"\n\n# Write with custom encoding\n[[actions]]\nname = \"write-utf16\"\ntype = \"file\"\ncommand = \"write\"\npath = \"repository:///data.txt\"\ncontent = \"Unicode content: \u4f60\u597d\"\nencoding = \"utf-16\"\n</code></pre> <p>Behavior:</p> <ul> <li>Overwrites existing files</li> <li>Creates file if it doesn't exist</li> <li>Creates parent directories automatically</li> <li>Text mode (string) or binary mode (bytes) - detected automatically</li> <li>Does NOT support Jinja2 templating (use <code>template</code> action instead)</li> </ul>"},{"location":"actions/file/#path-resolution","title":"Path Resolution","text":"<p>File actions support all ResourceUrl schemes:</p> Scheme Base Directory Use Case <code>file:///</code> or no scheme Working directory Temporary files <code>repository:///</code> Cloned repository Repository files <code>workflow:///</code> Workflow resources Template files <code>extracted:///</code> Docker extracts Extracted files <p>Examples:</p> <pre><code># Repository to repository\n[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///README.md\"\ndestination = \"repository:///docs/README.md\"\n\n# Workflow to repository\n[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///templates/.gitignore\"\ndestination = \"repository:///.gitignore\"\n\n# Extracted to repository\n[[actions]]\ntype = \"file\"\ncommand = \"copy\"\nsource = \"extracted:///configs/app.yaml\"\ndestination = \"repository:///config/app.yaml\"\n\n# Simple paths (relative to working directory)\n[[actions]]\ntype = \"file\"\ncommand = \"write\"\npath = \"temp-file.txt\"  # Same as file:///temp-file.txt\ncontent = \"temporary data\"\n</code></pre>"},{"location":"actions/file/#common-patterns","title":"Common Patterns","text":""},{"location":"actions/file/#backup-and-replace-pattern","title":"Backup and Replace Pattern","text":"<pre><code>[[actions]]\nname = \"backup-original\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"repository:///config.yaml\"\ndestination = \"repository:///config.yaml.bak\"\n\n[[actions]]\nname = \"write-new-config\"\ntype = \"file\"\ncommand = \"write\"\npath = \"repository:///config.yaml\"\ncontent = \"\"\"\ndatabase:\n  host: localhost\n  port: 5432\n\"\"\"\n</code></pre>"},{"location":"actions/file/#template-deployment-pattern","title":"Template Deployment Pattern","text":"<pre><code>[[actions]]\nname = \"copy-gitignore\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///.gitignore\"\ndestination = \"repository:///.gitignore\"\n\n[[actions]]\nname = \"copy-pre-commit\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///.pre-commit-config.yaml\"\ndestination = \"repository:///.pre-commit-config.yaml\"\n</code></pre>"},{"location":"actions/file/#cleanup-pattern","title":"Cleanup Pattern","text":"<pre><code>[[actions]]\nname = \"remove-legacy-configs\"\ntype = \"file\"\ncommand = \"delete\"\npattern = \".*\\\\.legacy\\\\.yaml$\"\n\n[[actions]]\nname = \"remove-cache-dirs\"\ntype = \"file\"\ncommand = \"delete\"\npath = \"repository:///__pycache__/\"\n</code></pre>"},{"location":"actions/file/#glob-copy-pattern","title":"Glob Copy Pattern","text":"<pre><code>[[actions]]\nname = \"copy-all-workflows\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///.github/workflows/*.yml\"\ndestination = \"repository:///.github/workflows/\"\n\n[[actions]]\nname = \"copy-python-modules\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///src/**/*.py\"\ndestination = \"repository:///src/\"\n</code></pre>"},{"location":"actions/file/#error-handling","title":"Error Handling","text":"<p>File actions raise <code>RuntimeError</code> in these situations:</p> <ul> <li><code>copy</code>/<code>move</code>/<code>rename</code>: Source file doesn't exist</li> <li><code>delete</code>: No errors (gracefully handles missing files)</li> <li><code>append</code>/<code>write</code>: I/O errors, permission denied</li> </ul>"},{"location":"actions/file/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>All operations create parent directories automatically</li> <li>File metadata (permissions, timestamps) preserved in copy operations via <code>shutil.copy2</code></li> <li>Glob patterns resolved relative to source base directory</li> <li>Empty glob results raise <code>RuntimeError</code></li> <li>Binary content detected automatically (bytes vs string) in <code>write</code> command</li> <li><code>append</code> command converts bytes to text using encoding (text mode only)</li> <li>Encoding applies only to text operations (default: <code>utf-8</code>)</li> <li>Pattern field accepts regex strings in TOML, compiled to <code>re.Pattern</code> at runtime</li> <li>Content does NOT support Jinja2 templating - use <code>template</code> action type for that</li> </ul>"},{"location":"actions/git/","title":"Git Actions","text":"<p>Git actions provide version control operations for extracting files from Git history and cloning repositories.</p>"},{"location":"actions/git/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"git\"\ncommand = \"extract\"  # or \"clone\"\n# Command-specific fields below\n</code></pre>"},{"location":"actions/git/#commands","title":"Commands","text":""},{"location":"actions/git/#extract","title":"extract","text":"<p>Extract a specific file from Git commit history. Useful for retrieving old versions of files from before certain changes were made.</p> <p>Required Fields:</p> <ul> <li><code>source</code> (pathlib.Path): Path to the file in the repository</li> <li><code>destination</code> (<code>ResourceUrl</code>): Where to write the extracted file</li> </ul> <p>Optional Fields:</p> <ul> <li><code>commit_keyword</code> (string): Keyword to search for in commit messages. If not provided, extracts from current HEAD (default: None)</li> <li><code>search_strategy</code> (string): How to find the commit - <code>before_first_match</code> or <code>before_last_match</code>. Only used when <code>commit_keyword</code> is provided (default: <code>before_last_match</code>)</li> <li><code>ignore_errors</code> (bool): Continue if extraction fails instead of raising RuntimeError (default: false)</li> </ul> <p>Example: <pre><code>[[actions]]\nname = \"extract-old-config\"\ntype = \"git\"\ncommand = \"extract\"\nsource = \"config.yaml\"\ndestination = \"extracted:///old-config.yaml\"\ncommit_keyword = \"update config\"\nsearch_strategy = \"before_last_match\"\n</code></pre></p> <p>Search Strategies:</p> <ul> <li><code>before_first_match</code>: Extract file from commit before the first match of keyword</li> <li><code>before_last_match</code> (default): Extract file from commit before the last match of keyword</li> </ul>"},{"location":"actions/git/#clone","title":"clone","text":"<p>Clone a Git repository to a specific location.</p> <p>Required Fields:</p> <ul> <li><code>url</code> (string): Git repository URL to clone</li> <li><code>destination</code> (<code>ResourceUrl</code>): Where to clone the repository</li> </ul> <p>Optional Fields:</p> <ul> <li><code>branch</code> (string): Specific branch to clone</li> <li><code>depth</code> (int): Shallow clone depth (for faster clones)</li> </ul> <p>Example: <pre><code>[[actions]]\nname = \"clone-external-repo\"\ntype = \"git\"\ncommand = \"clone\"\nurl = \"https://github.com/example/repo.git\"\ndestination = \"extracted:///external-repo/\"\nbranch = \"main\"\ndepth = 1\n</code></pre></p>"},{"location":"actions/git/#common-use-cases","title":"Common Use Cases","text":""},{"location":"actions/git/#extract-file-before-breaking-change","title":"Extract File Before Breaking Change","text":"<pre><code>[[actions]]\nname = \"get-old-dockerfile\"\ntype = \"git\"\ncommand = \"extract\"\nsource = \"Dockerfile\"\ndestination = \"extracted:///Dockerfile.old\"\ncommit_keyword = \"breaking\"\nsearch_strategy = \"before_last_match\"\nignore_errors = true\n</code></pre>"},{"location":"actions/git/#extract-config-from-before-migration","title":"Extract Config from Before Migration","text":"<pre><code>[[actions]]\nname = \"backup-old-config\"\ntype = \"git\"\ncommand = \"extract\"\nsource = \"config/settings.yaml\"\ndestination = \"extracted:///settings.yaml.backup\"\ncommit_keyword = \"migrate to new config\"\nsearch_strategy = \"before_first_match\"\n\n[[actions]]\nname = \"merge-configs\"\ntype = \"shell\"\ncommand = \"python scripts/merge-configs.py\"\nworking_directory = \"{{ working_directory }}\"\n</code></pre>"},{"location":"actions/git/#clone-template-repository","title":"Clone Template Repository","text":"<pre><code>[[actions]]\nname = \"clone-template\"\ntype = \"git\"\ncommand = \"clone\"\nurl = \"https://github.com/myorg/project-template.git\"\ndestination = \"extracted:///template/\"\nbranch = \"main\"\ndepth = 1\n\n[[actions]]\nname = \"copy-template-files\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"extracted:///template/configs/*.yaml\"\ndestination = \"repository:///configs/\"\n</code></pre>"},{"location":"actions/git/#extract-multiple-historical-files","title":"Extract Multiple Historical Files","text":"<pre><code>[[actions]]\nname = \"extract-old-requirements\"\ntype = \"git\"\ncommand = \"extract\"\nsource = \"requirements.txt\"\ndestination = \"extracted:///requirements.old.txt\"\ncommit_keyword = \"update dependencies\"\nsearch_strategy = \"before_last_match\"\n\n[[actions]]\nname = \"extract-old-dockerfile\"\ntype = \"git\"\ncommand = \"extract\"\nsource = \"Dockerfile\"\ndestination = \"extracted:///Dockerfile.old\"\ncommit_keyword = \"update base image\"\nsearch_strategy = \"before_last_match\"\n\n[[actions]]\nname = \"compare-versions\"\ntype = \"shell\"\ncommand = \"diff -u extracted/requirements.old.txt repository/requirements.txt || true\"\nworking_directory = \"{{ working_directory }}\"\n</code></pre>"},{"location":"actions/git/#integration-with-other-actions","title":"Integration with Other Actions","text":""},{"location":"actions/git/#git-extract-file-copy-pattern","title":"Git Extract + File Copy Pattern","text":"<pre><code># Extract old version from git history\n[[actions]]\nname = \"get-legacy-config\"\ntype = \"git\"\ncommand = \"extract\"\nsource = \".github/workflows/ci.yml\"\ndestination = \"extracted:///ci.yml.legacy\"\ncommit_keyword = \"migrate to v2\"\nsearch_strategy = \"before_first_match\"\n\n# Copy to repository for comparison\n[[actions]]\nname = \"save-for-reference\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"extracted:///ci.yml.legacy\"\ndestination = \"repository:///.github/workflows/ci.yml.legacy\"\n</code></pre>"},{"location":"actions/git/#git-clone-template-pattern","title":"Git Clone + Template Pattern","text":"<pre><code># Clone shared configuration repo\n[[actions]]\nname = \"clone-shared-configs\"\ntype = \"git\"\ncommand = \"clone\"\nurl = \"https://github.com/myorg/shared-configs.git\"\ndestination = \"extracted:///shared/\"\nbranch = \"main\"\n\n# Render templates from cloned repo\n[[actions]]\nname = \"render-config\"\ntype = \"template\"\nsource_path = \"extracted:///shared/templates/\"\ndestination_path = \"repository:///config/\"\n</code></pre>"},{"location":"actions/git/#implementation-notes","title":"Implementation Notes","text":"<p>Extract command:</p> <ul> <li>If <code>commit_keyword</code> provided: Searches git log for commits matching keyword and extracts from the commit before the match</li> <li>If no <code>commit_keyword</code>: Extracts file from current HEAD</li> <li>Uses <code>git show COMMIT:PATH</code> to retrieve file contents</li> <li>Returns false if file or commit not found (unless <code>ignore_errors</code> is true)</li> <li>Works within the cloned repository directory (<code>{working_directory}/repository/</code>)</li> <li>File must exist at the target commit (raises RuntimeError if not found)</li> </ul> <p>Clone command:</p> <ul> <li>Uses <code>git clone</code> with optional branch and depth parameters</li> <li>Shallow clones (<code>depth=1</code>) are faster for large repositories</li> <li>Cloned repository placed at destination path</li> <li>Full git history available unless depth is specified</li> </ul> <p>Search strategies:</p> <ul> <li><code>before_first_match</code>: Useful for finding original version before any changes</li> <li><code>before_last_match</code>: Useful for finding most recent version before latest change</li> </ul> <p>Path resolution:</p> <ul> <li><code>source</code> paths are relative to repository root</li> <li><code>destination</code> supports all <code>ResourceUrl</code> schemes (<code>extracted:///</code>, <code>repository:///</code>, etc.)</li> <li>Destination directories created automatically if needed</li> </ul>"},{"location":"actions/github/","title":"GitHub Actions","text":"<p>GitHub actions provide GitHub-specific operations like environment synchronization and workflow management.</p>"},{"location":"actions/github/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"github\"\ncommand = \"sync_environments\"\n# Command-specific fields\n</code></pre>"},{"location":"actions/github/#commands","title":"Commands","text":""},{"location":"actions/github/#sync_environments","title":"sync_environments","text":"<p>Status: \u274c Not yet implemented (raises NotImplementedError)</p> <p>Synchronize GitHub repository environments with Imbi project environments.</p> <p>Example: <pre><code>[[actions]]\nname = \"sync-github-envs\"\ntype = \"github\"\ncommand = \"sync_environments\"\n</code></pre></p> <p>Planned Behavior:</p> <ul> <li>Read environments from Imbi project</li> <li>Create/update GitHub repository environments</li> <li>Synchronize environment variables and secrets</li> <li>Maintain environment protection rules</li> </ul>"},{"location":"actions/github/#common-use-cases","title":"Common Use Cases","text":"<p>Note: These examples show the intended usage once <code>sync_environments</code> is implemented.</p>"},{"location":"actions/github/#environment-synchronization","title":"Environment Synchronization","text":"<pre><code>[[conditions]]\nremote_file_exists = \".github/workflows/deploy.yml\"\n\n[[actions]]\nname = \"ensure-environments\"\ntype = \"github\"\ncommand = \"sync_environments\"\n</code></pre>"},{"location":"actions/github/#post-deployment-updates","title":"Post-Deployment Updates","text":"<pre><code>[[actions]]\nname = \"deploy-code\"\ntype = \"shell\"\ncommand = \"deploy.sh\"\n\n[[actions]]\nname = \"update-environments\"\ntype = \"github\"\ncommand = \"sync_environments\"\n</code></pre>"},{"location":"actions/github/#implementation-status","title":"Implementation Status","text":"<p>Currently, the GitHub action type is defined but not implemented:</p> <ul> <li><code>sync_environments</code>: Raises <code>NotImplementedError</code></li> </ul> <p>The action type exists in the codebase but will error when executed. This is likely a placeholder for future functionality.</p>"},{"location":"actions/github/#planned-implementation-notes","title":"Planned Implementation Notes","text":"<p>When implemented, the action would:</p> <ul> <li>Require GitHub API access with appropriate permissions</li> <li>Use authenticated GitHub client from workflow context</li> <li>Respect GitHub API rate limits</li> <li>Provide idempotent operations (safe to re-run)</li> <li>Integrate with Imbi project environment configuration</li> </ul>"},{"location":"actions/imbi/","title":"Imbi Actions","text":"<p>Imbi actions provide integration with the Imbi project management system, enabling workflows to interact with and update project metadata, facts, and configurations.</p>"},{"location":"actions/imbi/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"imbi\"\ncommand = \"set_project_fact\"  # Required\n</code></pre>"},{"location":"actions/imbi/#available-commands","title":"Available Commands","text":""},{"location":"actions/imbi/#set_project_fact","title":"set_project_fact","text":"<p>Status: Not yet implemented</p> <p>Updates or creates a fact for the current project in Imbi.</p> <p>Configuration: <pre><code>[[actions]]\nname = \"update-python-version\"\ntype = \"imbi\"\ncommand = \"set_project_fact\"\nfact_name = \"Python Version\"\nfact_value = \"3.12\"\n</code></pre></p> <p>Fields: - <code>fact_name</code> (string, required): Name of the fact to set - <code>fact_value</code> (string, required): Value to assign to the fact</p> <p>Use Cases: - Update project metadata after automated changes - Track migration status across projects - Record version upgrades or dependency changes - Maintain synchronization between repository state and Imbi</p>"},{"location":"actions/imbi/#context-access","title":"Context Access","text":"<p>Imbi actions have access to the current project data through the workflow context:</p> <pre><code>context.imbi_project.id           # Project ID\ncontext.imbi_project.name         # Project name\ncontext.imbi_project.namespace    # Project namespace\ncontext.imbi_project.project_type # Project type\ncontext.imbi_project.facts        # Current project facts\n</code></pre>"},{"location":"actions/imbi/#examples","title":"Examples","text":""},{"location":"actions/imbi/#update-python-version-fact","title":"Update Python Version Fact","text":"<pre><code>[[actions]]\nname = \"upgrade-python\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/upgrade-python.md\"\n\n[[actions]]\nname = \"record-python-version\"\ntype = \"imbi\"\ncommand = \"set_project_fact\"\nfact_name = \"Programming Language\"\nfact_value = \"Python 3.12\"\n</code></pre>"},{"location":"actions/imbi/#track-migration-status","title":"Track Migration Status","text":"<pre><code>[[actions]]\nname = \"migrate-config\"\ntype = \"file\"\ncommand = \"copy\"\nsource = \"workflow:///new-config.yaml\"\ndestination = \"repository:///config.yaml\"\n\n[[actions]]\nname = \"mark-migration-complete\"\ntype = \"imbi\"\ncommand = \"set_project_fact\"\nfact_name = \"Config Migration Status\"\nfact_value = \"Completed\"\n</code></pre>"},{"location":"actions/imbi/#record-docker-image-version","title":"Record Docker Image Version","text":"<pre><code>[[actions]]\nname = \"update-dockerfile\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/update-docker.md\"\n\n[[actions]]\nname = \"record-base-image\"\ntype = \"imbi\"\ncommand = \"set_project_fact\"\nfact_name = \"Docker Base Image\"\nfact_value = \"python:3.12-slim\"\n</code></pre>"},{"location":"actions/imbi/#common-patterns","title":"Common Patterns","text":""},{"location":"actions/imbi/#post-migration-tracking","title":"Post-Migration Tracking","text":"<pre><code># Perform migration\n[[actions]]\nname = \"migrate-to-new-framework\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/framework-migration.md\"\n\n# Record successful migration\n[[actions]]\nname = \"update-framework-fact\"\ntype = \"imbi\"\ncommand = \"set_project_fact\"\nfact_name = \"Framework\"\nfact_value = \"FastAPI 0.110\"\n</code></pre>"},{"location":"actions/imbi/#conditional-updates-based-on-facts","title":"Conditional Updates Based on Facts","text":"<p>Use workflow filters to target projects by existing facts, then update after transformation:</p> <pre><code># In workflow config.toml\n[filter]\nproject_facts = {\"Framework\" = \"Flask\"}\n\n# Actions update to FastAPI and record change\n[[actions]]\nname = \"migrate-flask-to-fastapi\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/flask-to-fastapi.md\"\n\n[[actions]]\nname = \"update-framework-fact\"\ntype = \"imbi\"\ncommand = \"set_project_fact\"\nfact_name = \"Framework\"\nfact_value = \"FastAPI\"\n</code></pre>"},{"location":"actions/imbi/#implementation-status","title":"Implementation Status","text":"<p>Currently, Imbi actions are defined but not fully implemented. The <code>set_project_fact</code> command raises <code>NotImplementedError</code>.</p> <p>Planned Implementation:</p> <ul> <li>Integration with Imbi API for fact updates</li> <li>Support for creating new facts</li> <li>Validation of fact names against Imbi schema</li> <li>Batch fact updates</li> <li>Conditional fact updates</li> </ul>"},{"location":"actions/imbi/#integration-with-other-actions","title":"Integration with Other Actions","text":""},{"location":"actions/imbi/#with-claude-actions","title":"With Claude Actions","text":"<pre><code>[[actions]]\nname = \"ai-dependency-update\"\ntype = \"claude\"\nprompt = \"workflow:///prompts/update-deps.md\"\n\n[[actions]]\nname = \"record-dependency-version\"\ntype = \"imbi\"\ncommand = \"set_project_fact\"\nfact_name = \"Primary Dependencies\"\nfact_value = \"httpx&gt;=0.27, pydantic&gt;=2.0\"\n</code></pre>"},{"location":"actions/imbi/#with-shell-actions","title":"With Shell Actions","text":"<pre><code>[[actions]]\nname = \"detect-python-version\"\ntype = \"shell\"\ncommand = \"python --version | cut -d' ' -f2\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"record-detected-version\"\ntype = \"imbi\"\ncommand = \"set_project_fact\"\nfact_name = \"Python Version\"\nfact_value = \"{{ shell_output }}\"  # From previous action\n</code></pre>"},{"location":"actions/imbi/#future-enhancements","title":"Future Enhancements","text":"<p>Planned additions to Imbi action functionality:</p> <ul> <li>get_project_fact: Retrieve fact values for conditional logic</li> <li>delete_project_fact: Remove obsolete facts</li> <li>set_project_metadata: Update project name, description, etc.</li> <li>add_project_link: Add external links to projects</li> <li>update_project_type: Change project classification</li> <li>batch_update_facts: Update multiple facts in one operation</li> </ul>"},{"location":"actions/imbi/#best-practices","title":"Best Practices","text":"<ol> <li>Use After Transformations: Record changes after successful transformations</li> <li>Semantic Fact Names: Use clear, descriptive fact names that match Imbi's schema</li> <li>Version Tracking: Record version numbers for dependencies and tools</li> <li>Status Tracking: Use facts to track migration/upgrade status across projects</li> <li>Conditional Execution: Combine with workflow filters to target specific project states</li> </ol>"},{"location":"actions/imbi/#see-also","title":"See Also","text":"<ul> <li>Callable Actions - Direct Imbi API method calls (alternative approach)</li> <li>Workflow Configuration - Using project facts in filters</li> <li>Utility Actions - Logging and state management</li> </ul>"},{"location":"actions/shell/","title":"Shell Actions","text":"<p>Shell actions execute arbitrary commands with full Jinja2 template support for dynamic command construction and access to workflow context variables.</p>"},{"location":"actions/shell/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"shell\"\ncommand = \"command to execute\"\nworking_directory = \"path\"  # Optional, default: repository:///\nignore_errors = false       # Optional, default: false\n</code></pre>"},{"location":"actions/shell/#fields","title":"Fields","text":""},{"location":"actions/shell/#command-required","title":"command (required)","text":"<p>The shell command to execute. Supports full Jinja2 template syntax for variable substitution.</p> <p>Type: <code>string</code></p> <p>Template Variables Available: - <code>workflow</code>: Workflow configuration object - <code>imbi_project</code>: Complete Imbi project data - <code>github_repository</code>: GitHub repository object (if applicable) - <code>gitlab_project</code>: GitLab project object (if applicable) - <code>working_directory</code>: Path to workflow working directory - <code>starting_commit</code>: Initial Git commit SHA</p>"},{"location":"actions/shell/#working_directory-optional","title":"working_directory (optional)","text":"<p>Directory to execute the command in.</p> <p>Type: <code>ResourceUrl</code> (string path)</p> <p>Default: <code>repository:///</code> (the cloned repository directory)</p>"},{"location":"actions/shell/#ignore_errors-optional","title":"ignore_errors (optional)","text":"<p>Whether to continue workflow execution if the command fails (non-zero exit code).</p> <p>Type: <code>boolean</code></p> <p>Default: <code>false</code></p>"},{"location":"actions/shell/#examples","title":"Examples","text":""},{"location":"actions/shell/#basic-command-execution","title":"Basic Command Execution","text":"<pre><code>[[actions]]\nname = \"run-tests\"\ntype = \"shell\"\ncommand = \"pytest tests/ -v\"\n</code></pre>"},{"location":"actions/shell/#command-with-working-directory","title":"Command with Working Directory","text":"<pre><code>[[actions]]\nname = \"build-project\"\ntype = \"shell\"\ncommand = \"python setup.py build\"\nworking_directory = \"{{ working_directory }}/repository\"\n</code></pre>"},{"location":"actions/shell/#template-variable-usage","title":"Template Variable Usage","text":"<pre><code>[[actions]]\nname = \"create-tag\"\ntype = \"shell\"\ncommand = \"git tag -a v{{ version }} -m 'Release {{ version }} for {{ imbi_project.name }}'\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#multi-step-script-execution","title":"Multi-Step Script Execution","text":"<p>Note: Shell actions execute commands directly without a shell, so shell operators like <code>&amp;&amp;</code>, <code>||</code>, <code>;</code>, and <code>|</code> do not work. For multi-step operations, use a shell wrapper:</p> <pre><code>[[actions]]\nname = \"setup-and-test\"\ntype = \"shell\"\ncommand = \"\"\"\nbash -c 'python -m venv .venv &amp;&amp; source .venv/bin/activate &amp;&amp; pip install -e .[dev] &amp;&amp; pytest tests/ --cov={{ imbi_project.slug }}'\n\"\"\"\nworking_directory = \"{{ working_directory }}/repository\"\n</code></pre>"},{"location":"actions/shell/#conditional-execution-with-shell","title":"Conditional Execution with Shell","text":"<pre><code>[[actions]]\nname = \"npm-install-if-needed\"\ntype = \"shell\"\ncommand = \"bash -c 'if [ -f package.json ]; then npm install; fi'\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#ignore-errors","title":"Ignore Errors","text":"<pre><code>[[actions]]\nname = \"optional-linting\"\ntype = \"shell\"\ncommand = \"ruff check src/\"\nworking_directory = \"repository:///\"\nignore_errors = true  # Don't fail workflow if linting fails\n</code></pre>"},{"location":"actions/shell/#common-use-cases","title":"Common Use Cases","text":""},{"location":"actions/shell/#running-tests","title":"Running Tests","text":"<pre><code>[[actions]]\nname = \"run-python-tests\"\ntype = \"shell\"\ncommand = \"pytest tests/ -v --tb=short\"\nworking_directory = \"{{ working_directory }}/repository\"\n\n[[actions]]\nname = \"run-javascript-tests\"\ntype = \"shell\"\ncommand = \"npm test\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#building-artifacts","title":"Building Artifacts","text":"<pre><code>[[actions]]\nname = \"build-python-package\"\ntype = \"shell\"\ncommand = \"python -m build\"\nworking_directory = \"{{ working_directory }}/repository\"\n\n[[actions]]\nname = \"build-docker-image\"\ntype = \"shell\"\ncommand = \"docker build -t {{ imbi_project.slug }}:latest .\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#code-quality-tools","title":"Code Quality Tools","text":"<pre><code>[[actions]]\nname = \"run-linter\"\ntype = \"shell\"\ncommand = \"ruff check --fix src/\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"format-code\"\ntype = \"shell\"\ncommand = \"ruff format src/ tests/\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"type-check\"\ntype = \"shell\"\ncommand = \"mypy src/\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#git-operations","title":"Git Operations","text":"<pre><code>[[actions]]\nname = \"get-current-version\"\ntype = \"shell\"\ncommand = \"git describe --tags --abbrev=0\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"list-changed-files\"\ntype = \"shell\"\ncommand = \"git diff --name-only {{ starting_commit }} HEAD\"\nworking_directory = \"{{ working_directory }}/repository\"\n</code></pre>"},{"location":"actions/shell/#environment-setup","title":"Environment Setup","text":"<pre><code>[[actions]]\nname = \"setup-python-env\"\ntype = \"shell\"\ncommand = \"\"\"\npython -m venv .venv &amp;&amp; \\\n.venv/bin/pip install --upgrade pip setuptools wheel\n\"\"\"\nworking_directory = \"repository:///\"\n\n[[actions]]\nname = \"setup-node-env\"\ntype = \"shell\"\ncommand = \"npm ci\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#advanced-template-examples","title":"Advanced Template Examples","text":""},{"location":"actions/shell/#using-imbi-project-data","title":"Using Imbi Project Data","text":"<pre><code>[[actions]]\nname = \"project-specific-command\"\ntype = \"shell\"\ncommand = \"\"\"\necho \"Processing {{ imbi_project.name }}\"\necho \"Type: {{ imbi_project.project_type }}\"\necho \"Namespace: {{ imbi_project.namespace }}\"\n\"\"\"\n</code></pre>"},{"location":"actions/shell/#conditional-logic-with-jinja2","title":"Conditional Logic with Jinja2","text":"<pre><code>[[actions]]\nname = \"environment-specific-deploy\"\ntype = \"shell\"\ncommand = \"\"\"\n{% if imbi_project.project_type == 'api' %}\n  python deploy_api.py\n{% elif imbi_project.project_type == 'consumer' %}\n  python deploy_consumer.py\n{% else %}\n  echo \"Unknown project type\"\n{% endif %}\n\"\"\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#using-project-facts","title":"Using Project Facts","text":"<pre><code>[[actions]]\nname = \"language-specific-test\"\ntype = \"shell\"\ncommand = \"\"\"\n{% if imbi_project.facts.get('Programming Language') == 'Python 3.12' %}\n  pytest tests/ --python=3.12\n{% elif imbi_project.facts.get('Programming Language') == 'Python 3.11' %}\n  pytest tests/ --python=3.11\n{% endif %}\n\"\"\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#iterating-over-lists","title":"Iterating Over Lists","text":"<pre><code>[[actions]]\nname = \"install-dependencies\"\ntype = \"shell\"\ncommand = \"\"\"\n{% for dep in dependencies %}\npip install {{ dep }}\n{% endfor %}\n\"\"\"\nworking_directory = \"repository:///\"\n</code></pre>"},{"location":"actions/shell/#path-resolution","title":"Path Resolution","text":"<p>Working directory supports all ResourceUrl schemes:</p> <pre><code># Repository directory\n[[actions]]\ntype = \"shell\"\ncommand = \"ls -la\"\nworking_directory = \"repository:///\"\n\n# Workflow directory\n[[actions]]\ntype = \"shell\"\ncommand = \"cat templates/README.md\"\nworking_directory = \"workflow:///\"\n\n# Extracted files directory\n[[actions]]\ntype = \"shell\"\ncommand = \"find . -name '*.conf'\"\nworking_directory = \"extracted:///\"\n\n# Explicit working directory path\n[[actions]]\ntype = \"shell\"\ncommand = \"pwd\"\nworking_directory = \"{{ working_directory }}/repository\"\n</code></pre>"},{"location":"actions/shell/#command-output","title":"Command Output","text":""},{"location":"actions/shell/#captured-output","title":"Captured Output","text":"<ul> <li>stdout: Logged at DEBUG level</li> <li>stderr: Logged at DEBUG level</li> <li>Exit Code: Non-zero exit codes cause workflow failure (unless <code>ignore_failure = true</code>)</li> </ul>"},{"location":"actions/shell/#output-in-logs","title":"Output in Logs","text":"<pre><code># Logger output example:\nDEBUG: Executing shell command: pytest tests/ -v\nDEBUG: Command stdout: ===== test session starts =====\nDEBUG: Command stderr:\nDEBUG: Command exit code: 0\n</code></pre>"},{"location":"actions/shell/#error-handling","title":"Error Handling","text":""},{"location":"actions/shell/#exit-code-handling","title":"Exit Code Handling","text":"<pre><code># Fail workflow on error (default)\n[[actions]]\nname = \"critical-command\"\ntype = \"shell\"\ncommand = \"important-operation\"\n# Fails workflow if exit code != 0\n\n# Continue on error\n[[actions]]\nname = \"optional-command\"\ntype = \"shell\"\ncommand = \"optional-operation\"\nignore_errors = true  # Continues even if exit code != 0\n</code></pre>"},{"location":"actions/shell/#command-not-found","title":"Command Not Found","text":"<pre><code>[[actions]]\nname = \"missing-command\"\ntype = \"shell\"\ncommand = \"nonexistent-command\"\n# Raises FileNotFoundError: Command not found: nonexistent-command\n</code></pre>"},{"location":"actions/shell/#security-considerations","title":"Security Considerations","text":""},{"location":"actions/shell/#command-injection-prevention","title":"Command Injection Prevention","text":"<p>Template variables are NOT shell-escaped automatically. Be cautious with user-provided data:</p> <pre><code># UNSAFE - if imbi_project.name contains shell metacharacters\n[[actions]]\ntype = \"shell\"\ncommand = \"echo {{ imbi_project.name }}\"\n\n# SAFER - use quotes\n[[actions]]\ntype = \"shell\"\ncommand = \"echo '{{ imbi_project.name }}'\"\n\n# SAFEST - avoid untrusted input in shell commands\n</code></pre>"},{"location":"actions/shell/#environment-variables","title":"Environment Variables","text":"<p>Commands execute with the same environment as the workflow process. Note that environment variables in the command string itself are NOT expanded (no shell):</p> <pre><code>[[actions]]\nname = \"use-env-var\"\ntype = \"shell\"\ncommand = \"bash -c 'echo $HOME &amp;&amp; echo $USER'\"  # Need bash -c for shell features\n</code></pre>"},{"location":"actions/shell/#performance-tips","title":"Performance Tips","text":""},{"location":"actions/shell/#chaining-commands","title":"Chaining Commands","text":"<p>Important: Shell operators require wrapping the command in <code>bash -c</code> or <code>sh -c</code>:</p> <pre><code># Use &amp;&amp; for dependent commands (fail fast):\n[[actions]]\ntype = \"shell\"\ncommand = \"bash -c 'cd repository &amp;&amp; make build &amp;&amp; make test'\"\n\n# Use ; for independent commands (always run all):\n[[actions]]\ntype = \"shell\"\ncommand = \"bash -c 'make clean; make build; make test'\"\n</code></pre>"},{"location":"actions/shell/#background-processes","title":"Background Processes","text":"<p>Not recommended - commands block until completion. For long-running operations, consider using Docker actions instead.</p>"},{"location":"actions/shell/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Commands execute in a subprocess using <code>asyncio.create_subprocess_exec</code></li> <li>No shell by default: Commands are parsed with <code>shlex.split()</code> and executed directly</li> <li>Shell features require explicit shell: Use <code>bash -c '...'</code> or <code>sh -c '...'</code> for:</li> <li>Pipes (<code>|</code>), redirects (<code>&gt;</code>, <code>&lt;</code>), wildcards (<code>*</code>)</li> <li>Command chaining (<code>&amp;&amp;</code>, <code>||</code>, <code>;</code>)</li> <li>Environment variable expansion (<code>$VAR</code>)</li> <li>Built-in shell commands (<code>cd</code>, <code>export</code>, etc.)</li> <li>Working directory resolved before command execution via <code>utils.resolve_path()</code></li> <li>Template rendering occurs before command execution</li> <li>Commands are parsed as shell-like arguments (respecting quotes and escapes)</li> <li>No timeout configured (commands run until completion)</li> <li>stdout and stderr captured and logged at DEBUG level</li> <li>Non-zero exit codes raise <code>subprocess.CalledProcessError</code> (unless <code>ignore_errors=true</code>)</li> </ul>"},{"location":"actions/template/","title":"Template Actions","text":"<p>\u26a0\ufe0f CRITICAL BUG: Template actions are currently broken. Context variables are not passed to templates, causing all variable references to fail with <code>UndefinedError</code>. See Template Context section for details.</p> <p>Template actions render Jinja2 templates with full workflow context, enabling dynamic file generation for configurations, documentation, and code files.</p>"},{"location":"actions/template/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"template\"\nsource_path = \"template-file-or-directory\"\ndestination_path = \"output-location\"\n</code></pre>"},{"location":"actions/template/#fields","title":"Fields","text":""},{"location":"actions/template/#source_path-required","title":"source_path (required)","text":"<p>Path to template file or directory. Can be: - Single <code>.j2</code> template file - Directory containing <code>.j2</code> files (recursively rendered)</p> <p>Type: <code>ResourceUrl</code> (string path)</p> <p>Conventions: - Template files should use <code>.j2</code> extension - Directory paths should NOT include wildcards - Relative to working directory by default - Usually prefixed with <code>workflow:///</code> for workflow resources</p>"},{"location":"actions/template/#destination_path-required","title":"destination_path (required)","text":"<p>Output location for rendered templates.</p> <p>Type: <code>ResourceUrl</code> (string path)</p> <p>Behavior:</p> <ul> <li>For single file: Output file path</li> <li>For directory: Output directory (structure mirrored)</li> <li>Parent directories created automatically</li> <li>Existing files overwritten</li> </ul>"},{"location":"actions/template/#template-context","title":"Template Context","text":"<p>\u26a0\ufe0f KNOWN ISSUE: The current implementation does NOT pass context variables to templates. Template variables like <code>{{ imbi_project.name }}</code> will raise <code>UndefinedError</code> until this bug is fixed.</p> <p>Expected variables (not currently available):</p> Variable Type Description <code>workflow</code> <code>Workflow</code> Current workflow configuration <code>imbi_project</code> <code>ImbiProject</code> Complete Imbi project data <code>github_repository</code> <code>GitHubRepository</code> GitHub repo data (if applicable) <code>gitlab_project</code> <code>GitLabProject</code> GitLab project data (if applicable) <code>working_directory</code> <code>Path</code> Workflow execution directory <code>starting_commit</code> <code>str</code> Initial Git commit SHA <p>Technical Details:</p> <p>The template action calls <code>prompts.render(self.context, source_path)</code> but does not pass <code>**self.context.model_dump()</code> as kwargs, unlike shell and claude actions which do pass context variables. This means all template examples below will fail in the current implementation.</p>"},{"location":"actions/template/#examples","title":"Examples","text":""},{"location":"actions/template/#single-file-template","title":"Single File Template","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"generate-readme\"\ntype = \"template\"\nsource_path = \"workflow:///templates/README.md.j2\"\ndestination_path = \"repository:///README.md\"\n</code></pre></p> <p>Template (<code>templates/README.md.j2</code>): <pre><code># {{ imbi_project.name }}\n\n{{ imbi_project.description }}\n\n## Project Information\n\n- **Type**: {{ imbi_project.project_type }}\n- **Namespace**: {{ imbi_project.namespace }}\n- **Imbi URL**: {{ imbi_project.imbi_url }}\n\n{% if github_repository %}\n## Repository\n\n- **GitHub**: {{ github_repository.html_url }}\n- **Default Branch**: {{ github_repository.default_branch }}\n{% endif %}\n\n## Installation\n\n```bash\npip install {{ imbi_project.slug }}\n</code></pre></p> <p>Generated by {{ workflow.configuration.name }} on {{ now() }} <pre><code>### Directory Template\n\n**Workflow config:**\n```toml\n[[actions]]\nname = \"render-configs\"\ntype = \"template\"\nsource_path = \"workflow:///templates/configs\"\ndestination_path = \"repository:///config/\"\n</code></pre></p> <p>Directory structure: <pre><code>workflow/templates/configs/\n\u251c\u2500\u2500 app.yaml.j2\n\u251c\u2500\u2500 database.yaml.j2\n\u2514\u2500\u2500 logging.yaml.j2\n</code></pre></p> <p>Result: <pre><code>repository/config/\n\u251c\u2500\u2500 app.yaml\n\u251c\u2500\u2500 database.yaml\n\u2514\u2500\u2500 logging.yaml\n</code></pre></p>"},{"location":"actions/template/#github-actions-workflow-template","title":"GitHub Actions Workflow Template","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"generate-ci-workflow\"\ntype = \"template\"\nsource_path = \"workflow:///ci-template.yml.j2\"\ndestination_path = \"repository:///.github/workflows/ci.yml\"\n</code></pre></p> <p>Template: <pre><code>name: CI\n\non:\n  push:\n    branches: [ {{ github_repository.default_branch }} ]\n  pull_request:\n    branches: [ {{ github_repository.default_branch }} ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      {% if imbi_project.facts.get('Programming Language', '').startswith('Python') %}\n      - name: Set up Python\n        uses: actions/setup-python@v5\n        with:\n          python-version: '{{ imbi_project.facts['Programming Language'].split()[-1] }}'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -e .[dev]\n\n      - name: Run tests\n        run: pytest tests/ -v\n      {% elif imbi_project.facts.get('Programming Language') == 'JavaScript' %}\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: '18'\n\n      - name: Install dependencies\n        run: npm ci\n\n      - name: Run tests\n        run: npm test\n      {% endif %}\n</code></pre></p>"},{"location":"actions/template/#dockerfile-template","title":"Dockerfile Template","text":"<p>Workflow config: <pre><code>[[actions]]\nname = \"generate-dockerfile\"\ntype = \"template\"\nsource_path = \"workflow:///Dockerfile.j2\"\ndestination_path = \"repository:///Dockerfile\"\n</code></pre></p> <p>Template: <pre><code>{% set python_version = imbi_project.facts.get('Programming Language', 'Python 3.12').split()[-1] %}\nFROM python:{{ python_version }}-slim\n\nLABEL maintainer=\"{{ imbi_project.namespace }}\"\nLABEL project=\"{{ imbi_project.slug }}\"\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n\n{% if imbi_project.project_type == 'api' %}\nCMD [\"uvicorn\", \"{{ imbi_project.slug }}.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n{% elif imbi_project.project_type == 'consumer' %}\nCMD [\"python\", \"-m\", \"{{ imbi_project.slug }}.consumer\"]\n{% else %}\nCMD [\"python\", \"-m\", \"{{ imbi_project.slug }}\"]\n{% endif %}\n</code></pre></p>"},{"location":"actions/template/#jinja2-template-features","title":"Jinja2 Template Features","text":""},{"location":"actions/template/#variables","title":"Variables","text":"<pre><code>{{ imbi_project.name }}\n{{ imbi_project.slug }}\n{{ workflow.configuration.name }}\n</code></pre>"},{"location":"actions/template/#conditionals","title":"Conditionals","text":"<pre><code>{% if imbi_project.project_type == 'api' %}\n  API-specific content\n{% elif imbi_project.project_type == 'consumer' %}\n  Consumer-specific content\n{% else %}\n  Default content\n{% endif %}\n</code></pre>"},{"location":"actions/template/#loops","title":"Loops","text":"<pre><code>{% for env in imbi_project.environments %}\n- {{ env.name }}: {{ env.url }}\n{% endfor %}\n</code></pre>"},{"location":"actions/template/#filters","title":"Filters","text":"<pre><code>{{ imbi_project.name | upper }}\n{{ imbi_project.slug | replace('-', '_') }}\n{{ imbi_project.description | truncate(100) }}\n</code></pre>"},{"location":"actions/template/#tests","title":"Tests","text":"<pre><code>{% if github_repository is defined %}\n  Has GitHub repository\n{% endif %}\n\n{% if imbi_project.facts %}\n  Has facts defined\n{% endif %}\n</code></pre>"},{"location":"actions/template/#comments","title":"Comments","text":"<pre><code>{# This is a comment - won't appear in output #}\n{{ imbi_project.name }}  {# inline comment #}\n</code></pre>"},{"location":"actions/template/#common-patterns","title":"Common Patterns","text":""},{"location":"actions/template/#configuration-file-generation","title":"Configuration File Generation","text":"<pre><code>[[actions]]\nname = \"generate-app-config\"\ntype = \"template\"\nsource_path = \"workflow:///app.yaml.j2\"\ndestination_path = \"repository:///config/app.yaml\"\n</code></pre> <p>Template: <pre><code>application:\n  name: {{ imbi_project.slug }}\n  type: {{ imbi_project.project_type }}\n\n{% if imbi_project.environments %}\nenvironments:\n{% for env in imbi_project.environments %}\n  {{ env.name }}:\n    url: {{ env.url }}\n    enabled: true\n{% endfor %}\n{% endif %}\n\ndatabase:\n  host: ${DB_HOST}\n  port: ${DB_PORT}\n  name: {{ imbi_project.slug | replace('-', '_') }}\n</code></pre></p>"},{"location":"actions/template/#multi-file-template-directory","title":"Multi-File Template Directory","text":"<pre><code>[[actions]]\nname = \"generate-all-configs\"\ntype = \"template\"\nsource_path = \"workflow:///templates\"\ndestination_path = \"repository:///config/\"\n</code></pre> <p>Template directory: <pre><code>workflow/templates/\n\u251c\u2500\u2500 app.yaml.j2\n\u251c\u2500\u2500 database.yaml.j2\n\u251c\u2500\u2500 logging.yaml.j2\n\u2514\u2500\u2500 monitoring.yaml.j2\n</code></pre></p>"},{"location":"actions/template/#documentation-generation","title":"Documentation Generation","text":"<pre><code>[[actions]]\nname = \"generate-docs\"\ntype = \"template\"\nsource_path = \"workflow:///docs\"\ndestination_path = \"repository:///docs/\"\n</code></pre> <p>Template: <pre><code># {{ imbi_project.name }} Documentation\n\n## Overview\n{{ imbi_project.description }}\n\n## Quick Start\n\n### Installation\n```bash\npip install {{ imbi_project.slug }}\n</code></pre></p>"},{"location":"actions/template/#usage","title":"Usage","text":"<pre><code>from {{ imbi_project.slug | replace('-', '_') }} import main\n\nmain()\n</code></pre>"},{"location":"actions/template/#api-reference","title":"API Reference","text":"<p>{% if imbi_project.project_type == 'api' %} The API is available at: <code>https://{{ imbi_project.slug }}.example.com/api</code> {% endif %}</p>"},{"location":"actions/template/#contributing","title":"Contributing","text":"<p>Contributions welcome! See CONTRIBUTING.md in the repository for details.</p> <p>Generated from template by {{ workflow.configuration.name }} <pre><code>## Advanced Templates\n\n### Accessing Nested Data\n\n```jinja2\n{# Access project facts #}\n{% if 'Programming Language' in imbi_project.facts %}\nLanguage: {{ imbi_project.facts['Programming Language'] }}\n{% endif %}\n\n{# Access GitHub repository details #}\n{% if github_repository %}\nStars: {{ github_repository.stargazers_count }}\nForks: {{ github_repository.forks_count }}\n{% endif %}\n</code></pre></p>"},{"location":"actions/template/#template-inheritance","title":"Template Inheritance","text":"<p>Base template (<code>base.j2</code>): <pre><code># {{ imbi_project.name }}\n\n{% block content %}\nDefault content\n{% endblock %}\n\n---\nGenerated by {{ workflow.configuration.name }}\n</code></pre></p> <p>Child template (<code>readme.j2</code>): <pre><code>{% extends \"base.j2\" %}\n\n{% block content %}\n## Description\n{{ imbi_project.description }}\n\n## Installation\npip install {{ imbi_project.slug }}\n{% endblock %}\n</code></pre></p>"},{"location":"actions/template/#macros","title":"Macros","text":"<pre><code>{% macro render_environment(env) %}\n## {{ env.name | title }}\n- URL: {{ env.url }}\n- Active: {{ env.active | default(true) }}\n{% endmacro %}\n\n# Environments\n\n{% for env in imbi_project.environments %}\n{{ render_environment(env) }}\n{% endfor %}\n</code></pre>"},{"location":"actions/template/#custom-filters","title":"Custom Filters","text":"<pre><code>{# Convert kebab-case to snake_case #}\n{{ imbi_project.slug | replace('-', '_') }}\n\n{# Convert to SCREAMING_SNAKE_CASE #}\n{{ imbi_project.slug | replace('-', '_') | upper }}\n\n{# Truncate long descriptions #}\n{{ imbi_project.description | truncate(100, True, '...') }}\n</code></pre>"},{"location":"actions/template/#path-resolution","title":"Path Resolution","text":"<p>Both source and destination support ResourceUrl schemes:</p> <pre><code># Workflow templates to repository\n[[actions]]\ntype = \"template\"\nsource_path = \"workflow:///templates/\"\ndestination_path = \"repository:///config/\"\n\n# Specific file paths\n[[actions]]\ntype = \"template\"\nsource_path = \"workflow:///README.md.j2\"\ndestination_path = \"repository:///README.md\"\n\n# Extracted data with templates\n[[actions]]\ntype = \"template\"\nsource_path = \"workflow:///process-extracted.j2\"\ndestination_path = \"extracted:///processed/output.txt\"\n</code></pre>"},{"location":"actions/template/#error-handling","title":"Error Handling","text":"<p>Template actions raise errors for:</p> <ul> <li>Missing source: Source file/directory doesn't exist</li> <li>Template syntax errors: Invalid Jinja2 syntax</li> <li>Undefined variables: Referenced variables not in context</li> <li>I/O errors: Permission denied, disk full, etc.</li> </ul>"},{"location":"actions/template/#handling-undefined-variables","title":"Handling Undefined Variables","text":"<p>Strict mode (default - raises error): <pre><code>{{ undefined_variable }}  {# Raises error #}\n</code></pre></p> <p>Graceful fallback: <pre><code>{{ undefined_variable | default('fallback value') }}\n{{ undefined_variable | default('') }}\n</code></pre></p> <p>Check before use: <pre><code>{% if undefined_variable is defined %}\n  {{ undefined_variable }}\n{% endif %}\n</code></pre></p>"},{"location":"actions/template/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Templates rendered using Jinja2 with StrictUndefined by default</li> <li>BUG: Context variables NOT passed to templates (missing <code>**context.model_dump()</code> in render calls)</li> <li><code>.j2</code> extension NOT automatically removed from output filenames</li> <li>Directory rendering is recursive via <code>source_path.rglob('*')</code></li> <li>Existing files overwritten without warning</li> <li>Parent directories created automatically with <code>mkdir(parents=True, exist_ok=True)</code></li> <li>File permissions NOT explicitly preserved (uses default umask)</li> <li>Template context is immutable during rendering</li> <li>All Jinja2 built-in filters and tests available (if context were passed)</li> <li>Only <code>extract_image_from_dockerfile</code> custom function added to globals</li> </ul> <p>Implementation Location: <code>src/imbi_automations/actions/template.py:24-82</code></p> <p>Bug Details: <pre><code># Current broken implementation (line 52, 73):\nprompts.render(self.context, source_path)\n\n# Should be (like shell.py:130 and claude.py:130):\nprompts.render(self.context, source_path, **self.context.model_dump())\n</code></pre></p>"},{"location":"actions/template/#best-practices","title":"Best Practices","text":"<ol> <li>Use <code>.j2</code> extension: Makes templates easily identifiable</li> <li>Provide defaults: Use <code>| default()</code> for optional values</li> <li>Check existence: Test <code>is defined</code> before accessing optional data</li> <li>Document templates: Add comments explaining template logic</li> <li>Test templates: Verify output with sample data before production</li> <li>Version control: Keep templates in workflow resources</li> <li>Validate output: Use shell actions to validate generated configs</li> </ol>"},{"location":"actions/utility/","title":"Utility Actions","text":"<p>\u26a0\ufe0f ALL COMMANDS NOT IMPLEMENTED: All utility commands currently raise <code>NotImplementedError</code>. This action type is a placeholder for future functionality.</p> <p>Utility actions are intended to provide helper operations for Docker tag parsing, Dockerfile analysis, semantic versioning comparison, and Python constraint parsing.</p>"},{"location":"actions/utility/#configuration","title":"Configuration","text":"<pre><code>[[actions]]\nname = \"action-name\"\ntype = \"utility\"\ncommand = \"docker_tag|dockerfile_from|compare_semver|parse_python_constraints\"\npath = \"repository:///path/to/file\"  # Optional\nargs = []      # Optional\nkwargs = {}    # Optional\n</code></pre>"},{"location":"actions/utility/#fields","title":"Fields","text":""},{"location":"actions/utility/#command-required","title":"command (required)","text":"<p>The utility operation to perform.</p> <p>Type: <code>string</code></p> <p>Options: - <code>docker_tag</code> - Parse Docker image tags (not implemented) - <code>dockerfile_from</code> - Extract FROM directive from Dockerfile (not implemented) - <code>compare_semver</code> - Compare semantic version strings (not implemented) - <code>parse_python_constraints</code> - Parse Python version constraints (not implemented)</p>"},{"location":"actions/utility/#path-optional","title":"path (optional)","text":"<p>File path for operations that require file input.</p> <p>Type: <code>ResourceUrl</code> (string path)</p> <p>Default: None</p>"},{"location":"actions/utility/#args-optional","title":"args (optional)","text":"<p>Positional arguments for the utility operation.</p> <p>Type: <code>list</code></p> <p>Default: <code>[]</code></p>"},{"location":"actions/utility/#kwargs-optional","title":"kwargs (optional)","text":"<p>Keyword arguments for the utility operation.</p> <p>Type: <code>dict</code></p> <p>Default: <code>{}</code></p>"},{"location":"actions/utility/#commands","title":"Commands","text":""},{"location":"actions/utility/#docker_tag","title":"docker_tag","text":"<p>Status: \u274c Not implemented (raises NotImplementedError)</p> <p>Parse and manipulate Docker image tags.</p> <p>Intended Usage: <pre><code>[[actions]]\nname = \"parse-docker-tag\"\ntype = \"utility\"\ncommand = \"docker_tag\"\nargs = [\"python:3.12-slim\"]\n</code></pre></p>"},{"location":"actions/utility/#dockerfile_from","title":"dockerfile_from","text":"<p>Status: \u274c Not implemented (raises NotImplementedError)</p> <p>Extract the base image FROM directive from a Dockerfile.</p> <p>Intended Usage: <pre><code>[[actions]]\nname = \"get-base-image\"\ntype = \"utility\"\ncommand = \"dockerfile_from\"\npath = \"repository:///Dockerfile\"\n</code></pre></p>"},{"location":"actions/utility/#compare_semver","title":"compare_semver","text":"<p>Status: \u274c Not implemented (raises NotImplementedError)</p> <p>Compare two semantic version strings.</p> <p>Intended Usage: <pre><code>[[actions]]\nname = \"check-version\"\ntype = \"utility\"\ncommand = \"compare_semver\"\nargs = [\"1.2.3\", \"1.2.4\"]\n</code></pre></p>"},{"location":"actions/utility/#parse_python_constraints","title":"parse_python_constraints","text":"<p>Status: \u274c Not implemented (raises NotImplementedError)</p> <p>Parse Python version constraint strings (e.g., <code>&gt;=3.8,&lt;4.0</code>).</p> <p>Intended Usage: <pre><code>[[actions]]\nname = \"parse-constraints\"\ntype = \"utility\"\ncommand = \"parse_python_constraints\"\nargs = [\"&gt;=3.8,&lt;4.0\"]\n</code></pre></p>"},{"location":"actions/utility/#implementation-status","title":"Implementation Status","text":"<p>Currently, all utility commands are defined but not implemented. The implementation in <code>src/imbi_automations/actions/utility.py</code> lines 24-43 shows:</p> <pre><code>async def execute(self, action: models.WorkflowUtilityAction) -&gt; None:\n    match action.command:\n        case models.WorkflowUtilityCommands.docker_tag:\n            raise NotImplementedError('Utility docker_tag not yet supported')\n        case models.WorkflowUtilityCommands.dockerfile_from:\n            raise NotImplementedError('Utility dockerfile_from not yet supported')\n        case models.WorkflowUtilityCommands.compare_semver:\n            raise NotImplementedError('Utility compare_semver not yet supported')\n        case models.WorkflowUtilityCommands.parse_python_constraints:\n            raise NotImplementedError('Utility parse_python_constraints not yet supported')\n</code></pre> <p>Workarounds:</p> <p>Until these utilities are implemented, use alternative approaches:</p> <ol> <li>Docker tag parsing: Use shell action with <code>docker inspect</code> or regex</li> <li>Dockerfile FROM: Use file action with regex pattern or shell action with <code>grep</code></li> <li>Semver comparison: Use shell action with <code>semver</code> CLI tool</li> <li>Python constraints: Use shell action with Python's <code>packaging</code> library</li> </ol>"},{"location":"actions/utility/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>All commands currently raise <code>NotImplementedError</code></li> <li>Model defined in <code>src/imbi_automations/models/workflow.py:373-398</code></li> <li>Implementation skeleton in <code>src/imbi_automations/actions/utility.py:1-44</code></li> <li>Fields <code>path</code>, <code>args</code>, and <code>kwargs</code> are defined but unused</li> <li>This action type exists as a placeholder for future functionality</li> </ul>"}]}